
AssignRB02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab0  08004ab0  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08004ab0  08004ab0  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ab0  08004ab0  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08004ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200000d8  08004b90  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08004b90  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c618  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021bb  00000000  00000000  0002c719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0002e8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  0002f690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a02  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5ac  00000000  00000000  00048d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b169  00000000  00000000  000582e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e344f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b20  00000000  00000000  000e34a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d8 	.word	0x200000d8
 8000128:	00000000 	.word	0x00000000
 800012c:	080049d0 	.word	0x080049d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000dc 	.word	0x200000dc
 8000148:	080049d0 	.word	0x080049d0

0800014c <LED1_OFF>:
////////////////////////



// GROUP LED1;
void LED1_OFF(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <LED1_OFF+0x20>)
 8000158:	f001 ff03 	bl	8001f62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, RESET);
 800015c:	2200      	movs	r2, #0
 800015e:	2108      	movs	r1, #8
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <LED1_OFF+0x24>)
 8000162:	f001 fefe 	bl	8001f62 <HAL_GPIO_WritePin>
}
 8000166:	bf00      	nop
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	40010800 	.word	0x40010800
 8000170:	40010c00 	.word	0x40010c00

08000174 <RED1_TOGGLE>:

void RED1_TOGGLE(){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	if (RED1 == 0){
 8000178:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <RED1_TOGGLE+0x38>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d10e      	bne.n	800019e <RED1_TOGGLE+0x2a>
		HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000186:	480a      	ldr	r0, [pc, #40]	; (80001b0 <RED1_TOGGLE+0x3c>)
 8000188:	f001 feeb 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2108      	movs	r1, #8
 8000190:	4808      	ldr	r0, [pc, #32]	; (80001b4 <RED1_TOGGLE+0x40>)
 8000192:	f001 fee6 	bl	8001f62 <HAL_GPIO_WritePin>
		RED1 = 1;
 8000196:	4b05      	ldr	r3, [pc, #20]	; (80001ac <RED1_TOGGLE+0x38>)
 8000198:	2201      	movs	r2, #1
 800019a:	601a      	str	r2, [r3, #0]
	}
	else{
		LED1_OFF();
		RED1 = 0;
	}
}
 800019c:	e004      	b.n	80001a8 <RED1_TOGGLE+0x34>
		LED1_OFF();
 800019e:	f7ff ffd5 	bl	800014c <LED1_OFF>
		RED1 = 0;
 80001a2:	4b02      	ldr	r3, [pc, #8]	; (80001ac <RED1_TOGGLE+0x38>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
}
 80001a8:	bf00      	nop
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	200000f4 	.word	0x200000f4
 80001b0:	40010800 	.word	0x40010800
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <YELLOW1_TOGGLE>:
void YELLOW1_TOGGLE(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	if (YELLOW1 == 0){
 80001bc:	4b0c      	ldr	r3, [pc, #48]	; (80001f0 <YELLOW1_TOGGLE+0x38>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d10e      	bne.n	80001e2 <YELLOW1_TOGGLE+0x2a>
		HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ca:	480a      	ldr	r0, [pc, #40]	; (80001f4 <YELLOW1_TOGGLE+0x3c>)
 80001cc:	f001 fec9 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2108      	movs	r1, #8
 80001d4:	4808      	ldr	r0, [pc, #32]	; (80001f8 <YELLOW1_TOGGLE+0x40>)
 80001d6:	f001 fec4 	bl	8001f62 <HAL_GPIO_WritePin>
		YELLOW1 = 1;
 80001da:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <YELLOW1_TOGGLE+0x38>)
 80001dc:	2201      	movs	r2, #1
 80001de:	601a      	str	r2, [r3, #0]
	}
	else{
		LED1_OFF();
		YELLOW1 = 0;
	}
}
 80001e0:	e004      	b.n	80001ec <YELLOW1_TOGGLE+0x34>
		LED1_OFF();
 80001e2:	f7ff ffb3 	bl	800014c <LED1_OFF>
		YELLOW1 = 0;
 80001e6:	4b02      	ldr	r3, [pc, #8]	; (80001f0 <YELLOW1_TOGGLE+0x38>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	200000f8 	.word	0x200000f8
 80001f4:	40010800 	.word	0x40010800
 80001f8:	40010c00 	.word	0x40010c00

080001fc <GREEN1_TOGGLE>:
void GREEN1_TOGGLE(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	if (GREEN1 == 0){
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <GREEN1_TOGGLE+0x38>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d10e      	bne.n	8000226 <GREEN1_TOGGLE+0x2a>
		HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800020e:	480a      	ldr	r0, [pc, #40]	; (8000238 <GREEN1_TOGGLE+0x3c>)
 8000210:	f001 fea7 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, SET);
 8000214:	2201      	movs	r2, #1
 8000216:	2108      	movs	r1, #8
 8000218:	4808      	ldr	r0, [pc, #32]	; (800023c <GREEN1_TOGGLE+0x40>)
 800021a:	f001 fea2 	bl	8001f62 <HAL_GPIO_WritePin>
		GREEN1 = 1;
 800021e:	4b05      	ldr	r3, [pc, #20]	; (8000234 <GREEN1_TOGGLE+0x38>)
 8000220:	2201      	movs	r2, #1
 8000222:	601a      	str	r2, [r3, #0]
	}
	else{
		LED1_OFF();
		GREEN1 = 0;
	}
}
 8000224:	e004      	b.n	8000230 <GREEN1_TOGGLE+0x34>
		LED1_OFF();
 8000226:	f7ff ff91 	bl	800014c <LED1_OFF>
		GREEN1 = 0;
 800022a:	4b02      	ldr	r3, [pc, #8]	; (8000234 <GREEN1_TOGGLE+0x38>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	200000fc 	.word	0x200000fc
 8000238:	40010800 	.word	0x40010800
 800023c:	40010c00 	.word	0x40010c00

08000240 <LED2_OFF>:


//GROUP LED2
void LED2_OFF(){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2120      	movs	r1, #32
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <LED2_OFF+0x1c>)
 800024a:	f001 fe8a 	bl	8001f62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2110      	movs	r1, #16
 8000252:	4802      	ldr	r0, [pc, #8]	; (800025c <LED2_OFF+0x1c>)
 8000254:	f001 fe85 	bl	8001f62 <HAL_GPIO_WritePin>
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40010c00 	.word	0x40010c00

08000260 <RED2_TOGGLE>:

void RED2_TOGGLE(){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	if (RED2 == 0){
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <RED2_TOGGLE+0x38>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d10d      	bne.n	8000288 <RED2_TOGGLE+0x28>
		HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, SET);
 800026c:	2201      	movs	r2, #1
 800026e:	2120      	movs	r1, #32
 8000270:	480a      	ldr	r0, [pc, #40]	; (800029c <RED2_TOGGLE+0x3c>)
 8000272:	f001 fe76 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	4808      	ldr	r0, [pc, #32]	; (800029c <RED2_TOGGLE+0x3c>)
 800027c:	f001 fe71 	bl	8001f62 <HAL_GPIO_WritePin>
		RED2 = 1;
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <RED2_TOGGLE+0x38>)
 8000282:	2201      	movs	r2, #1
 8000284:	601a      	str	r2, [r3, #0]
	}
	else{
		LED2_OFF();
		RED2 = 0;
	}
}
 8000286:	e004      	b.n	8000292 <RED2_TOGGLE+0x32>
		LED2_OFF();
 8000288:	f7ff ffda 	bl	8000240 <LED2_OFF>
		RED2 = 0;
 800028c:	4b02      	ldr	r3, [pc, #8]	; (8000298 <RED2_TOGGLE+0x38>)
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000100 	.word	0x20000100
 800029c:	40010c00 	.word	0x40010c00

080002a0 <YELLOW2_TOGGLE>:
void YELLOW2_TOGGLE(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	if (YELLOW2 == 0){
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <YELLOW2_TOGGLE+0x38>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d10d      	bne.n	80002c8 <YELLOW2_TOGGLE+0x28>
		HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2120      	movs	r1, #32
 80002b0:	480a      	ldr	r0, [pc, #40]	; (80002dc <YELLOW2_TOGGLE+0x3c>)
 80002b2:	f001 fe56 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2110      	movs	r1, #16
 80002ba:	4808      	ldr	r0, [pc, #32]	; (80002dc <YELLOW2_TOGGLE+0x3c>)
 80002bc:	f001 fe51 	bl	8001f62 <HAL_GPIO_WritePin>
		YELLOW2 = 1;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <YELLOW2_TOGGLE+0x38>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
	}
	else{
		LED2_OFF();
		YELLOW2 = 0;
	}
}
 80002c6:	e004      	b.n	80002d2 <YELLOW2_TOGGLE+0x32>
		LED2_OFF();
 80002c8:	f7ff ffba 	bl	8000240 <LED2_OFF>
		YELLOW2 = 0;
 80002cc:	4b02      	ldr	r3, [pc, #8]	; (80002d8 <YELLOW2_TOGGLE+0x38>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000104 	.word	0x20000104
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <GREEN2_TOGGLE>:
void GREEN2_TOGGLE(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (GREEN2 == 0){
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <GREEN2_TOGGLE+0x38>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d10d      	bne.n	8000308 <GREEN2_TOGGLE+0x28>
		HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2120      	movs	r1, #32
 80002f0:	480a      	ldr	r0, [pc, #40]	; (800031c <GREEN2_TOGGLE+0x3c>)
 80002f2:	f001 fe36 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	2110      	movs	r1, #16
 80002fa:	4808      	ldr	r0, [pc, #32]	; (800031c <GREEN2_TOGGLE+0x3c>)
 80002fc:	f001 fe31 	bl	8001f62 <HAL_GPIO_WritePin>
		GREEN2 = 1;
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <GREEN2_TOGGLE+0x38>)
 8000302:	2201      	movs	r2, #1
 8000304:	601a      	str	r2, [r3, #0]
	}
	else{
		LED2_OFF();
		GREEN2 = 0;
	}
}
 8000306:	e004      	b.n	8000312 <GREEN2_TOGGLE+0x32>
		LED2_OFF();
 8000308:	f7ff ff9a 	bl	8000240 <LED2_OFF>
		GREEN2 = 0;
 800030c:	4b02      	ldr	r3, [pc, #8]	; (8000318 <GREEN2_TOGGLE+0x38>)
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000108 	.word	0x20000108
 800031c:	40010c00 	.word	0x40010c00

08000320 <LED3_OFF>:


//GROUP LED3
void LED3_OFF(){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3A_GPIO_Port, LED3A_Pin, RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <LED3_OFF+0x20>)
 800032c:	f001 fe19 	bl	8001f62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3B_GPIO_Port, LED3B_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000336:	4803      	ldr	r0, [pc, #12]	; (8000344 <LED3_OFF+0x24>)
 8000338:	f001 fe13 	bl	8001f62 <HAL_GPIO_WritePin>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40010c00 	.word	0x40010c00
 8000344:	40010800 	.word	0x40010800

08000348 <RED3_TOGGLE>:

void RED3_TOGGLE(){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	if (RED3 == 0){
 800034c:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <RED3_TOGGLE+0x3c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d10f      	bne.n	8000374 <RED3_TOGGLE+0x2c>
		HAL_GPIO_WritePin(LED3A_GPIO_Port, LED3A_Pin, SET);
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800035a:	480b      	ldr	r0, [pc, #44]	; (8000388 <RED3_TOGGLE+0x40>)
 800035c:	f001 fe01 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3B_GPIO_Port, LED3B_Pin, RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000366:	4809      	ldr	r0, [pc, #36]	; (800038c <RED3_TOGGLE+0x44>)
 8000368:	f001 fdfb 	bl	8001f62 <HAL_GPIO_WritePin>
		RED3 = 1;
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <RED3_TOGGLE+0x3c>)
 800036e:	2201      	movs	r2, #1
 8000370:	601a      	str	r2, [r3, #0]
	}
	else{
		LED3_OFF();
		RED3 = 0;
	}
}
 8000372:	e004      	b.n	800037e <RED3_TOGGLE+0x36>
		LED3_OFF();
 8000374:	f7ff ffd4 	bl	8000320 <LED3_OFF>
		RED3 = 0;
 8000378:	4b02      	ldr	r3, [pc, #8]	; (8000384 <RED3_TOGGLE+0x3c>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	2000010c 	.word	0x2000010c
 8000388:	40010c00 	.word	0x40010c00
 800038c:	40010800 	.word	0x40010800

08000390 <YELLOW3_TOGGLE>:
void YELLOW3_TOGGLE(){
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	if (YELLOW3 == 0){
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <YELLOW3_TOGGLE+0x3c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d10f      	bne.n	80003bc <YELLOW3_TOGGLE+0x2c>
		HAL_GPIO_WritePin(LED3A_GPIO_Port, LED3A_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a2:	480b      	ldr	r0, [pc, #44]	; (80003d0 <YELLOW3_TOGGLE+0x40>)
 80003a4:	f001 fddd 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3B_GPIO_Port, LED3B_Pin, SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ae:	4809      	ldr	r0, [pc, #36]	; (80003d4 <YELLOW3_TOGGLE+0x44>)
 80003b0:	f001 fdd7 	bl	8001f62 <HAL_GPIO_WritePin>
		YELLOW3 = 1;
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <YELLOW3_TOGGLE+0x3c>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	601a      	str	r2, [r3, #0]
	}
	else{
		LED3_OFF();
		YELLOW3 = 0;
	}
}
 80003ba:	e004      	b.n	80003c6 <YELLOW3_TOGGLE+0x36>
		LED3_OFF();
 80003bc:	f7ff ffb0 	bl	8000320 <LED3_OFF>
		YELLOW3 = 0;
 80003c0:	4b02      	ldr	r3, [pc, #8]	; (80003cc <YELLOW3_TOGGLE+0x3c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000110 	.word	0x20000110
 80003d0:	40010c00 	.word	0x40010c00
 80003d4:	40010800 	.word	0x40010800

080003d8 <GREEN3_TOGGLE>:
void GREEN3_TOGGLE(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	if (GREEN3 == 0){
 80003dc:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <GREEN3_TOGGLE+0x3c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d10f      	bne.n	8000404 <GREEN3_TOGGLE+0x2c>
		HAL_GPIO_WritePin(LED3A_GPIO_Port, LED3A_Pin, RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ea:	480b      	ldr	r0, [pc, #44]	; (8000418 <GREEN3_TOGGLE+0x40>)
 80003ec:	f001 fdb9 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3B_GPIO_Port, LED3B_Pin, SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f6:	4809      	ldr	r0, [pc, #36]	; (800041c <GREEN3_TOGGLE+0x44>)
 80003f8:	f001 fdb3 	bl	8001f62 <HAL_GPIO_WritePin>
		GREEN3 = 1;
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <GREEN3_TOGGLE+0x3c>)
 80003fe:	2201      	movs	r2, #1
 8000400:	601a      	str	r2, [r3, #0]
	}
	else{
		LED3_OFF();
		GREEN3 = 0;
	}
}
 8000402:	e004      	b.n	800040e <GREEN3_TOGGLE+0x36>
		LED3_OFF();
 8000404:	f7ff ff8c 	bl	8000320 <LED3_OFF>
		GREEN3 = 0;
 8000408:	4b02      	ldr	r3, [pc, #8]	; (8000414 <GREEN3_TOGGLE+0x3c>)
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000114 	.word	0x20000114
 8000418:	40010c00 	.word	0x40010c00
 800041c:	40010800 	.word	0x40010800

08000420 <setTimer1>:
int timer10_flag = 0;
///


//*******
void setTimer1(int duration){
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/CLOCK_TIMER;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a08      	ldr	r2, [pc, #32]	; (800044c <setTimer1+0x2c>)
 800042c:	fb82 1203 	smull	r1, r2, r2, r3
 8000430:	1092      	asrs	r2, r2, #2
 8000432:	17db      	asrs	r3, r3, #31
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	4a06      	ldr	r2, [pc, #24]	; (8000450 <setTimer1+0x30>)
 8000438:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <setTimer1+0x34>)
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	66666667 	.word	0x66666667
 8000450:	20000118 	.word	0x20000118
 8000454:	20000140 	.word	0x20000140

08000458 <setTimer2>:

void setTimer2(int duration){
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/CLOCK_TIMER;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a08      	ldr	r2, [pc, #32]	; (8000484 <setTimer2+0x2c>)
 8000464:	fb82 1203 	smull	r1, r2, r2, r3
 8000468:	1092      	asrs	r2, r2, #2
 800046a:	17db      	asrs	r3, r3, #31
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	4a06      	ldr	r2, [pc, #24]	; (8000488 <setTimer2+0x30>)
 8000470:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <setTimer2+0x34>)
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	66666667 	.word	0x66666667
 8000488:	2000011c 	.word	0x2000011c
 800048c:	20000144 	.word	0x20000144

08000490 <setTimer3>:

void setTimer3(int duration){
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/CLOCK_TIMER;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a08      	ldr	r2, [pc, #32]	; (80004bc <setTimer3+0x2c>)
 800049c:	fb82 1203 	smull	r1, r2, r2, r3
 80004a0:	1092      	asrs	r2, r2, #2
 80004a2:	17db      	asrs	r3, r3, #31
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <setTimer3+0x30>)
 80004a8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <setTimer3+0x34>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	66666667 	.word	0x66666667
 80004c0:	20000120 	.word	0x20000120
 80004c4:	20000148 	.word	0x20000148

080004c8 <setTimer5>:
void setTimer4(int duration){
	timer4_counter = duration/CLOCK_TIMER;
	timer4_flag = 0;
}

void setTimer5(int duration){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/CLOCK_TIMER;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <setTimer5+0x2c>)
 80004d4:	fb82 1203 	smull	r1, r2, r2, r3
 80004d8:	1092      	asrs	r2, r2, #2
 80004da:	17db      	asrs	r3, r3, #31
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <setTimer5+0x30>)
 80004e0:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <setTimer5+0x34>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	66666667 	.word	0x66666667
 80004f8:	20000128 	.word	0x20000128
 80004fc:	20000150 	.word	0x20000150

08000500 <timerRun>:
}
//**********



void timerRun(){
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	if (timer1_counter == 1 ){
 8000504:	4b42      	ldr	r3, [pc, #264]	; (8000610 <timerRun+0x110>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d103      	bne.n	8000514 <timerRun+0x14>
		//BEGIN-TODO
		timer1_flag = 1;
 800050c:	4b41      	ldr	r3, [pc, #260]	; (8000614 <timerRun+0x114>)
 800050e:	2201      	movs	r2, #1
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	e004      	b.n	800051e <timerRun+0x1e>
		//END-TODO
	}
	else timer1_counter--;
 8000514:	4b3e      	ldr	r3, [pc, #248]	; (8000610 <timerRun+0x110>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3b01      	subs	r3, #1
 800051a:	4a3d      	ldr	r2, [pc, #244]	; (8000610 <timerRun+0x110>)
 800051c:	6013      	str	r3, [r2, #0]

	if (timer2_counter == 1 ) timer2_flag = 1;
 800051e:	4b3e      	ldr	r3, [pc, #248]	; (8000618 <timerRun+0x118>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d103      	bne.n	800052e <timerRun+0x2e>
 8000526:	4b3d      	ldr	r3, [pc, #244]	; (800061c <timerRun+0x11c>)
 8000528:	2201      	movs	r2, #1
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	e004      	b.n	8000538 <timerRun+0x38>
	else timer2_counter--;
 800052e:	4b3a      	ldr	r3, [pc, #232]	; (8000618 <timerRun+0x118>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3b01      	subs	r3, #1
 8000534:	4a38      	ldr	r2, [pc, #224]	; (8000618 <timerRun+0x118>)
 8000536:	6013      	str	r3, [r2, #0]

	if (timer3_counter == 1 ) timer3_flag = 1;
 8000538:	4b39      	ldr	r3, [pc, #228]	; (8000620 <timerRun+0x120>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d103      	bne.n	8000548 <timerRun+0x48>
 8000540:	4b38      	ldr	r3, [pc, #224]	; (8000624 <timerRun+0x124>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	e004      	b.n	8000552 <timerRun+0x52>
	else timer3_counter--;
 8000548:	4b35      	ldr	r3, [pc, #212]	; (8000620 <timerRun+0x120>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3b01      	subs	r3, #1
 800054e:	4a34      	ldr	r2, [pc, #208]	; (8000620 <timerRun+0x120>)
 8000550:	6013      	str	r3, [r2, #0]

	if (timer4_counter == 1 ) timer4_flag = 1;
 8000552:	4b35      	ldr	r3, [pc, #212]	; (8000628 <timerRun+0x128>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d103      	bne.n	8000562 <timerRun+0x62>
 800055a:	4b34      	ldr	r3, [pc, #208]	; (800062c <timerRun+0x12c>)
 800055c:	2201      	movs	r2, #1
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	e004      	b.n	800056c <timerRun+0x6c>
	else timer4_counter--;
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <timerRun+0x128>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3b01      	subs	r3, #1
 8000568:	4a2f      	ldr	r2, [pc, #188]	; (8000628 <timerRun+0x128>)
 800056a:	6013      	str	r3, [r2, #0]

	if (timer5_counter == 1 ) timer5_flag = 1;
 800056c:	4b30      	ldr	r3, [pc, #192]	; (8000630 <timerRun+0x130>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d103      	bne.n	800057c <timerRun+0x7c>
 8000574:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <timerRun+0x134>)
 8000576:	2201      	movs	r2, #1
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	e004      	b.n	8000586 <timerRun+0x86>
	else timer5_counter--;
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <timerRun+0x130>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3b01      	subs	r3, #1
 8000582:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <timerRun+0x130>)
 8000584:	6013      	str	r3, [r2, #0]

	if (timer6_counter == 1 ) timer6_flag = 1;
 8000586:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <timerRun+0x138>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d103      	bne.n	8000596 <timerRun+0x96>
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <timerRun+0x13c>)
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	e004      	b.n	80005a0 <timerRun+0xa0>
	else timer6_counter--;
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <timerRun+0x138>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3b01      	subs	r3, #1
 800059c:	4a26      	ldr	r2, [pc, #152]	; (8000638 <timerRun+0x138>)
 800059e:	6013      	str	r3, [r2, #0]


	if (timer7_counter == 1 ) timer7_flag = 1;
 80005a0:	4b27      	ldr	r3, [pc, #156]	; (8000640 <timerRun+0x140>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d103      	bne.n	80005b0 <timerRun+0xb0>
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <timerRun+0x144>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	e004      	b.n	80005ba <timerRun+0xba>
	else timer7_counter--;
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <timerRun+0x140>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	4a22      	ldr	r2, [pc, #136]	; (8000640 <timerRun+0x140>)
 80005b8:	6013      	str	r3, [r2, #0]

	if (timer8_counter == 1 ) timer8_flag = 1;
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <timerRun+0x148>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d103      	bne.n	80005ca <timerRun+0xca>
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <timerRun+0x14c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	e004      	b.n	80005d4 <timerRun+0xd4>
	else timer8_counter--;
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <timerRun+0x148>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4a1d      	ldr	r2, [pc, #116]	; (8000648 <timerRun+0x148>)
 80005d2:	6013      	str	r3, [r2, #0]

	if (timer9_counter == 1 ) timer9_flag = 1;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <timerRun+0x150>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d103      	bne.n	80005e4 <timerRun+0xe4>
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <timerRun+0x154>)
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	e004      	b.n	80005ee <timerRun+0xee>
	else timer9_counter--;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <timerRun+0x150>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a19      	ldr	r2, [pc, #100]	; (8000650 <timerRun+0x150>)
 80005ec:	6013      	str	r3, [r2, #0]

	if (timer10_counter == 1 ) timer10_flag = 1;
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <timerRun+0x158>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d103      	bne.n	80005fe <timerRun+0xfe>
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <timerRun+0x15c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
	else timer10_counter--;


}
 80005fc:	e004      	b.n	8000608 <timerRun+0x108>
	else timer10_counter--;
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <timerRun+0x158>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3b01      	subs	r3, #1
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <timerRun+0x158>)
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	20000118 	.word	0x20000118
 8000614:	20000140 	.word	0x20000140
 8000618:	2000011c 	.word	0x2000011c
 800061c:	20000144 	.word	0x20000144
 8000620:	20000120 	.word	0x20000120
 8000624:	20000148 	.word	0x20000148
 8000628:	20000124 	.word	0x20000124
 800062c:	2000014c 	.word	0x2000014c
 8000630:	20000128 	.word	0x20000128
 8000634:	20000150 	.word	0x20000150
 8000638:	2000012c 	.word	0x2000012c
 800063c:	20000154 	.word	0x20000154
 8000640:	20000130 	.word	0x20000130
 8000644:	20000158 	.word	0x20000158
 8000648:	20000134 	.word	0x20000134
 800064c:	2000015c 	.word	0x2000015c
 8000650:	20000138 	.word	0x20000138
 8000654:	20000160 	.word	0x20000160
 8000658:	2000013c 	.word	0x2000013c
 800065c:	20000164 	.word	0x20000164

08000660 <isButton1Pressed>:


//Thoi gian cua nhan de'
int TimerforKeyPRESS1 = 200;

int isButton1Pressed(){
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <isButton1Pressed+0x20>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d104      	bne.n	8000676 <isButton1Pressed+0x16>
		button1_flag = 0;
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <isButton1Pressed+0x20>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
		return 1;
 8000672:	2301      	movs	r3, #1
 8000674:	e000      	b.n	8000678 <isButton1Pressed+0x18>
	}
	else return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000168 	.word	0x20000168

08000684 <getKeyInput1>:
//
void getKeyInput1(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	KeyReg0_1 = KeyReg1_1;
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <getKeyInput1+0x98>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a24      	ldr	r2, [pc, #144]	; (8000720 <getKeyInput1+0x9c>)
 800068e:	6013      	str	r3, [r2, #0]
	KeyReg1_1 = KeyReg2_1;
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <getKeyInput1+0xa0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <getKeyInput1+0x98>)
 8000696:	6013      	str	r3, [r2, #0]
	KeyReg2_1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000698:	2102      	movs	r1, #2
 800069a:	4823      	ldr	r0, [pc, #140]	; (8000728 <getKeyInput1+0xa4>)
 800069c:	f001 fc4a 	bl	8001f34 <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <getKeyInput1+0xa0>)
 80006a6:	601a      	str	r2, [r3, #0]

	if (KeyReg0_1 == KeyReg1_1 && KeyReg1_1 == KeyReg2_1){
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <getKeyInput1+0x9c>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <getKeyInput1+0x98>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d131      	bne.n	8000718 <getKeyInput1+0x94>
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <getKeyInput1+0x98>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <getKeyInput1+0xa0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d12b      	bne.n	8000718 <getKeyInput1+0x94>

		if (KeyReg2_1 != KeyReg3_1){					//Nhan doi trang thai
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <getKeyInput1+0xa0>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <getKeyInput1+0xa8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d012      	beq.n	80006f2 <getKeyInput1+0x6e>
			KeyReg3_1 = KeyReg2_1;
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <getKeyInput1+0xa0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a16      	ldr	r2, [pc, #88]	; (800072c <getKeyInput1+0xa8>)
 80006d2:	6013      	str	r3, [r2, #0]
			if (KeyReg2_1 == PRESSED_STATE){			//Neu dang nhan
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <getKeyInput1+0xa0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d103      	bne.n	80006e4 <getKeyInput1+0x60>
				button1_flag = 1;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <getKeyInput1+0xac>)
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
		}


	}

}
 80006e2:	e019      	b.n	8000718 <getKeyInput1+0x94>
				button1_flag = 0;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <getKeyInput1+0xac>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS1 = 200;				//khi release thi RESET nhan de 1 giay
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <getKeyInput1+0xb0>)
 80006ec:	22c8      	movs	r2, #200	; 0xc8
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	e012      	b.n	8000718 <getKeyInput1+0x94>
			if(KeyReg2_1 == PRESSED_STATE){			// Neu dang nhan de
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <getKeyInput1+0xa0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10e      	bne.n	8000718 <getKeyInput1+0x94>
				TimerforKeyPRESS1--;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <getKeyInput1+0xb0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <getKeyInput1+0xb0>)
 8000702:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS1 == 0){			// Nhan de thanh cong
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <getKeyInput1+0xb0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d105      	bne.n	8000718 <getKeyInput1+0x94>
					TimerforKeyPRESS1 = 100;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <getKeyInput1+0xb0>)
 800070e:	2264      	movs	r2, #100	; 0x64
 8000710:	601a      	str	r2, [r3, #0]
					button1_flag = 1;
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <getKeyInput1+0xac>)
 8000714:	2201      	movs	r2, #1
 8000716:	601a      	str	r2, [r3, #0]
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000004 	.word	0x20000004
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008
 8000728:	40010800 	.word	0x40010800
 800072c:	2000000c 	.word	0x2000000c
 8000730:	20000168 	.word	0x20000168
 8000734:	20000010 	.word	0x20000010

08000738 <isButton2Pressed>:
//Thoi gian cua nhan de'
int TimerforKeyPRESS2 = 200;



int isButton2Pressed(){
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <isButton2Pressed+0x20>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d104      	bne.n	800074e <isButton2Pressed+0x16>
		button2_flag = 0;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <isButton2Pressed+0x20>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
		return 1;
 800074a:	2301      	movs	r3, #1
 800074c:	e000      	b.n	8000750 <isButton2Pressed+0x18>
	}
	else return 0;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	2000016c 	.word	0x2000016c

0800075c <getKeyInput2>:
//
void getKeyInput2(){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	KeyReg0_2 = KeyReg1_2;
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <getKeyInput2+0x98>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a24      	ldr	r2, [pc, #144]	; (80007f8 <getKeyInput2+0x9c>)
 8000766:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = KeyReg2_2;
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <getKeyInput2+0xa0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <getKeyInput2+0x98>)
 800076e:	6013      	str	r3, [r2, #0]
	KeyReg2_2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000770:	2110      	movs	r1, #16
 8000772:	4823      	ldr	r0, [pc, #140]	; (8000800 <getKeyInput2+0xa4>)
 8000774:	f001 fbde 	bl	8001f34 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <getKeyInput2+0xa0>)
 800077e:	601a      	str	r2, [r3, #0]


	if (KeyReg0_2 == KeyReg1_2 && KeyReg1_2 == KeyReg2_2){
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <getKeyInput2+0x9c>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <getKeyInput2+0x98>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	429a      	cmp	r2, r3
 800078a:	d131      	bne.n	80007f0 <getKeyInput2+0x94>
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <getKeyInput2+0x98>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <getKeyInput2+0xa0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	429a      	cmp	r2, r3
 8000796:	d12b      	bne.n	80007f0 <getKeyInput2+0x94>

		if (KeyReg2_2 != KeyReg3_2){					//Nhan doi trang thai
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <getKeyInput2+0xa0>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <getKeyInput2+0xa8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d012      	beq.n	80007ca <getKeyInput2+0x6e>
			KeyReg3_2 = KeyReg2_2;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <getKeyInput2+0xa0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a16      	ldr	r2, [pc, #88]	; (8000804 <getKeyInput2+0xa8>)
 80007aa:	6013      	str	r3, [r2, #0]
			if (KeyReg2_2 == PRESSED_STATE){			//Neu dang nhan
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <getKeyInput2+0xa0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d103      	bne.n	80007bc <getKeyInput2+0x60>
				button2_flag = 1;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <getKeyInput2+0xac>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
		}


	}

}
 80007ba:	e019      	b.n	80007f0 <getKeyInput2+0x94>
				button2_flag = 0;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <getKeyInput2+0xac>)
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS2 = 100;				//khi release thi RESET nhan de 1 giay
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <getKeyInput2+0xb0>)
 80007c4:	2264      	movs	r2, #100	; 0x64
 80007c6:	601a      	str	r2, [r3, #0]
}
 80007c8:	e012      	b.n	80007f0 <getKeyInput2+0x94>
			if(KeyReg2_2 == PRESSED_STATE){			// Neu dang nhan de
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <getKeyInput2+0xa0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10e      	bne.n	80007f0 <getKeyInput2+0x94>
				TimerforKeyPRESS2--;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <getKeyInput2+0xb0>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <getKeyInput2+0xb0>)
 80007da:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS2 == 0){			// Nhan de thanh cong
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <getKeyInput2+0xb0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d105      	bne.n	80007f0 <getKeyInput2+0x94>
					TimerforKeyPRESS2 = 50;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <getKeyInput2+0xb0>)
 80007e6:	2232      	movs	r2, #50	; 0x32
 80007e8:	601a      	str	r2, [r3, #0]
					button2_flag = 1;
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <getKeyInput2+0xac>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000018 	.word	0x20000018
 80007f8:	20000014 	.word	0x20000014
 80007fc:	2000001c 	.word	0x2000001c
 8000800:	40010800 	.word	0x40010800
 8000804:	20000020 	.word	0x20000020
 8000808:	2000016c 	.word	0x2000016c
 800080c:	20000024 	.word	0x20000024

08000810 <isButton3Pressed>:
//Thoi gian cua nhan de'
int TimerforKeyPRESS3 = 200;



int isButton3Pressed(){
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <isButton3Pressed+0x20>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d104      	bne.n	8000826 <isButton3Pressed+0x16>
		button3_flag = 0;
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <isButton3Pressed+0x20>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
		return 1;
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <isButton3Pressed+0x18>
	}
	else return 0;
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000170 	.word	0x20000170

08000834 <getKeyInput3>:
//
void getKeyInput3(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	KeyReg0_3 = KeyReg1_3;
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <getKeyInput3+0x98>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a24      	ldr	r2, [pc, #144]	; (80008d0 <getKeyInput3+0x9c>)
 800083e:	6013      	str	r3, [r2, #0]
	KeyReg1_3 = KeyReg2_3;
 8000840:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <getKeyInput3+0xa0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a21      	ldr	r2, [pc, #132]	; (80008cc <getKeyInput3+0x98>)
 8000846:	6013      	str	r3, [r2, #0]
	KeyReg2_3 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000848:	2101      	movs	r1, #1
 800084a:	4823      	ldr	r0, [pc, #140]	; (80008d8 <getKeyInput3+0xa4>)
 800084c:	f001 fb72 	bl	8001f34 <HAL_GPIO_ReadPin>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <getKeyInput3+0xa0>)
 8000856:	601a      	str	r2, [r3, #0]


	if (KeyReg0_3 == KeyReg1_3 && KeyReg1_3 == KeyReg2_3){
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <getKeyInput3+0x9c>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <getKeyInput3+0x98>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	429a      	cmp	r2, r3
 8000862:	d131      	bne.n	80008c8 <getKeyInput3+0x94>
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <getKeyInput3+0x98>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <getKeyInput3+0xa0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d12b      	bne.n	80008c8 <getKeyInput3+0x94>

		if (KeyReg2_3 != KeyReg3_3){					//Nhan doi trang thai
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <getKeyInput3+0xa0>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <getKeyInput3+0xa8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d012      	beq.n	80008a2 <getKeyInput3+0x6e>
			KeyReg3_3 = KeyReg2_3;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <getKeyInput3+0xa0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a16      	ldr	r2, [pc, #88]	; (80008dc <getKeyInput3+0xa8>)
 8000882:	6013      	str	r3, [r2, #0]
			if (KeyReg2_3 == PRESSED_STATE){			//Neu dang nhan
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <getKeyInput3+0xa0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d103      	bne.n	8000894 <getKeyInput3+0x60>
				button3_flag = 1;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <getKeyInput3+0xac>)
 800088e:	2201      	movs	r2, #1
 8000890:	601a      	str	r2, [r3, #0]
		}


	}

}
 8000892:	e019      	b.n	80008c8 <getKeyInput3+0x94>
				button3_flag = 0;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <getKeyInput3+0xac>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS3 = 100;				//khi release thi RESET nhan de 1 giay
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <getKeyInput3+0xb0>)
 800089c:	2264      	movs	r2, #100	; 0x64
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	e012      	b.n	80008c8 <getKeyInput3+0x94>
			if(KeyReg2_3 == PRESSED_STATE){			// Neu dang nhan de
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <getKeyInput3+0xa0>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d10e      	bne.n	80008c8 <getKeyInput3+0x94>
				TimerforKeyPRESS3--;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <getKeyInput3+0xb0>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <getKeyInput3+0xb0>)
 80008b2:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS3 == 0){			// Nhan de thanh cong
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <getKeyInput3+0xb0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d105      	bne.n	80008c8 <getKeyInput3+0x94>
					TimerforKeyPRESS3 = 50;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <getKeyInput3+0xb0>)
 80008be:	2232      	movs	r2, #50	; 0x32
 80008c0:	601a      	str	r2, [r3, #0]
					button3_flag = 1;
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <getKeyInput3+0xac>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000002c 	.word	0x2000002c
 80008d0:	20000028 	.word	0x20000028
 80008d4:	20000030 	.word	0x20000030
 80008d8:	40010c00 	.word	0x40010c00
 80008dc:	20000034 	.word	0x20000034
 80008e0:	20000170 	.word	0x20000170
 80008e4:	20000038 	.word	0x20000038

080008e8 <isButton4Pressed>:
int KeyReg3_4 = NORMAL_STATE;

//Thoi gian cua nhan de'
int TimerforKeyPRESS4 = 200;

int isButton4Pressed(){
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
	if (button4_flag == 1){
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <isButton4Pressed+0x20>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d104      	bne.n	80008fe <isButton4Pressed+0x16>
		button4_flag = 0;
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <isButton4Pressed+0x20>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
		return 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <isButton4Pressed+0x18>
	}
	else return 0;
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20000174 	.word	0x20000174

0800090c <getKeyInput4>:
//
void getKeyInput4(){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	KeyReg0_4 = KeyReg1_4;
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <getKeyInput4+0x98>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <getKeyInput4+0x9c>)
 8000916:	6013      	str	r3, [r2, #0]
	KeyReg1_4 = KeyReg2_4;
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <getKeyInput4+0xa0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <getKeyInput4+0x98>)
 800091e:	6013      	str	r3, [r2, #0]
	//KeyReg2_4 = HAL_GPIO_ReadPin(BUTTONUSER_GPIO_Port,BUTTONUSER_Pin);
	KeyReg2_4 = HAL_GPIO_ReadPin(BUTTONUSER_GPIO_Port,BUTTONUSER_Pin);
 8000920:	2101      	movs	r1, #1
 8000922:	4823      	ldr	r0, [pc, #140]	; (80009b0 <getKeyInput4+0xa4>)
 8000924:	f001 fb06 	bl	8001f34 <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <getKeyInput4+0xa0>)
 800092e:	601a      	str	r2, [r3, #0]


	if (KeyReg0_4 == KeyReg1_4 && KeyReg1_4 == KeyReg2_4){
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <getKeyInput4+0x9c>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <getKeyInput4+0x98>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	429a      	cmp	r2, r3
 800093a:	d131      	bne.n	80009a0 <getKeyInput4+0x94>
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <getKeyInput4+0x98>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <getKeyInput4+0xa0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	429a      	cmp	r2, r3
 8000946:	d12b      	bne.n	80009a0 <getKeyInput4+0x94>

		if (KeyReg2_4 != KeyReg3_4){					//Nhan doi trang thai
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <getKeyInput4+0xa0>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <getKeyInput4+0xa8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	429a      	cmp	r2, r3
 8000952:	d012      	beq.n	800097a <getKeyInput4+0x6e>
			KeyReg3_4 = KeyReg2_4;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <getKeyInput4+0xa0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <getKeyInput4+0xa8>)
 800095a:	6013      	str	r3, [r2, #0]
			if (KeyReg2_4 == PRESSED_STATE){			//Neu dang nhan
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <getKeyInput4+0xa0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d103      	bne.n	800096c <getKeyInput4+0x60>
				button4_flag = 1;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <getKeyInput4+0xac>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
		}


	}

}
 800096a:	e019      	b.n	80009a0 <getKeyInput4+0x94>
				button4_flag = 0;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <getKeyInput4+0xac>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS4 = 100;				//khi release thi RESET nhan de 1 giay
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <getKeyInput4+0xb0>)
 8000974:	2264      	movs	r2, #100	; 0x64
 8000976:	601a      	str	r2, [r3, #0]
}
 8000978:	e012      	b.n	80009a0 <getKeyInput4+0x94>
			if(KeyReg2_4 == PRESSED_STATE){			// Neu dang nhan de
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <getKeyInput4+0xa0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d10e      	bne.n	80009a0 <getKeyInput4+0x94>
				TimerforKeyPRESS4--;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <getKeyInput4+0xb0>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3b01      	subs	r3, #1
 8000988:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <getKeyInput4+0xb0>)
 800098a:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS4 == 0){			// Nhan de thanh cong
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <getKeyInput4+0xb0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d105      	bne.n	80009a0 <getKeyInput4+0x94>
					TimerforKeyPRESS4 = 50;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <getKeyInput4+0xb0>)
 8000996:	2232      	movs	r2, #50	; 0x32
 8000998:	601a      	str	r2, [r3, #0]
					button4_flag = 1;
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <getKeyInput4+0xac>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000040 	.word	0x20000040
 80009a8:	2000003c 	.word	0x2000003c
 80009ac:	20000044 	.word	0x20000044
 80009b0:	40010800 	.word	0x40010800
 80009b4:	20000048 	.word	0x20000048
 80009b8:	20000174 	.word	0x20000174
 80009bc:	2000004c 	.word	0x2000004c

080009c0 <printstatus>:


int status_man = INIT;
int temp_timer = 0;

void printstatus(){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b09a      	sub	sp, #104	; 0x68
 80009c4:	af00      	add	r7, sp, #0

	switch(status_man){
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <printstatus+0xa4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	3b65      	subs	r3, #101	; 0x65
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d843      	bhi.n	8000a58 <printstatus+0x98>
 80009d0:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <printstatus+0x18>)
 80009d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d6:	bf00      	nop
 80009d8:	080009e9 	.word	0x080009e9
 80009dc:	08000a05 	.word	0x08000a05
 80009e0:	08000a3d 	.word	0x08000a3d
 80009e4:	08000a21 	.word	0x08000a21
	case INIT:
	{
		char str2[100];
		HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!AUTO MODE----#\r\n"), 1000);
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	491f      	ldr	r1, [pc, #124]	; (8000a68 <printstatus+0xa8>)
 80009ec:	4618      	mov	r0, r3
 80009ee:	f003 fb75 	bl	80040dc <siprintf>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	1d39      	adds	r1, r7, #4
 80009f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fc:	481b      	ldr	r0, [pc, #108]	; (8000a6c <printstatus+0xac>)
 80009fe:	f002 feb0 	bl	8003762 <HAL_UART_Transmit>
	}
		break;
 8000a02:	e02a      	b.n	8000a5a <printstatus+0x9a>

	case MAN_RED:
	{
		char str2[100];
		HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!RED MODE----#\r\n"), 1000);
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	491a      	ldr	r1, [pc, #104]	; (8000a70 <printstatus+0xb0>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f003 fb67 	bl	80040dc <siprintf>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	1d39      	adds	r1, r7, #4
 8000a14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a18:	4814      	ldr	r0, [pc, #80]	; (8000a6c <printstatus+0xac>)
 8000a1a:	f002 fea2 	bl	8003762 <HAL_UART_Transmit>
	}
		break;
 8000a1e:	e01c      	b.n	8000a5a <printstatus+0x9a>

	case MAN_YELLOW:
	{
		char str2[100];
		HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!YELLOW MODE----#\r\n"), 1000);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4914      	ldr	r1, [pc, #80]	; (8000a74 <printstatus+0xb4>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 fb59 	bl	80040dc <siprintf>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	1d39      	adds	r1, r7, #4
 8000a30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <printstatus+0xac>)
 8000a36:	f002 fe94 	bl	8003762 <HAL_UART_Transmit>
	}
		break;
 8000a3a:	e00e      	b.n	8000a5a <printstatus+0x9a>

	case MAN_GREEN:
	{
		char str2[100];
		HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!GREEN MODE----#\r\n"), 1000);
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	490e      	ldr	r1, [pc, #56]	; (8000a78 <printstatus+0xb8>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 fb4b 	bl	80040dc <siprintf>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	1d39      	adds	r1, r7, #4
 8000a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <printstatus+0xac>)
 8000a52:	f002 fe86 	bl	8003762 <HAL_UART_Transmit>
	}
		break;
 8000a56:	e000      	b.n	8000a5a <printstatus+0x9a>

	default:
		break;
 8000a58:	bf00      	nop
	}


}
 8000a5a:	bf00      	nop
 8000a5c:	3768      	adds	r7, #104	; 0x68
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000050 	.word	0x20000050
 8000a68:	080049e8 	.word	0x080049e8
 8000a6c:	2000017c 	.word	0x2000017c
 8000a70:	080049fc 	.word	0x080049fc
 8000a74:	08004a10 	.word	0x08004a10
 8000a78:	08004a24 	.word	0x08004a24

08000a7c <fsm_manual_run>:


void fsm_manual_run(){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09a      	sub	sp, #104	; 0x68
 8000a80:	af00      	add	r7, sp, #0

	switch(status_man){
 8000a82:	4b92      	ldr	r3, [pc, #584]	; (8000ccc <fsm_manual_run+0x250>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3b65      	subs	r3, #101	; 0x65
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	f200 8111 	bhi.w	8000cb0 <fsm_manual_run+0x234>
 8000a8e:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <fsm_manual_run+0x18>)
 8000a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a94:	08000aa5 	.word	0x08000aa5
 8000a98:	08000afb 	.word	0x08000afb
 8000a9c:	08000c25 	.word	0x08000c25
 8000aa0:	08000b99 	.word	0x08000b99

	case INIT:
		if (isButton1Pressed()){
 8000aa4:	f7ff fddc 	bl	8000660 <isButton1Pressed>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d007      	beq.n	8000abe <fsm_manual_run+0x42>
			status_man = MAN_RED;
 8000aae:	4b87      	ldr	r3, [pc, #540]	; (8000ccc <fsm_manual_run+0x250>)
 8000ab0:	2266      	movs	r2, #102	; 0x66
 8000ab2:	601a      	str	r2, [r3, #0]
			temp_timer = 0;
 8000ab4:	4b86      	ldr	r3, [pc, #536]	; (8000cd0 <fsm_manual_run+0x254>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
			printstatus();
 8000aba:	f7ff ff81 	bl	80009c0 <printstatus>
		}
		if (isButton3Pressed()){
 8000abe:	f7ff fea7 	bl	8000810 <isButton3Pressed>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f000 80f5 	beq.w	8000cb4 <fsm_manual_run+0x238>
			timer_red = RED_TIME;
 8000aca:	4b82      	ldr	r3, [pc, #520]	; (8000cd4 <fsm_manual_run+0x258>)
 8000acc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ad0:	601a      	str	r2, [r3, #0]
			timer_green = GREEN_TIME;
 8000ad2:	4b81      	ldr	r3, [pc, #516]	; (8000cd8 <fsm_manual_run+0x25c>)
 8000ad4:	f241 7270 	movw	r2, #6000	; 0x1770
 8000ad8:	601a      	str	r2, [r3, #0]
			timer_yellow = YELLOW_TIME;
 8000ada:	4b80      	ldr	r3, [pc, #512]	; (8000cdc <fsm_manual_run+0x260>)
 8000adc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ae0:	601a      	str	r2, [r3, #0]
			status_light1 = INIT1;
 8000ae2:	4b7f      	ldr	r3, [pc, #508]	; (8000ce0 <fsm_manual_run+0x264>)
 8000ae4:	2213      	movs	r2, #19
 8000ae6:	601a      	str	r2, [r3, #0]
			status_light2 = INIT2;
 8000ae8:	4b7e      	ldr	r3, [pc, #504]	; (8000ce4 <fsm_manual_run+0x268>)
 8000aea:	2217      	movs	r2, #23
 8000aec:	601a      	str	r2, [r3, #0]
			status_man = INIT;
 8000aee:	4b77      	ldr	r3, [pc, #476]	; (8000ccc <fsm_manual_run+0x250>)
 8000af0:	2265      	movs	r2, #101	; 0x65
 8000af2:	601a      	str	r2, [r3, #0]
			printstatus();
 8000af4:	f7ff ff64 	bl	80009c0 <printstatus>
		}
		break;
 8000af8:	e0dc      	b.n	8000cb4 <fsm_manual_run+0x238>



	case MAN_RED:

		if (isButton1Pressed()){
 8000afa:	f7ff fdb1 	bl	8000660 <isButton1Pressed>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d007      	beq.n	8000b14 <fsm_manual_run+0x98>
			status_man = MAN_YELLOW;
 8000b04:	4b71      	ldr	r3, [pc, #452]	; (8000ccc <fsm_manual_run+0x250>)
 8000b06:	2268      	movs	r2, #104	; 0x68
 8000b08:	601a      	str	r2, [r3, #0]
			temp_timer = 0;
 8000b0a:	4b71      	ldr	r3, [pc, #452]	; (8000cd0 <fsm_manual_run+0x254>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
			printstatus();
 8000b10:	f7ff ff56 	bl	80009c0 <printstatus>
		}
		if (isButton2Pressed()){
 8000b14:	f7ff fe10 	bl	8000738 <isButton2Pressed>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d014      	beq.n	8000b48 <fsm_manual_run+0xcc>
			temp_timer = temp_timer + 1000;
 8000b1e:	4b6c      	ldr	r3, [pc, #432]	; (8000cd0 <fsm_manual_run+0x254>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b26:	4a6a      	ldr	r2, [pc, #424]	; (8000cd0 <fsm_manual_run+0x254>)
 8000b28:	6013      	str	r3, [r2, #0]
			char str[100];
			HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!INC: %d#\r\n",temp_timer), 1000);
 8000b2a:	4b69      	ldr	r3, [pc, #420]	; (8000cd0 <fsm_manual_run+0x254>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	496d      	ldr	r1, [pc, #436]	; (8000ce8 <fsm_manual_run+0x26c>)
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fad2 	bl	80040dc <siprintf>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	1d39      	adds	r1, r7, #4
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	486a      	ldr	r0, [pc, #424]	; (8000cec <fsm_manual_run+0x270>)
 8000b44:	f002 fe0d 	bl	8003762 <HAL_UART_Transmit>
		}
		if (isButton3Pressed()){
 8000b48:	f7ff fe62 	bl	8000810 <isButton3Pressed>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 80b2 	beq.w	8000cb8 <fsm_manual_run+0x23c>
			timer_red = temp_timer;
 8000b54:	4b5e      	ldr	r3, [pc, #376]	; (8000cd0 <fsm_manual_run+0x254>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a5e      	ldr	r2, [pc, #376]	; (8000cd4 <fsm_manual_run+0x258>)
 8000b5a:	6013      	str	r3, [r2, #0]
			if (timer_red < timer_green + timer_yellow) timer_red = timer_green + timer_yellow;
 8000b5c:	4b5e      	ldr	r3, [pc, #376]	; (8000cd8 <fsm_manual_run+0x25c>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b5e      	ldr	r3, [pc, #376]	; (8000cdc <fsm_manual_run+0x260>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	441a      	add	r2, r3
 8000b66:	4b5b      	ldr	r3, [pc, #364]	; (8000cd4 <fsm_manual_run+0x258>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dd07      	ble.n	8000b7e <fsm_manual_run+0x102>
 8000b6e:	4b5a      	ldr	r3, [pc, #360]	; (8000cd8 <fsm_manual_run+0x25c>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4b5a      	ldr	r3, [pc, #360]	; (8000cdc <fsm_manual_run+0x260>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a56      	ldr	r2, [pc, #344]	; (8000cd4 <fsm_manual_run+0x258>)
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	e006      	b.n	8000b8c <fsm_manual_run+0x110>
			else timer_green = timer_red - timer_yellow;
 8000b7e:	4b55      	ldr	r3, [pc, #340]	; (8000cd4 <fsm_manual_run+0x258>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4b56      	ldr	r3, [pc, #344]	; (8000cdc <fsm_manual_run+0x260>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	4a53      	ldr	r2, [pc, #332]	; (8000cd8 <fsm_manual_run+0x25c>)
 8000b8a:	6013      	str	r3, [r2, #0]
			status_man = INIT;
 8000b8c:	4b4f      	ldr	r3, [pc, #316]	; (8000ccc <fsm_manual_run+0x250>)
 8000b8e:	2265      	movs	r2, #101	; 0x65
 8000b90:	601a      	str	r2, [r3, #0]
			printstatus();
 8000b92:	f7ff ff15 	bl	80009c0 <printstatus>
		}
		break;
 8000b96:	e08f      	b.n	8000cb8 <fsm_manual_run+0x23c>


	case MAN_YELLOW:
		if (isButton1Pressed()){
 8000b98:	f7ff fd62 	bl	8000660 <isButton1Pressed>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d007      	beq.n	8000bb2 <fsm_manual_run+0x136>
			temp_timer = 0;
 8000ba2:	4b4b      	ldr	r3, [pc, #300]	; (8000cd0 <fsm_manual_run+0x254>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
			status_man = MAN_GREEN;
 8000ba8:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <fsm_manual_run+0x250>)
 8000baa:	2267      	movs	r2, #103	; 0x67
 8000bac:	601a      	str	r2, [r3, #0]
			printstatus();
 8000bae:	f7ff ff07 	bl	80009c0 <printstatus>
		}
		if (isButton2Pressed()){
 8000bb2:	f7ff fdc1 	bl	8000738 <isButton2Pressed>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d014      	beq.n	8000be6 <fsm_manual_run+0x16a>
			temp_timer = temp_timer + 1000;
 8000bbc:	4b44      	ldr	r3, [pc, #272]	; (8000cd0 <fsm_manual_run+0x254>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000bc4:	4a42      	ldr	r2, [pc, #264]	; (8000cd0 <fsm_manual_run+0x254>)
 8000bc6:	6013      	str	r3, [r2, #0]
			char str[100];
			HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!INC: %d#\r\n",temp_timer), 1000);
 8000bc8:	4b41      	ldr	r3, [pc, #260]	; (8000cd0 <fsm_manual_run+0x254>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4946      	ldr	r1, [pc, #280]	; (8000ce8 <fsm_manual_run+0x26c>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 fa83 	bl	80040dc <siprintf>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	1d39      	adds	r1, r7, #4
 8000bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be0:	4842      	ldr	r0, [pc, #264]	; (8000cec <fsm_manual_run+0x270>)
 8000be2:	f002 fdbe 	bl	8003762 <HAL_UART_Transmit>
		}
		if (isButton3Pressed()){
 8000be6:	f7ff fe13 	bl	8000810 <isButton3Pressed>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d065      	beq.n	8000cbc <fsm_manual_run+0x240>
			timer_yellow = temp_timer;
 8000bf0:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <fsm_manual_run+0x254>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a39      	ldr	r2, [pc, #228]	; (8000cdc <fsm_manual_run+0x260>)
 8000bf6:	6013      	str	r3, [r2, #0]
			if (timer_red != timer_green + timer_yellow) timer_red = timer_green + timer_yellow;
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <fsm_manual_run+0x25c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <fsm_manual_run+0x260>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	441a      	add	r2, r3
 8000c02:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <fsm_manual_run+0x258>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d006      	beq.n	8000c18 <fsm_manual_run+0x19c>
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <fsm_manual_run+0x25c>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <fsm_manual_run+0x260>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a2f      	ldr	r2, [pc, #188]	; (8000cd4 <fsm_manual_run+0x258>)
 8000c16:	6013      	str	r3, [r2, #0]
			status_man = INIT;
 8000c18:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <fsm_manual_run+0x250>)
 8000c1a:	2265      	movs	r2, #101	; 0x65
 8000c1c:	601a      	str	r2, [r3, #0]
			printstatus();
 8000c1e:	f7ff fecf 	bl	80009c0 <printstatus>
		}
		break;
 8000c22:	e04b      	b.n	8000cbc <fsm_manual_run+0x240>


	case MAN_GREEN:

		if (isButton1Pressed()){
 8000c24:	f7ff fd1c 	bl	8000660 <isButton1Pressed>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d007      	beq.n	8000c3e <fsm_manual_run+0x1c2>
			temp_timer = 0;
 8000c2e:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <fsm_manual_run+0x254>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
			status_man = INIT;
 8000c34:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <fsm_manual_run+0x250>)
 8000c36:	2265      	movs	r2, #101	; 0x65
 8000c38:	601a      	str	r2, [r3, #0]
			printstatus();
 8000c3a:	f7ff fec1 	bl	80009c0 <printstatus>
		}
		if (isButton2Pressed()){
 8000c3e:	f7ff fd7b 	bl	8000738 <isButton2Pressed>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d014      	beq.n	8000c72 <fsm_manual_run+0x1f6>
			temp_timer = temp_timer + 1000;
 8000c48:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <fsm_manual_run+0x254>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000c50:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <fsm_manual_run+0x254>)
 8000c52:	6013      	str	r3, [r2, #0]
			char str[100];
			HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!INC: %d#\r\n",temp_timer), 1000);
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <fsm_manual_run+0x254>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4923      	ldr	r1, [pc, #140]	; (8000ce8 <fsm_manual_run+0x26c>)
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 fa3d 	bl	80040dc <siprintf>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	1d39      	adds	r1, r7, #4
 8000c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6c:	481f      	ldr	r0, [pc, #124]	; (8000cec <fsm_manual_run+0x270>)
 8000c6e:	f002 fd78 	bl	8003762 <HAL_UART_Transmit>
		}
		if (isButton3Pressed()){
 8000c72:	f7ff fdcd 	bl	8000810 <isButton3Pressed>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d021      	beq.n	8000cc0 <fsm_manual_run+0x244>
			timer_green = temp_timer;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <fsm_manual_run+0x254>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <fsm_manual_run+0x25c>)
 8000c82:	6013      	str	r3, [r2, #0]
			if (timer_red != timer_green + timer_yellow) timer_red = timer_green + timer_yellow;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <fsm_manual_run+0x25c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <fsm_manual_run+0x260>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	441a      	add	r2, r3
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <fsm_manual_run+0x258>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d006      	beq.n	8000ca4 <fsm_manual_run+0x228>
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <fsm_manual_run+0x25c>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <fsm_manual_run+0x260>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <fsm_manual_run+0x258>)
 8000ca2:	6013      	str	r3, [r2, #0]
			status_man = INIT;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <fsm_manual_run+0x250>)
 8000ca6:	2265      	movs	r2, #101	; 0x65
 8000ca8:	601a      	str	r2, [r3, #0]
			printstatus();
 8000caa:	f7ff fe89 	bl	80009c0 <printstatus>
		}
		break;
 8000cae:	e007      	b.n	8000cc0 <fsm_manual_run+0x244>

	default:
		break;
 8000cb0:	bf00      	nop
 8000cb2:	e006      	b.n	8000cc2 <fsm_manual_run+0x246>
		break;
 8000cb4:	bf00      	nop
 8000cb6:	e004      	b.n	8000cc2 <fsm_manual_run+0x246>
		break;
 8000cb8:	bf00      	nop
 8000cba:	e002      	b.n	8000cc2 <fsm_manual_run+0x246>
		break;
 8000cbc:	bf00      	nop
 8000cbe:	e000      	b.n	8000cc2 <fsm_manual_run+0x246>
		break;
 8000cc0:	bf00      	nop
	}

}
 8000cc2:	bf00      	nop
 8000cc4:	3768      	adds	r7, #104	; 0x68
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000050 	.word	0x20000050
 8000cd0:	20000178 	.word	0x20000178
 8000cd4:	20000054 	.word	0x20000054
 8000cd8:	20000058 	.word	0x20000058
 8000cdc:	2000005c 	.word	0x2000005c
 8000ce0:	20000064 	.word	0x20000064
 8000ce4:	20000068 	.word	0x20000068
 8000ce8:	08004a38 	.word	0x08004a38
 8000cec:	2000017c 	.word	0x2000017c

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b09e      	sub	sp, #120	; 0x78
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f000 fd55 	bl	80017a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f8e1 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f000 fa0d 	bl	800111c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d02:	f000 f9e1 	bl	80010c8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d06:	f000 f91d 	bl	8000f44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d0a:	f000 f967 	bl	8000fdc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 8000d0e:	485d      	ldr	r0, [pc, #372]	; (8000e84 <main+0x194>)
 8000d10:	f001 fdcc 	bl	80028ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d14:	2100      	movs	r1, #0
 8000d16:	485c      	ldr	r0, [pc, #368]	; (8000e88 <main+0x198>)
 8000d18:	f001 fe72 	bl	8002a00 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Set up for Pedestrian
  int userButton = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	677b      	str	r3, [r7, #116]	; 0x74
  LED3_OFF();
 8000d20:	f7ff fafe 	bl	8000320 <LED3_OFF>

  //Set up for start
  setTimer1(250);
 8000d24:	20fa      	movs	r0, #250	; 0xfa
 8000d26:	f7ff fb7b 	bl	8000420 <setTimer1>
  int one_sec= 3;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	673b      	str	r3, [r7, #112]	; 0x70
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //All about FSM
	  fsm_manual_run();		//manual fsm
 8000d2e:	f7ff fea5 	bl	8000a7c <fsm_manual_run>
	  light_control_1();	//fsm for traffic light 1
 8000d32:	f000 fc1f 	bl	8001574 <light_control_1>
	  light_control_2();	//fsm for traffic light 2
 8000d36:	f000 fc93 	bl	8001660 <light_control_2>


	  if (isButton4Pressed()){		// Pedestrian pressed
 8000d3a:	f7ff fdd5 	bl	80008e8 <isButton4Pressed>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d005      	beq.n	8000d50 <main+0x60>
		  userButton = 1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	677b      	str	r3, [r7, #116]	; 0x74
		  setTimer5(20000);
 8000d48:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000d4c:	f7ff fbbc 	bl	80004c8 <setTimer5>
	  }
	  if (timer5_flag == 1){		// Time out
 8000d50:	4b4e      	ldr	r3, [pc, #312]	; (8000e8c <main+0x19c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d103      	bne.n	8000d60 <main+0x70>
		  userButton = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	677b      	str	r3, [r7, #116]	; 0x74
		  LED3_OFF();
 8000d5c:	f7ff fae0 	bl	8000320 <LED3_OFF>
	  }



	  if (timer1_flag == 1){		// One duration blinky 250ms
 8000d60:	4b4b      	ldr	r3, [pc, #300]	; (8000e90 <main+0x1a0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d1e2      	bne.n	8000d2e <main+0x3e>
		  setTimer1(250);
 8000d68:	20fa      	movs	r0, #250	; 0xfa
 8000d6a:	f7ff fb59 	bl	8000420 <setTimer1>

		  one_sec++;				// Count down, print to terminal
 8000d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d70:	3301      	adds	r3, #1
 8000d72:	673b      	str	r3, [r7, #112]	; 0x70
		  if (one_sec == 4){
 8000d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d118      	bne.n	8000dac <main+0xbc>
			  one_sec = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	673b      	str	r3, [r7, #112]	; 0x70
			  int time = timer3_counter/100;
 8000d7e:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <main+0x1a4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a45      	ldr	r2, [pc, #276]	; (8000e98 <main+0x1a8>)
 8000d84:	fb82 1203 	smull	r1, r2, r2, r3
 8000d88:	1152      	asrs	r2, r2, #5
 8000d8a:	17db      	asrs	r3, r3, #31
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
			  char str[100];
			  HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!7SEG: %d#\r\n",time), 1000);
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000d94:	4941      	ldr	r1, [pc, #260]	; (8000e9c <main+0x1ac>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 f9a0 	bl	80040dc <siprintf>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	1d39      	adds	r1, r7, #4
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	483e      	ldr	r0, [pc, #248]	; (8000ea0 <main+0x1b0>)
 8000da8:	f002 fcdb 	bl	8003762 <HAL_UART_Transmit>
		  }

	  		  //Cum den 1
		  if (RED1_flag){
 8000dac:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <main+0x1b4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <main+0xca>
			  RED1_TOGGLE();
 8000db4:	f7ff f9de 	bl	8000174 <RED1_TOGGLE>
 8000db8:	e00c      	b.n	8000dd4 <main+0xe4>
		  }
		  else if(YELLOW1_flag){
 8000dba:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <main+0x1b8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <main+0xd8>
			  YELLOW1_TOGGLE();
 8000dc2:	f7ff f9f9 	bl	80001b8 <YELLOW1_TOGGLE>
 8000dc6:	e005      	b.n	8000dd4 <main+0xe4>
		  }
		  else if(GREEN1_flag){
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <main+0x1bc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <main+0xe4>
	  		  GREEN1_TOGGLE();
 8000dd0:	f7ff fa14 	bl	80001fc <GREEN1_TOGGLE>
	  	  }

	  		  //Cum den 2
		  if(RED2_flag){
 8000dd4:	4b36      	ldr	r3, [pc, #216]	; (8000eb0 <main+0x1c0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00b      	beq.n	8000df4 <main+0x104>
	  		  RED2_TOGGLE();
 8000ddc:	f7ff fa40 	bl	8000260 <RED2_TOGGLE>
	  		  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <main+0x198>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2200      	movs	r2, #0
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34
	 		  if (userButton) RED3_TOGGLE();
 8000de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d09f      	beq.n	8000d2e <main+0x3e>
 8000dee:	f7ff faab 	bl	8000348 <RED3_TOGGLE>
 8000df2:	e79c      	b.n	8000d2e <main+0x3e>
		  }
		  else if(YELLOW2_flag){
 8000df4:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <main+0x1c4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d034      	beq.n	8000e66 <main+0x176>
			  YELLOW2_TOGGLE();
 8000dfc:	f7ff fa50 	bl	80002a0 <YELLOW2_TOGGLE>
			  if (userButton) {
 8000e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d093      	beq.n	8000d2e <main+0x3e>
				  YELLOW3_TOGGLE();
 8000e06:	f7ff fac3 	bl	8000390 <YELLOW3_TOGGLE>
				  int feq = 100 - 100*(10*timer3_counter/timer_yellow);
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <main+0x1a4>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <main+0x1c8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e20:	f1c3 0301 	rsb	r3, r3, #1
 8000e24:	2264      	movs	r2, #100	; 0x64
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	66bb      	str	r3, [r7, #104]	; 0x68
				  __HAL_TIM_SET_AUTORELOAD(&htim3,feq*5/2);
 8000e2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	0fda      	lsrs	r2, r3, #31
 8000e36:	4413      	add	r3, r2
 8000e38:	105b      	asrs	r3, r3, #1
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <main+0x198>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	0fda      	lsrs	r2, r3, #31
 8000e4c:	4413      	add	r3, r2
 8000e4e:	105b      	asrs	r3, r3, #1
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <main+0x198>)
 8000e54:	60da      	str	r2, [r3, #12]
				  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,feq);
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <main+0x198>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_Delay(100);
 8000e5e:	2064      	movs	r0, #100	; 0x64
 8000e60:	f000 fd02 	bl	8001868 <HAL_Delay>
 8000e64:	e763      	b.n	8000d2e <main+0x3e>
			  }
		  }
	  	  else if(GREEN2_flag){
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <main+0x1cc>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f43f af5f 	beq.w	8000d2e <main+0x3e>
	  		  GREEN2_TOGGLE();
 8000e70:	f7ff fa36 	bl	80002e0 <GREEN2_TOGGLE>
	  		  if (userButton) GREEN3_TOGGLE();
 8000e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f43f af59 	beq.w	8000d2e <main+0x3e>
 8000e7c:	f7ff faac 	bl	80003d8 <GREEN3_TOGGLE>
	  fsm_manual_run();		//manual fsm
 8000e80:	e755      	b.n	8000d2e <main+0x3e>
 8000e82:	bf00      	nop
 8000e84:	200001c0 	.word	0x200001c0
 8000e88:	20000208 	.word	0x20000208
 8000e8c:	20000150 	.word	0x20000150
 8000e90:	20000140 	.word	0x20000140
 8000e94:	20000120 	.word	0x20000120
 8000e98:	51eb851f 	.word	0x51eb851f
 8000e9c:	08004a44 	.word	0x08004a44
 8000ea0:	2000017c 	.word	0x2000017c
 8000ea4:	20000254 	.word	0x20000254
 8000ea8:	2000025c 	.word	0x2000025c
 8000eac:	20000264 	.word	0x20000264
 8000eb0:	20000258 	.word	0x20000258
 8000eb4:	20000260 	.word	0x20000260
 8000eb8:	2000005c 	.word	0x2000005c
 8000ebc:	20000268 	.word	0x20000268

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b090      	sub	sp, #64	; 0x40
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	2228      	movs	r2, #40	; 0x28
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 f8fc 	bl	80040cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eea:	2310      	movs	r3, #16
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ef6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efc:	f107 0318 	add.w	r3, r7, #24
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 f869 	bl	8001fd8 <HAL_RCC_OscConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f0c:	f000 f9b8 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f10:	230f      	movs	r3, #15
 8000f12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f14:	2302      	movs	r3, #2
 8000f16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fad6 	bl	80024dc <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f36:	f000 f9a3 	bl	8001280 <Error_Handler>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3740      	adds	r7, #64	; 0x40
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f6a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f78:	224f      	movs	r2, #79	; 0x4f
 8000f7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f88:	4813      	ldr	r0, [pc, #76]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f8a:	f001 fc3f 	bl	800280c <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f94:	f000 f974 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000fa6:	f001 ff93 	bl	8002ed0 <HAL_TIM_ConfigClockSource>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fb0:	f000 f966 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000fc2:	f002 fb11 	bl	80035e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fcc:	f000 f958 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200001c0 	.word	0x200001c0

08000fdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08e      	sub	sp, #56	; 0x38
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
 8001008:	615a      	str	r2, [r3, #20]
 800100a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <MX_TIM3_Init+0xe4>)
 800100e:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <MX_TIM3_Init+0xe8>)
 8001010:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001012:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <MX_TIM3_Init+0xe4>)
 8001014:	223f      	movs	r2, #63	; 0x3f
 8001016:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <MX_TIM3_Init+0xe4>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <MX_TIM3_Init+0xe4>)
 8001020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001024:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <MX_TIM3_Init+0xe4>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <MX_TIM3_Init+0xe4>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001032:	4823      	ldr	r0, [pc, #140]	; (80010c0 <MX_TIM3_Init+0xe4>)
 8001034:	f001 fbea 	bl	800280c <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800103e:	f000 f91f 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001048:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104c:	4619      	mov	r1, r3
 800104e:	481c      	ldr	r0, [pc, #112]	; (80010c0 <MX_TIM3_Init+0xe4>)
 8001050:	f001 ff3e 	bl	8002ed0 <HAL_TIM_ConfigClockSource>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800105a:	f000 f911 	bl	8001280 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800105e:	4818      	ldr	r0, [pc, #96]	; (80010c0 <MX_TIM3_Init+0xe4>)
 8001060:	f001 fc76 	bl	8002950 <HAL_TIM_PWM_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800106a:	f000 f909 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	4619      	mov	r1, r3
 800107c:	4810      	ldr	r0, [pc, #64]	; (80010c0 <MX_TIM3_Init+0xe4>)
 800107e:	f002 fab3 	bl	80035e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001088:	f000 f8fa 	bl	8001280 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800108c:	2360      	movs	r3, #96	; 0x60
 800108e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <MX_TIM3_Init+0xe4>)
 80010a4:	f001 fe56 	bl	8002d54 <HAL_TIM_PWM_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010ae:	f000 f8e7 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <MX_TIM3_Init+0xe4>)
 80010b4:	f000 f95c 	bl	8001370 <HAL_TIM_MspPostInit>

}
 80010b8:	bf00      	nop
 80010ba:	3738      	adds	r7, #56	; 0x38
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000208 	.word	0x20000208
 80010c4:	40000400 	.word	0x40000400

080010c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_USART2_UART_Init+0x4c>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <MX_USART2_UART_Init+0x50>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <MX_USART2_UART_Init+0x4c>)
 80010d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_USART2_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_USART2_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_USART2_UART_Init+0x4c>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_USART2_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_USART2_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_USART2_UART_Init+0x4c>)
 8001100:	f002 fae2 	bl	80036c8 <HAL_UART_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800110a:	f000 f8b9 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000017c 	.word	0x2000017c
 8001118:	40004400 	.word	0x40004400

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001130:	4b45      	ldr	r3, [pc, #276]	; (8001248 <MX_GPIO_Init+0x12c>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a44      	ldr	r2, [pc, #272]	; (8001248 <MX_GPIO_Init+0x12c>)
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b42      	ldr	r3, [pc, #264]	; (8001248 <MX_GPIO_Init+0x12c>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001148:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <MX_GPIO_Init+0x12c>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a3e      	ldr	r2, [pc, #248]	; (8001248 <MX_GPIO_Init+0x12c>)
 800114e:	f043 0320 	orr.w	r3, r3, #32
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b3c      	ldr	r3, [pc, #240]	; (8001248 <MX_GPIO_Init+0x12c>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0320 	and.w	r3, r3, #32
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b39      	ldr	r3, [pc, #228]	; (8001248 <MX_GPIO_Init+0x12c>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a38      	ldr	r2, [pc, #224]	; (8001248 <MX_GPIO_Init+0x12c>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b36      	ldr	r3, [pc, #216]	; (8001248 <MX_GPIO_Init+0x12c>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b33      	ldr	r3, [pc, #204]	; (8001248 <MX_GPIO_Init+0x12c>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a32      	ldr	r2, [pc, #200]	; (8001248 <MX_GPIO_Init+0x12c>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <MX_GPIO_Init+0x12c>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED3B_Pin|LED1A_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8001196:	482d      	ldr	r0, [pc, #180]	; (800124c <MX_GPIO_Init+0x130>)
 8001198:	f000 fee3 	bl	8001f62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED1_Pin|LED3A_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin
 800119c:	2200      	movs	r2, #0
 800119e:	f64f 71bc 	movw	r1, #65468	; 0xffbc
 80011a2:	482b      	ldr	r0, [pc, #172]	; (8001250 <MX_GPIO_Init+0x134>)
 80011a4:	f000 fedd 	bl	8001f62 <HAL_GPIO_WritePin>
                          |LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|LED1B_Pin
                          |LED2B_Pin|LED2A_Pin|LED_RED3_Pin|LED_YELLOW3_Pin
                          |LED_GREEN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <MX_GPIO_Init+0x138>)
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4619      	mov	r1, r3
 80011bc:	4826      	ldr	r0, [pc, #152]	; (8001258 <MX_GPIO_Init+0x13c>)
 80011be:	f000 fd35 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTONUSER_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTONUSER_Pin|BUTTON1_Pin|BUTTON2_Pin;
 80011c2:	2313      	movs	r3, #19
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	481d      	ldr	r0, [pc, #116]	; (800124c <MX_GPIO_Init+0x130>)
 80011d6:	f000 fd29 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED3B_Pin LED1A_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED3B_Pin|LED1A_Pin;
 80011da:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4816      	ldr	r0, [pc, #88]	; (800124c <MX_GPIO_Init+0x130>)
 80011f4:	f000 fd1a 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 80011f8:	2301      	movs	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4619      	mov	r1, r3
 800120a:	4811      	ldr	r0, [pc, #68]	; (8001250 <MX_GPIO_Init+0x134>)
 800120c:	f000 fd0e 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED3A_Pin LED_YELLOW1_Pin LED_GREEN1_Pin
                           LED_RED2_Pin LED_YELLOW2_Pin LED_GREEN2_Pin LED1B_Pin
                           LED2B_Pin LED2A_Pin LED_RED3_Pin LED_YELLOW3_Pin
                           LED_GREEN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED3A_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin
 8001210:	f64f 73bc 	movw	r3, #65468	; 0xffbc
 8001214:	613b      	str	r3, [r7, #16]
                          |LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|LED1B_Pin
                          |LED2B_Pin|LED2A_Pin|LED_RED3_Pin|LED_YELLOW3_Pin
                          |LED_GREEN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2302      	movs	r3, #2
 8001220:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	4619      	mov	r1, r3
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <MX_GPIO_Init+0x134>)
 800122a:	f000 fcff 	bl	8001c2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2028      	movs	r0, #40	; 0x28
 8001234:	f000 fc13 	bl	8001a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001238:	2028      	movs	r0, #40	; 0x28
 800123a:	f000 fc2c 	bl	8001a96 <HAL_NVIC_EnableIRQ>

}
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	10110000 	.word	0x10110000
 8001258:	40011000 	.word	0x40011000

0800125c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	timerRun();
 8001264:	f7ff f94c 	bl	8000500 <timerRun>
	getKeyInput1();
 8001268:	f7ff fa0c 	bl	8000684 <getKeyInput1>
	getKeyInput2();
 800126c:	f7ff fa76 	bl	800075c <getKeyInput2>
	getKeyInput3();
 8001270:	f7ff fae0 	bl	8000834 <getKeyInput3>
	getKeyInput4();
 8001274:	f7ff fb4a 	bl	800090c <getKeyInput4>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	e7fe      	b.n	8001288 <Error_Handler+0x8>
	...

0800128c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_MspInit+0x5c>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <HAL_MspInit+0x5c>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6193      	str	r3, [r2, #24]
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_MspInit+0x5c>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_MspInit+0x5c>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_MspInit+0x5c>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_MspInit+0x5c>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_MspInit+0x60>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_MspInit+0x60>)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000

080012f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001300:	d114      	bne.n	800132c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_TIM_Base_MspInit+0x78>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <HAL_TIM_Base_MspInit+0x78>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_TIM_Base_MspInit+0x78>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	201c      	movs	r0, #28
 8001320:	f000 fb9d 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001324:	201c      	movs	r0, #28
 8001326:	f000 fbb6 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800132a:	e018      	b.n	800135e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_TIM_Base_MspInit+0x7c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d113      	bne.n	800135e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_TIM_Base_MspInit+0x78>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_TIM_Base_MspInit+0x78>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_TIM_Base_MspInit+0x78>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	201d      	movs	r0, #29
 8001354:	f000 fb83 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001358:	201d      	movs	r0, #29
 800135a:	f000 fb9c 	bl	8001a96 <HAL_NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000
 800136c:	40000400 	.word	0x40000400

08001370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_TIM_MspPostInit+0x58>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d117      	bne.n	80013c0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_TIM_MspPostInit+0x5c>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <HAL_TIM_MspPostInit+0x5c>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_TIM_MspPostInit+0x5c>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013a8:	2340      	movs	r3, #64	; 0x40
 80013aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <HAL_TIM_MspPostInit+0x60>)
 80013bc:	f000 fc36 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40000400 	.word	0x40000400
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010800 	.word	0x40010800

080013d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a19      	ldr	r2, [pc, #100]	; (8001454 <HAL_UART_MspInit+0x80>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d12b      	bne.n	800144c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_UART_MspInit+0x84>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_UART_MspInit+0x84>)
 80013fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fe:	61d3      	str	r3, [r2, #28]
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_UART_MspInit+0x84>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_UART_MspInit+0x84>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_UART_MspInit+0x84>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_UART_MspInit+0x84>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001424:	230c      	movs	r3, #12
 8001426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2302      	movs	r3, #2
 800142e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <HAL_UART_MspInit+0x88>)
 8001438:	f000 fbf8 	bl	8001c2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2026      	movs	r0, #38	; 0x26
 8001442:	f000 fb0c 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001446:	2026      	movs	r0, #38	; 0x26
 8001448:	f000 fb25 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40004400 	.word	0x40004400
 8001458:	40021000 	.word	0x40021000
 800145c:	40010800 	.word	0x40010800

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a6:	f000 f9c3 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <TIM2_IRQHandler+0x10>)
 80014b6:	f001 fb45 	bl	8002b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200001c0 	.word	0x200001c0

080014c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <TIM3_IRQHandler+0x10>)
 80014ca:	f001 fb3b 	bl	8002b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000208 	.word	0x20000208

080014d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <USART2_IRQHandler+0x10>)
 80014de:	f002 f9d3 	bl	8003888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000017c 	.word	0x2000017c

080014ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014f4:	f000 fd4e 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <_sbrk+0x5c>)
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <_sbrk+0x60>)
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <_sbrk+0x64>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <_sbrk+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d207      	bcs.n	800153c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800152c:	f002 fda4 	bl	8004078 <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e009      	b.n	8001550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <_sbrk+0x64>)
 800154c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20005000 	.word	0x20005000
 800155c:	00000400 	.word	0x00000400
 8001560:	20000250 	.word	0x20000250
 8001564:	20000280 	.word	0x20000280

08001568 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <light_control_1>:

int status_light1 = INIT1;
int status_light2 = INIT2;


void light_control_1(){
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

	switch(status_light1){
 8001578:	4b31      	ldr	r3, [pc, #196]	; (8001640 <light_control_1+0xcc>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3b13      	subs	r3, #19
 800157e:	2b03      	cmp	r3, #3
 8001580:	d854      	bhi.n	800162c <light_control_1+0xb8>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <light_control_1+0x14>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001599 	.word	0x08001599
 800158c:	080015af 	.word	0x080015af
 8001590:	08001603 	.word	0x08001603
 8001594:	080015d9 	.word	0x080015d9

		case INIT1:
			setTimer2(timer_red);
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <light_control_1+0xd0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff5b 	bl	8000458 <setTimer2>
			LED1_OFF();
 80015a2:	f7fe fdd3 	bl	800014c <LED1_OFF>
			status_light1 = AUTO_RED1;
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <light_control_1+0xcc>)
 80015a8:	2214      	movs	r2, #20
 80015aa:	601a      	str	r2, [r3, #0]
			break;
 80015ac:	e045      	b.n	800163a <light_control_1+0xc6>

		case AUTO_RED1:
			RED1_flag = 1;
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <light_control_1+0xd4>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <light_control_1+0xd8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d139      	bne.n	8001630 <light_control_1+0xbc>
				setTimer2(timer_green);
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <light_control_1+0xdc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff49 	bl	8000458 <setTimer2>
				LED1_OFF();
 80015c6:	f7fe fdc1 	bl	800014c <LED1_OFF>
				RED1_flag = 0;
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <light_control_1+0xd4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_GREEN1;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <light_control_1+0xcc>)
 80015d2:	2216      	movs	r2, #22
 80015d4:	601a      	str	r2, [r3, #0]
			}
			break;
 80015d6:	e02b      	b.n	8001630 <light_control_1+0xbc>

		case AUTO_GREEN1:
			GREEN1_flag = 1;
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <light_control_1+0xe0>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <light_control_1+0xd8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d126      	bne.n	8001634 <light_control_1+0xc0>
				setTimer2(timer_yellow);
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <light_control_1+0xe4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ff34 	bl	8000458 <setTimer2>
				LED1_OFF();
 80015f0:	f7fe fdac 	bl	800014c <LED1_OFF>
				GREEN1_flag = 0;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <light_control_1+0xe0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_YELLOW1;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <light_control_1+0xcc>)
 80015fc:	2215      	movs	r2, #21
 80015fe:	601a      	str	r2, [r3, #0]
			}
			break;
 8001600:	e018      	b.n	8001634 <light_control_1+0xc0>

		case AUTO_YELLOW1:
			YELLOW1_flag = 1;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <light_control_1+0xe8>)
 8001604:	2201      	movs	r2, #1
 8001606:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <light_control_1+0xd8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d113      	bne.n	8001638 <light_control_1+0xc4>
				setTimer2(timer_red);
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <light_control_1+0xd0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff1f 	bl	8000458 <setTimer2>
				LED1_OFF();
 800161a:	f7fe fd97 	bl	800014c <LED1_OFF>
				YELLOW1_flag = 0;
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <light_control_1+0xe8>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_RED1;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <light_control_1+0xcc>)
 8001626:	2214      	movs	r2, #20
 8001628:	601a      	str	r2, [r3, #0]
			}
			break;
 800162a:	e005      	b.n	8001638 <light_control_1+0xc4>
		default:
			break;
 800162c:	bf00      	nop
 800162e:	e004      	b.n	800163a <light_control_1+0xc6>
			break;
 8001630:	bf00      	nop
 8001632:	e002      	b.n	800163a <light_control_1+0xc6>
			break;
 8001634:	bf00      	nop
 8001636:	e000      	b.n	800163a <light_control_1+0xc6>
			break;
 8001638:	bf00      	nop
		}

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000064 	.word	0x20000064
 8001644:	20000054 	.word	0x20000054
 8001648:	20000254 	.word	0x20000254
 800164c:	20000144 	.word	0x20000144
 8001650:	20000058 	.word	0x20000058
 8001654:	20000264 	.word	0x20000264
 8001658:	2000005c 	.word	0x2000005c
 800165c:	2000025c 	.word	0x2000025c

08001660 <light_control_2>:




void light_control_2(){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

	switch(status_light2){
 8001664:	4b34      	ldr	r3, [pc, #208]	; (8001738 <light_control_2+0xd8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3b17      	subs	r3, #23
 800166a:	2b03      	cmp	r3, #3
 800166c:	d85a      	bhi.n	8001724 <light_control_2+0xc4>
 800166e:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <light_control_2+0x14>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	08001685 	.word	0x08001685
 8001678:	080016a7 	.word	0x080016a7
 800167c:	080016d1 	.word	0x080016d1
 8001680:	080016fb 	.word	0x080016fb

		case INIT2:
			setTimer3(timer_green);
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <light_control_2+0xdc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff01 	bl	8000490 <setTimer3>
			LED2_OFF();
 800168e:	f7fe fdd7 	bl	8000240 <LED2_OFF>
			RED2_flag = 0;
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <light_control_2+0xe0>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
			YELLOW2_flag = 0;
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <light_control_2+0xe4>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
			status_light2 = AUTO_GREEN2;
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <light_control_2+0xd8>)
 80016a0:	221a      	movs	r2, #26
 80016a2:	601a      	str	r2, [r3, #0]
			break;
 80016a4:	e045      	b.n	8001732 <light_control_2+0xd2>

		case AUTO_RED2:
			RED2_flag = 1;
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <light_control_2+0xe0>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <light_control_2+0xe8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d139      	bne.n	8001728 <light_control_2+0xc8>
				setTimer3(timer_green);
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <light_control_2+0xdc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fee9 	bl	8000490 <setTimer3>
				LED2_OFF();
 80016be:	f7fe fdbf 	bl	8000240 <LED2_OFF>
				RED2_flag = 0;
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <light_control_2+0xe0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_GREEN2;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <light_control_2+0xd8>)
 80016ca:	221a      	movs	r2, #26
 80016cc:	601a      	str	r2, [r3, #0]
			}
			break;
 80016ce:	e02b      	b.n	8001728 <light_control_2+0xc8>

		case AUTO_YELLOW2:
			YELLOW2_flag = 1;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <light_control_2+0xe4>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <light_control_2+0xe8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d126      	bne.n	800172c <light_control_2+0xcc>
				setTimer3(timer_red);
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <light_control_2+0xec>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fed4 	bl	8000490 <setTimer3>
				LED2_OFF();
 80016e8:	f7fe fdaa 	bl	8000240 <LED2_OFF>
				YELLOW2_flag = 0;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <light_control_2+0xe4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_RED2;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <light_control_2+0xd8>)
 80016f4:	2218      	movs	r2, #24
 80016f6:	601a      	str	r2, [r3, #0]
			}
			break;
 80016f8:	e018      	b.n	800172c <light_control_2+0xcc>

		case AUTO_GREEN2:
			GREEN2_flag = 1;
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <light_control_2+0xf0>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <light_control_2+0xe8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d113      	bne.n	8001730 <light_control_2+0xd0>
				setTimer3(timer_yellow);
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <light_control_2+0xf4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe febf 	bl	8000490 <setTimer3>
				LED2_OFF();
 8001712:	f7fe fd95 	bl	8000240 <LED2_OFF>
				GREEN2_flag = 0;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <light_control_2+0xf0>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_YELLOW2;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <light_control_2+0xd8>)
 800171e:	2219      	movs	r2, #25
 8001720:	601a      	str	r2, [r3, #0]
			}
			break;
 8001722:	e005      	b.n	8001730 <light_control_2+0xd0>
		default:
			break;
 8001724:	bf00      	nop
 8001726:	e004      	b.n	8001732 <light_control_2+0xd2>
			break;
 8001728:	bf00      	nop
 800172a:	e002      	b.n	8001732 <light_control_2+0xd2>
			break;
 800172c:	bf00      	nop
 800172e:	e000      	b.n	8001732 <light_control_2+0xd2>
			break;
 8001730:	bf00      	nop
		}

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000068 	.word	0x20000068
 800173c:	20000058 	.word	0x20000058
 8001740:	20000258 	.word	0x20000258
 8001744:	20000260 	.word	0x20000260
 8001748:	20000148 	.word	0x20000148
 800174c:	20000054 	.word	0x20000054
 8001750:	20000268 	.word	0x20000268
 8001754:	2000005c 	.word	0x2000005c

08001758 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175a:	490d      	ldr	r1, [pc, #52]	; (8001790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001770:	4c0a      	ldr	r4, [pc, #40]	; (800179c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800177e:	f7ff fef3 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001782:	f002 fc7f 	bl	8004084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001786:	f7ff fab3 	bl	8000cf0 <main>
  bx lr
 800178a:	4770      	bx	lr
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001794:	08004ab8 	.word	0x08004ab8
  ldr r2, =_sbss
 8001798:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 800179c:	20000280 	.word	0x20000280

080017a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC1_2_IRQHandler>
	...

080017a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_Init+0x28>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_Init+0x28>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f947 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f000 f808 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c0:	f7ff fd64 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40022000 	.word	0x40022000

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_InitTick+0x54>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_InitTick+0x58>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f95f 	bl	8001ab2 <HAL_SYSTICK_Config>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00e      	b.n	800181c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d80a      	bhi.n	800181a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f000 f927 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <HAL_InitTick+0x5c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000060 	.word	0x20000060
 8001828:	20000070 	.word	0x20000070
 800182c:	2000006c 	.word	0x2000006c

08001830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_IncTick+0x1c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_IncTick+0x20>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a03      	ldr	r2, [pc, #12]	; (8001850 <HAL_IncTick+0x20>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	20000070 	.word	0x20000070
 8001850:	2000026c 	.word	0x2000026c

08001854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b02      	ldr	r3, [pc, #8]	; (8001864 <HAL_GetTick+0x10>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	2000026c 	.word	0x2000026c

08001868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff fff0 	bl	8001854 <HAL_GetTick>
 8001874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001880:	d005      	beq.n	800188e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_Delay+0x44>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800188e:	bf00      	nop
 8001890:	f7ff ffe0 	bl	8001854 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	429a      	cmp	r2, r3
 800189e:	d8f7      	bhi.n	8001890 <HAL_Delay+0x28>
  {
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000070 	.word	0x20000070

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4906      	ldr	r1, [pc, #24]	; (8001948 <__NVIC_EnableIRQ+0x34>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff90 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff2d 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff42 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff90 	bl	80019a0 <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5f 	bl	800194c <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff35 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa2 	bl	8001a04 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d008      	beq.n	8001af2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e020      	b.n	8001b34 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 020e 	bic.w	r2, r2, #14
 8001b00:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d005      	beq.n	8001b62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2204      	movs	r2, #4
 8001b5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e051      	b.n	8001c06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 020e 	bic.w	r2, r2, #14
 8001b70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_DMA_Abort_IT+0xd0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d029      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xa0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a20      	ldr	r2, [pc, #128]	; (8001c14 <HAL_DMA_Abort_IT+0xd4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d022      	beq.n	8001bdc <HAL_DMA_Abort_IT+0x9c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <HAL_DMA_Abort_IT+0xd8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d01a      	beq.n	8001bd6 <HAL_DMA_Abort_IT+0x96>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_DMA_Abort_IT+0xdc>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d012      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x90>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_DMA_Abort_IT+0xe0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00a      	beq.n	8001bca <HAL_DMA_Abort_IT+0x8a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <HAL_DMA_Abort_IT+0xe4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d102      	bne.n	8001bc4 <HAL_DMA_Abort_IT+0x84>
 8001bbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bc2:	e00e      	b.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc8:	e00b      	b.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bce:	e008      	b.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd4:	e005      	b.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bda:	e002      	b.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001bdc:	2310      	movs	r3, #16
 8001bde:	e000      	b.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001be0:	2301      	movs	r3, #1
 8001be2:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <HAL_DMA_Abort_IT+0xe8>)
 8001be4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	4798      	blx	r3
    } 
  }
  return status;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40020008 	.word	0x40020008
 8001c14:	4002001c 	.word	0x4002001c
 8001c18:	40020030 	.word	0x40020030
 8001c1c:	40020044 	.word	0x40020044
 8001c20:	40020058 	.word	0x40020058
 8001c24:	4002006c 	.word	0x4002006c
 8001c28:	40020000 	.word	0x40020000

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b08b      	sub	sp, #44	; 0x2c
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3e:	e169      	b.n	8001f14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c40:	2201      	movs	r2, #1
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 8158 	bne.w	8001f0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a9a      	ldr	r2, [pc, #616]	; (8001ecc <HAL_GPIO_Init+0x2a0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d05e      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c68:	4a98      	ldr	r2, [pc, #608]	; (8001ecc <HAL_GPIO_Init+0x2a0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d875      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c6e:	4a98      	ldr	r2, [pc, #608]	; (8001ed0 <HAL_GPIO_Init+0x2a4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d058      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c74:	4a96      	ldr	r2, [pc, #600]	; (8001ed0 <HAL_GPIO_Init+0x2a4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d86f      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c7a:	4a96      	ldr	r2, [pc, #600]	; (8001ed4 <HAL_GPIO_Init+0x2a8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d052      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c80:	4a94      	ldr	r2, [pc, #592]	; (8001ed4 <HAL_GPIO_Init+0x2a8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d869      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c86:	4a94      	ldr	r2, [pc, #592]	; (8001ed8 <HAL_GPIO_Init+0x2ac>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d04c      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c8c:	4a92      	ldr	r2, [pc, #584]	; (8001ed8 <HAL_GPIO_Init+0x2ac>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d863      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c92:	4a92      	ldr	r2, [pc, #584]	; (8001edc <HAL_GPIO_Init+0x2b0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d046      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c98:	4a90      	ldr	r2, [pc, #576]	; (8001edc <HAL_GPIO_Init+0x2b0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d85d      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	d82a      	bhi.n	8001cf8 <HAL_GPIO_Init+0xcc>
 8001ca2:	2b12      	cmp	r3, #18
 8001ca4:	d859      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001ca6:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <HAL_GPIO_Init+0x80>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001d27 	.word	0x08001d27
 8001cb0:	08001d01 	.word	0x08001d01
 8001cb4:	08001d13 	.word	0x08001d13
 8001cb8:	08001d55 	.word	0x08001d55
 8001cbc:	08001d5b 	.word	0x08001d5b
 8001cc0:	08001d5b 	.word	0x08001d5b
 8001cc4:	08001d5b 	.word	0x08001d5b
 8001cc8:	08001d5b 	.word	0x08001d5b
 8001ccc:	08001d5b 	.word	0x08001d5b
 8001cd0:	08001d5b 	.word	0x08001d5b
 8001cd4:	08001d5b 	.word	0x08001d5b
 8001cd8:	08001d5b 	.word	0x08001d5b
 8001cdc:	08001d5b 	.word	0x08001d5b
 8001ce0:	08001d5b 	.word	0x08001d5b
 8001ce4:	08001d5b 	.word	0x08001d5b
 8001ce8:	08001d5b 	.word	0x08001d5b
 8001cec:	08001d5b 	.word	0x08001d5b
 8001cf0:	08001d09 	.word	0x08001d09
 8001cf4:	08001d1d 	.word	0x08001d1d
 8001cf8:	4a79      	ldr	r2, [pc, #484]	; (8001ee0 <HAL_GPIO_Init+0x2b4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cfe:	e02c      	b.n	8001d5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	623b      	str	r3, [r7, #32]
          break;
 8001d06:	e029      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	623b      	str	r3, [r7, #32]
          break;
 8001d10:	e024      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	3308      	adds	r3, #8
 8001d18:	623b      	str	r3, [r7, #32]
          break;
 8001d1a:	e01f      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	330c      	adds	r3, #12
 8001d22:	623b      	str	r3, [r7, #32]
          break;
 8001d24:	e01a      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	623b      	str	r3, [r7, #32]
          break;
 8001d32:	e013      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	611a      	str	r2, [r3, #16]
          break;
 8001d46:	e009      	b.n	8001d5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	615a      	str	r2, [r3, #20]
          break;
 8001d52:	e003      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
          break;
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          break;
 8001d5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2bff      	cmp	r3, #255	; 0xff
 8001d60:	d801      	bhi.n	8001d66 <HAL_GPIO_Init+0x13a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	e001      	b.n	8001d6a <HAL_GPIO_Init+0x13e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2bff      	cmp	r3, #255	; 0xff
 8001d70:	d802      	bhi.n	8001d78 <HAL_GPIO_Init+0x14c>
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	e002      	b.n	8001d7e <HAL_GPIO_Init+0x152>
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	3b08      	subs	r3, #8
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	210f      	movs	r1, #15
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	401a      	ands	r2, r3
 8001d90:	6a39      	ldr	r1, [r7, #32]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80b1 	beq.w	8001f0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dac:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a4c      	ldr	r2, [pc, #304]	; (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dc4:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <HAL_GPIO_Init+0x2bc>)
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a40      	ldr	r2, [pc, #256]	; (8001eec <HAL_GPIO_Init+0x2c0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d013      	beq.n	8001e18 <HAL_GPIO_Init+0x1ec>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3f      	ldr	r2, [pc, #252]	; (8001ef0 <HAL_GPIO_Init+0x2c4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00d      	beq.n	8001e14 <HAL_GPIO_Init+0x1e8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3e      	ldr	r2, [pc, #248]	; (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <HAL_GPIO_Init+0x1e4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3d      	ldr	r2, [pc, #244]	; (8001ef8 <HAL_GPIO_Init+0x2cc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d101      	bne.n	8001e0c <HAL_GPIO_Init+0x1e0>
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e006      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	e004      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e002      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1c:	f002 0203 	and.w	r2, r2, #3
 8001e20:	0092      	lsls	r2, r2, #2
 8001e22:	4093      	lsls	r3, r2
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e2a:	492f      	ldr	r1, [pc, #188]	; (8001ee8 <HAL_GPIO_Init+0x2bc>)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e44:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	492c      	ldr	r1, [pc, #176]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4928      	ldr	r1, [pc, #160]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4922      	ldr	r1, [pc, #136]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	491e      	ldr	r1, [pc, #120]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	4918      	ldr	r1, [pc, #96]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4914      	ldr	r1, [pc, #80]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d021      	beq.n	8001f00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	490e      	ldr	r1, [pc, #56]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60cb      	str	r3, [r1, #12]
 8001ec8:	e021      	b.n	8001f0e <HAL_GPIO_Init+0x2e2>
 8001eca:	bf00      	nop
 8001ecc:	10320000 	.word	0x10320000
 8001ed0:	10310000 	.word	0x10310000
 8001ed4:	10220000 	.word	0x10220000
 8001ed8:	10210000 	.word	0x10210000
 8001edc:	10120000 	.word	0x10120000
 8001ee0:	10110000 	.word	0x10110000
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	40010c00 	.word	0x40010c00
 8001ef4:	40011000 	.word	0x40011000
 8001ef8:	40011400 	.word	0x40011400
 8001efc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4909      	ldr	r1, [pc, #36]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	3301      	adds	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f47f ae8e 	bne.w	8001c40 <HAL_GPIO_Init+0x14>
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	372c      	adds	r7, #44	; 0x2c
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e001      	b.n	8001f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	807b      	strh	r3, [r7, #2]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f72:	787b      	ldrb	r3, [r7, #1]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f78:	887a      	ldrh	r2, [r7, #2]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f7e:	e003      	b.n	8001f88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f80:	887b      	ldrh	r3, [r7, #2]
 8001f82:	041a      	lsls	r2, r3, #16
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	611a      	str	r2, [r3, #16]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f806 	bl	8001fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e272      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8087 	beq.w	8002106 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff8:	4b92      	ldr	r3, [pc, #584]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b04      	cmp	r3, #4
 8002002:	d00c      	beq.n	800201e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002004:	4b8f      	ldr	r3, [pc, #572]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b08      	cmp	r3, #8
 800200e:	d112      	bne.n	8002036 <HAL_RCC_OscConfig+0x5e>
 8002010:	4b8c      	ldr	r3, [pc, #560]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d10b      	bne.n	8002036 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201e:	4b89      	ldr	r3, [pc, #548]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d06c      	beq.n	8002104 <HAL_RCC_OscConfig+0x12c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d168      	bne.n	8002104 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e24c      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x76>
 8002040:	4b80      	ldr	r3, [pc, #512]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a7f      	ldr	r2, [pc, #508]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e02e      	b.n	80020ac <HAL_RCC_OscConfig+0xd4>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x98>
 8002056:	4b7b      	ldr	r3, [pc, #492]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7a      	ldr	r2, [pc, #488]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800205c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b78      	ldr	r3, [pc, #480]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a77      	ldr	r2, [pc, #476]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e01d      	b.n	80020ac <HAL_RCC_OscConfig+0xd4>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0xbc>
 800207a:	4b72      	ldr	r3, [pc, #456]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a71      	ldr	r2, [pc, #452]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b6f      	ldr	r3, [pc, #444]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a6e      	ldr	r2, [pc, #440]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e00b      	b.n	80020ac <HAL_RCC_OscConfig+0xd4>
 8002094:	4b6b      	ldr	r3, [pc, #428]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a6a      	ldr	r2, [pc, #424]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800209a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b68      	ldr	r3, [pc, #416]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a67      	ldr	r2, [pc, #412]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff fbce 	bl	8001854 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff fbca 	bl	8001854 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e200      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b5d      	ldr	r3, [pc, #372]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0xe4>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7ff fbba 	bl	8001854 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7ff fbb6 	bl	8001854 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	; 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1ec      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	4b53      	ldr	r3, [pc, #332]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x10c>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d063      	beq.n	80021da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002112:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800211e:	4b49      	ldr	r3, [pc, #292]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b08      	cmp	r3, #8
 8002128:	d11c      	bne.n	8002164 <HAL_RCC_OscConfig+0x18c>
 800212a:	4b46      	ldr	r3, [pc, #280]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d116      	bne.n	8002164 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	4b43      	ldr	r3, [pc, #268]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_RCC_OscConfig+0x176>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d001      	beq.n	800214e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e1c0      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214e:	4b3d      	ldr	r3, [pc, #244]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4939      	ldr	r1, [pc, #228]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	e03a      	b.n	80021da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d020      	beq.n	80021ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800216c:	4b36      	ldr	r3, [pc, #216]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7ff fb6f 	bl	8001854 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217a:	f7ff fb6b 	bl	8001854 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e1a1      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002198:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4927      	ldr	r1, [pc, #156]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
 80021ac:	e015      	b.n	80021da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ae:	4b26      	ldr	r3, [pc, #152]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff fb4e 	bl	8001854 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021bc:	f7ff fb4a 	bl	8001854 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e180      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d03a      	beq.n	800225c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d019      	beq.n	8002222 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_RCC_OscConfig+0x274>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f4:	f7ff fb2e 	bl	8001854 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fc:	f7ff fb2a 	bl	8001854 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e160      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800221a:	2001      	movs	r0, #1
 800221c:	f000 fad8 	bl	80027d0 <RCC_Delay>
 8002220:	e01c      	b.n	800225c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7ff fb14 	bl	8001854 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222e:	e00f      	b.n	8002250 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002230:	f7ff fb10 	bl	8001854 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d908      	bls.n	8002250 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e146      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	42420000 	.word	0x42420000
 800224c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002250:	4b92      	ldr	r3, [pc, #584]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1e9      	bne.n	8002230 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a6 	beq.w	80023b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226e:	4b8b      	ldr	r3, [pc, #556]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10d      	bne.n	8002296 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4b88      	ldr	r3, [pc, #544]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	4a87      	ldr	r2, [pc, #540]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	61d3      	str	r3, [r2, #28]
 8002286:	4b85      	ldr	r3, [pc, #532]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b82      	ldr	r3, [pc, #520]	; (80024a0 <HAL_RCC_OscConfig+0x4c8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a2:	4b7f      	ldr	r3, [pc, #508]	; (80024a0 <HAL_RCC_OscConfig+0x4c8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7e      	ldr	r2, [pc, #504]	; (80024a0 <HAL_RCC_OscConfig+0x4c8>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7ff fad1 	bl	8001854 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7ff facd 	bl	8001854 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	; 0x64
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e103      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b75      	ldr	r3, [pc, #468]	; (80024a0 <HAL_RCC_OscConfig+0x4c8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x312>
 80022dc:	4b6f      	ldr	r3, [pc, #444]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4a6e      	ldr	r2, [pc, #440]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6213      	str	r3, [r2, #32]
 80022e8:	e02d      	b.n	8002346 <HAL_RCC_OscConfig+0x36e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x334>
 80022f2:	4b6a      	ldr	r3, [pc, #424]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a69      	ldr	r2, [pc, #420]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	6213      	str	r3, [r2, #32]
 80022fe:	4b67      	ldr	r3, [pc, #412]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a66      	ldr	r2, [pc, #408]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002304:	f023 0304 	bic.w	r3, r3, #4
 8002308:	6213      	str	r3, [r2, #32]
 800230a:	e01c      	b.n	8002346 <HAL_RCC_OscConfig+0x36e>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b05      	cmp	r3, #5
 8002312:	d10c      	bne.n	800232e <HAL_RCC_OscConfig+0x356>
 8002314:	4b61      	ldr	r3, [pc, #388]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a60      	ldr	r2, [pc, #384]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6213      	str	r3, [r2, #32]
 8002320:	4b5e      	ldr	r3, [pc, #376]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a5d      	ldr	r2, [pc, #372]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6213      	str	r3, [r2, #32]
 800232c:	e00b      	b.n	8002346 <HAL_RCC_OscConfig+0x36e>
 800232e:	4b5b      	ldr	r3, [pc, #364]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a5a      	ldr	r2, [pc, #360]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	4b58      	ldr	r3, [pc, #352]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4a57      	ldr	r2, [pc, #348]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d015      	beq.n	800237a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7ff fa81 	bl	8001854 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7ff fa7d 	bl	8001854 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0b1      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	4b4b      	ldr	r3, [pc, #300]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ee      	beq.n	8002356 <HAL_RCC_OscConfig+0x37e>
 8002378:	e014      	b.n	80023a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237a:	f7ff fa6b 	bl	8001854 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7ff fa67 	bl	8001854 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e09b      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	4b40      	ldr	r3, [pc, #256]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ee      	bne.n	8002382 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d105      	bne.n	80023b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4b3c      	ldr	r3, [pc, #240]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4a3b      	ldr	r2, [pc, #236]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8087 	beq.w	80024ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c0:	4b36      	ldr	r3, [pc, #216]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d061      	beq.n	8002490 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d146      	bne.n	8002462 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d4:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <HAL_RCC_OscConfig+0x4cc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7ff fa3b 	bl	8001854 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e2:	f7ff fa37 	bl	8001854 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e06d      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f4:	4b29      	ldr	r3, [pc, #164]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d108      	bne.n	800241c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4921      	ldr	r1, [pc, #132]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800241c:	4b1f      	ldr	r3, [pc, #124]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a19      	ldr	r1, [r3, #32]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	430b      	orrs	r3, r1
 800242e:	491b      	ldr	r1, [pc, #108]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_RCC_OscConfig+0x4cc>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7ff fa0b 	bl	8001854 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002442:	f7ff fa07 	bl	8001854 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e03d      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x46a>
 8002460:	e035      	b.n	80024ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <HAL_RCC_OscConfig+0x4cc>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7ff f9f4 	bl	8001854 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7ff f9f0 	bl	8001854 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e026      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_OscConfig+0x4c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x498>
 800248e:	e01e      	b.n	80024ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e019      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
 800249c:	40021000 	.word	0x40021000
 80024a0:	40007000 	.word	0x40007000
 80024a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_OscConfig+0x500>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d001      	beq.n	80024ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000

080024dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0d0      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f0:	4b6a      	ldr	r3, [pc, #424]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d910      	bls.n	8002520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b67      	ldr	r3, [pc, #412]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	4965      	ldr	r1, [pc, #404]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0b8      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002538:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a58      	ldr	r2, [pc, #352]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002542:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800255a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	494d      	ldr	r1, [pc, #308]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d040      	beq.n	80025fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d115      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e07f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259a:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e073      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	4b3d      	ldr	r3, [pc, #244]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06b      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ba:	4b39      	ldr	r3, [pc, #228]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f023 0203 	bic.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4936      	ldr	r1, [pc, #216]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025cc:	f7ff f942 	bl	8001854 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d4:	f7ff f93e 	bl	8001854 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e053      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 020c 	and.w	r2, r3, #12
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d1eb      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025fc:	4b27      	ldr	r3, [pc, #156]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d210      	bcs.n	800262c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 0207 	bic.w	r2, r3, #7
 8002612:	4922      	ldr	r1, [pc, #136]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e032      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4916      	ldr	r1, [pc, #88]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	490e      	ldr	r1, [pc, #56]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800266a:	f000 f821 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 800266e:	4602      	mov	r2, r0
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	490a      	ldr	r1, [pc, #40]	; (80026a4 <HAL_RCC_ClockConfig+0x1c8>)
 800267c:	5ccb      	ldrb	r3, [r1, r3]
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_ClockConfig+0x1d0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f8a0 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40022000 	.word	0x40022000
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08004a64 	.word	0x08004a64
 80026a8:	20000060 	.word	0x20000060
 80026ac:	2000006c 	.word	0x2000006c

080026b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	b490      	push	{r4, r7}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026b6:	4b29      	ldr	r3, [pc, #164]	; (800275c <HAL_RCC_GetSysClockFreq+0xac>)
 80026b8:	1d3c      	adds	r4, r7, #4
 80026ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026c0:	f240 2301 	movw	r3, #513	; 0x201
 80026c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x40>
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x46>
 80026ee:	e02b      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026f2:	623b      	str	r3, [r7, #32]
      break;
 80026f4:	e02b      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	0c9b      	lsrs	r3, r3, #18
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	3328      	adds	r3, #40	; 0x28
 8002700:	443b      	add	r3, r7
 8002702:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002706:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d012      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002712:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	0c5b      	lsrs	r3, r3, #17
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	3328      	adds	r3, #40	; 0x28
 800271e:	443b      	add	r3, r7
 8002720:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002724:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <HAL_RCC_GetSysClockFreq+0xb4>)
 800272a:	fb03 f202 	mul.w	r2, r3, r2
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
 8002736:	e004      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	623b      	str	r3, [r7, #32]
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_GetSysClockFreq+0xb4>)
 800274a:	623b      	str	r3, [r7, #32]
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	6a3b      	ldr	r3, [r7, #32]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3728      	adds	r7, #40	; 0x28
 8002754:	46bd      	mov	sp, r7
 8002756:	bc90      	pop	{r4, r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	08004a54 	.word	0x08004a54
 8002760:	40021000 	.word	0x40021000
 8002764:	007a1200 	.word	0x007a1200
 8002768:	003d0900 	.word	0x003d0900

0800276c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002770:	4b02      	ldr	r3, [pc, #8]	; (800277c <HAL_RCC_GetHCLKFreq+0x10>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	20000060 	.word	0x20000060

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002784:	f7ff fff2 	bl	800276c <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	08004a74 	.word	0x08004a74

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027ac:	f7ff ffde 	bl	800276c <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	0adb      	lsrs	r3, r3, #11
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08004a74 	.word	0x08004a74

080027d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <RCC_Delay+0x34>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <RCC_Delay+0x38>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0a5b      	lsrs	r3, r3, #9
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027ec:	bf00      	nop
  }
  while (Delay --);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1e5a      	subs	r2, r3, #1
 80027f2:	60fa      	str	r2, [r7, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f9      	bne.n	80027ec <RCC_Delay+0x1c>
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	20000060 	.word	0x20000060
 8002808:	10624dd3 	.word	0x10624dd3

0800280c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e041      	b.n	80028a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fd5c 	bl	80012f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f000 fc28 	bl	80030a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d001      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e03a      	b.n	800293a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a18      	ldr	r2, [pc, #96]	; (8002944 <HAL_TIM_Base_Start_IT+0x98>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00e      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x58>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ee:	d009      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x58>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a14      	ldr	r2, [pc, #80]	; (8002948 <HAL_TIM_Base_Start_IT+0x9c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x58>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a13      	ldr	r2, [pc, #76]	; (800294c <HAL_TIM_Base_Start_IT+0xa0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d111      	bne.n	8002928 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d010      	beq.n	8002938 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0201 	orr.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002926:	e007      	b.n	8002938 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40000400 	.word	0x40000400
 800294c:	40000800 	.word	0x40000800

08002950 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e041      	b.n	80029e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f839 	bl	80029ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f000 fb86 	bl	80030a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_TIM_PWM_Start+0x24>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e022      	b.n	8002a6a <HAL_TIM_PWM_Start+0x6a>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d109      	bne.n	8002a3e <HAL_TIM_PWM_Start+0x3e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	e015      	b.n	8002a6a <HAL_TIM_PWM_Start+0x6a>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d109      	bne.n	8002a58 <HAL_TIM_PWM_Start+0x58>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e008      	b.n	8002a6a <HAL_TIM_PWM_Start+0x6a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	bf14      	ite	ne
 8002a64:	2301      	movne	r3, #1
 8002a66:	2300      	moveq	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e05e      	b.n	8002b30 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d104      	bne.n	8002a82 <HAL_TIM_PWM_Start+0x82>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a80:	e013      	b.n	8002aaa <HAL_TIM_PWM_Start+0xaa>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d104      	bne.n	8002a92 <HAL_TIM_PWM_Start+0x92>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a90:	e00b      	b.n	8002aaa <HAL_TIM_PWM_Start+0xaa>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0xa2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa0:	e003      	b.n	8002aaa <HAL_TIM_PWM_Start+0xaa>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	6839      	ldr	r1, [r7, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fd74 	bl	80035a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1e      	ldr	r2, [pc, #120]	; (8002b38 <HAL_TIM_PWM_Start+0x138>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d107      	bne.n	8002ad2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_TIM_PWM_Start+0x138>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00e      	beq.n	8002afa <HAL_TIM_PWM_Start+0xfa>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d009      	beq.n	8002afa <HAL_TIM_PWM_Start+0xfa>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_TIM_PWM_Start+0x13c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d004      	beq.n	8002afa <HAL_TIM_PWM_Start+0xfa>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <HAL_TIM_PWM_Start+0x140>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d111      	bne.n	8002b1e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d010      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1c:	e007      	b.n	8002b2e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40012c00 	.word	0x40012c00
 8002b3c:	40000400 	.word	0x40000400
 8002b40:	40000800 	.word	0x40000800

08002b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0202 	mvn.w	r2, #2
 8002b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa6f 	bl	800306a <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa62 	bl	8003058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fa71 	bl	800307c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0204 	mvn.w	r2, #4
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa45 	bl	800306a <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fa38 	bl	8003058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fa47 	bl	800307c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d122      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d11b      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0208 	mvn.w	r2, #8
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa1b 	bl	800306a <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa0e 	bl	8003058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fa1d 	bl	800307c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d122      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d11b      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0210 	mvn.w	r2, #16
 8002c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2208      	movs	r2, #8
 8002c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f9f1 	bl	800306a <HAL_TIM_IC_CaptureCallback>
 8002c88:	e005      	b.n	8002c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9e4 	bl	8003058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f9f3 	bl	800307c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d107      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0201 	mvn.w	r2, #1
 8002cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe faca 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	2b80      	cmp	r3, #128	; 0x80
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b80      	cmp	r3, #128	; 0x80
 8002ce2:	d107      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fce1 	bl	80036b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfe:	2b40      	cmp	r3, #64	; 0x40
 8002d00:	d10e      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d107      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f9b7 	bl	800308e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d10e      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d107      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0220 	mvn.w	r2, #32
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fcac 	bl	80036a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0ac      	b.n	8002ec8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	f200 809f 	bhi.w	8002ebc <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002db9 	.word	0x08002db9
 8002d88:	08002ebd 	.word	0x08002ebd
 8002d8c:	08002ebd 	.word	0x08002ebd
 8002d90:	08002ebd 	.word	0x08002ebd
 8002d94:	08002df9 	.word	0x08002df9
 8002d98:	08002ebd 	.word	0x08002ebd
 8002d9c:	08002ebd 	.word	0x08002ebd
 8002da0:	08002ebd 	.word	0x08002ebd
 8002da4:	08002e3b 	.word	0x08002e3b
 8002da8:	08002ebd 	.word	0x08002ebd
 8002dac:	08002ebd 	.word	0x08002ebd
 8002db0:	08002ebd 	.word	0x08002ebd
 8002db4:	08002e7b 	.word	0x08002e7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f9d0 	bl	8003164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0208 	orr.w	r2, r2, #8
 8002dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0204 	bic.w	r2, r2, #4
 8002de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6999      	ldr	r1, [r3, #24]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	619a      	str	r2, [r3, #24]
      break;
 8002df6:	e062      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fa16 	bl	8003230 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6999      	ldr	r1, [r3, #24]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	021a      	lsls	r2, r3, #8
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	619a      	str	r2, [r3, #24]
      break;
 8002e38:	e041      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fa5f 	bl	8003304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0208 	orr.w	r2, r2, #8
 8002e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0204 	bic.w	r2, r2, #4
 8002e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69d9      	ldr	r1, [r3, #28]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	61da      	str	r2, [r3, #28]
      break;
 8002e78:	e021      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68b9      	ldr	r1, [r7, #8]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 faa9 	bl	80033d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69d9      	ldr	r1, [r3, #28]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	021a      	lsls	r2, r3, #8
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	61da      	str	r2, [r3, #28]
      break;
 8002eba:	e000      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ebc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_TIM_ConfigClockSource+0x18>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e0b3      	b.n	8003050 <HAL_TIM_ConfigClockSource+0x180>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f20:	d03e      	beq.n	8002fa0 <HAL_TIM_ConfigClockSource+0xd0>
 8002f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f26:	f200 8087 	bhi.w	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2e:	f000 8085 	beq.w	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	d87f      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f38:	2b70      	cmp	r3, #112	; 0x70
 8002f3a:	d01a      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0xa2>
 8002f3c:	2b70      	cmp	r3, #112	; 0x70
 8002f3e:	d87b      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f40:	2b60      	cmp	r3, #96	; 0x60
 8002f42:	d050      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x116>
 8002f44:	2b60      	cmp	r3, #96	; 0x60
 8002f46:	d877      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f48:	2b50      	cmp	r3, #80	; 0x50
 8002f4a:	d03c      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0xf6>
 8002f4c:	2b50      	cmp	r3, #80	; 0x50
 8002f4e:	d873      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d058      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x136>
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d86f      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f58:	2b30      	cmp	r3, #48	; 0x30
 8002f5a:	d064      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x156>
 8002f5c:	2b30      	cmp	r3, #48	; 0x30
 8002f5e:	d86b      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d060      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x156>
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d867      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d05c      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x156>
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d05a      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f70:	e062      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6899      	ldr	r1, [r3, #8]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f000 faee 	bl	8003562 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	609a      	str	r2, [r3, #8]
      break;
 8002f9e:	e04e      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f000 fad7 	bl	8003562 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fc2:	609a      	str	r2, [r3, #8]
      break;
 8002fc4:	e03b      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f000 fa4e 	bl	8003474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2150      	movs	r1, #80	; 0x50
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 faa5 	bl	800352e <TIM_ITRx_SetConfig>
      break;
 8002fe4:	e02b      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f000 fa6c 	bl	80034d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2160      	movs	r1, #96	; 0x60
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fa95 	bl	800352e <TIM_ITRx_SetConfig>
      break;
 8003004:	e01b      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	f000 fa2e 	bl	8003474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2140      	movs	r1, #64	; 0x40
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fa85 	bl	800352e <TIM_ITRx_SetConfig>
      break;
 8003024:	e00b      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f000 fa7c 	bl	800352e <TIM_ITRx_SetConfig>
        break;
 8003036:	e002      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003038:	bf00      	nop
 800303a:	e000      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800303c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a29      	ldr	r2, [pc, #164]	; (8003158 <TIM_Base_SetConfig+0xb8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00b      	beq.n	80030d0 <TIM_Base_SetConfig+0x30>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030be:	d007      	beq.n	80030d0 <TIM_Base_SetConfig+0x30>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a26      	ldr	r2, [pc, #152]	; (800315c <TIM_Base_SetConfig+0xbc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <TIM_Base_SetConfig+0x30>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a25      	ldr	r2, [pc, #148]	; (8003160 <TIM_Base_SetConfig+0xc0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d108      	bne.n	80030e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a1c      	ldr	r2, [pc, #112]	; (8003158 <TIM_Base_SetConfig+0xb8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00b      	beq.n	8003102 <TIM_Base_SetConfig+0x62>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d007      	beq.n	8003102 <TIM_Base_SetConfig+0x62>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <TIM_Base_SetConfig+0xbc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d003      	beq.n	8003102 <TIM_Base_SetConfig+0x62>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a18      	ldr	r2, [pc, #96]	; (8003160 <TIM_Base_SetConfig+0xc0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d108      	bne.n	8003114 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a07      	ldr	r2, [pc, #28]	; (8003158 <TIM_Base_SetConfig+0xb8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d103      	bne.n	8003148 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	615a      	str	r2, [r3, #20]
}
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	40012c00 	.word	0x40012c00
 800315c:	40000400 	.word	0x40000400
 8003160:	40000800 	.word	0x40000800

08003164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f023 0201 	bic.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0303 	bic.w	r3, r3, #3
 800319a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f023 0302 	bic.w	r3, r3, #2
 80031ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a1c      	ldr	r2, [pc, #112]	; (800322c <TIM_OC1_SetConfig+0xc8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10c      	bne.n	80031da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0308 	bic.w	r3, r3, #8
 80031c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a13      	ldr	r2, [pc, #76]	; (800322c <TIM_OC1_SetConfig+0xc8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d111      	bne.n	8003206 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	621a      	str	r2, [r3, #32]
}
 8003220:	bf00      	nop
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40012c00 	.word	0x40012c00

08003230 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	f023 0210 	bic.w	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f023 0320 	bic.w	r3, r3, #32
 800327a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <TIM_OC2_SetConfig+0xd0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d10d      	bne.n	80032ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a14      	ldr	r2, [pc, #80]	; (8003300 <TIM_OC2_SetConfig+0xd0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d113      	bne.n	80032dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	621a      	str	r2, [r3, #32]
}
 80032f6:	bf00      	nop
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	40012c00 	.word	0x40012c00

08003304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0303 	bic.w	r3, r3, #3
 800333a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800334c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <TIM_OC3_SetConfig+0xd0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d10d      	bne.n	800337e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800337c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a14      	ldr	r2, [pc, #80]	; (80033d4 <TIM_OC3_SetConfig+0xd0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d113      	bne.n	80033ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800338c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40012c00 	.word	0x40012c00

080033d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	031b      	lsls	r3, r3, #12
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a0f      	ldr	r2, [pc, #60]	; (8003470 <TIM_OC4_SetConfig+0x98>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d109      	bne.n	800344c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800343e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	019b      	lsls	r3, r3, #6
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	40012c00 	.word	0x40012c00

08003474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f023 0201 	bic.w	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800349e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f023 030a 	bic.w	r3, r3, #10
 80034b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	f023 0210 	bic.w	r2, r3, #16
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	031b      	lsls	r3, r3, #12
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800350c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	621a      	str	r2, [r3, #32]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	f043 0307 	orr.w	r3, r3, #7
 8003550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	609a      	str	r2, [r3, #8]
}
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003562:	b480      	push	{r7}
 8003564:	b087      	sub	sp, #28
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800357c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	021a      	lsls	r2, r3, #8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	431a      	orrs	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4313      	orrs	r3, r2
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	609a      	str	r2, [r3, #8]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	2201      	movs	r2, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a1a      	ldr	r2, [r3, #32]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	401a      	ands	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	fa01 f303 	lsl.w	r3, r1, r3
 80035d8:	431a      	orrs	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e046      	b.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a16      	ldr	r2, [pc, #88]	; (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00e      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d009      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a12      	ldr	r2, [pc, #72]	; (800369c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a10      	ldr	r2, [pc, #64]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d10c      	bne.n	800367c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	4313      	orrs	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800

080036a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e03f      	b.n	800375a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fd fe70 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2224      	movs	r2, #36	; 0x24
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800370a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fc25 	bl	8003f5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b08a      	sub	sp, #40	; 0x28
 8003766:	af02      	add	r7, sp, #8
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	4613      	mov	r3, r2
 8003770:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b20      	cmp	r3, #32
 8003780:	d17c      	bne.n	800387c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <HAL_UART_Transmit+0x2c>
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e075      	b.n	800387e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_UART_Transmit+0x3e>
 800379c:	2302      	movs	r3, #2
 800379e:	e06e      	b.n	800387e <HAL_UART_Transmit+0x11c>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2221      	movs	r2, #33	; 0x21
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037b6:	f7fe f84d 	bl	8001854 <HAL_GetTick>
 80037ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	88fa      	ldrh	r2, [r7, #6]
 80037c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	88fa      	ldrh	r2, [r7, #6]
 80037c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d0:	d108      	bne.n	80037e4 <HAL_UART_Transmit+0x82>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d104      	bne.n	80037e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	e003      	b.n	80037ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037f4:	e02a      	b.n	800384c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2200      	movs	r2, #0
 80037fe:	2180      	movs	r1, #128	; 0x80
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fa11 	bl	8003c28 <UART_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e036      	b.n	800387e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10b      	bne.n	800382e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003824:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	3302      	adds	r3, #2
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	e007      	b.n	800383e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	781a      	ldrb	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	3301      	adds	r3, #1
 800383c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1cf      	bne.n	80037f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	2140      	movs	r1, #64	; 0x40
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f9e1 	bl	8003c28 <UART_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e006      	b.n	800387e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	e000      	b.n	800387e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800387c:	2302      	movs	r3, #2
  }
}
 800387e:	4618      	mov	r0, r3
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10d      	bne.n	80038da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_UART_IRQHandler+0x52>
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fa99 	bl	8003e0a <UART_Receive_IT>
      return;
 80038d8:	e17b      	b.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80b1 	beq.w	8003a44 <HAL_UART_IRQHandler+0x1bc>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <HAL_UART_IRQHandler+0x70>
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80a6 	beq.w	8003a44 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_UART_IRQHandler+0x90>
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f043 0201 	orr.w	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_UART_IRQHandler+0xb0>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f043 0202 	orr.w	r2, r3, #2
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_UART_IRQHandler+0xd0>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f043 0204 	orr.w	r2, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00f      	beq.n	8003982 <HAL_UART_IRQHandler+0xfa>
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <HAL_UART_IRQHandler+0xee>
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0208 	orr.w	r2, r3, #8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 811e 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <HAL_UART_IRQHandler+0x11e>
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fa32 	bl	8003e0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <HAL_UART_IRQHandler+0x146>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d031      	beq.n	8003a32 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f974 	bl	8003cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d023      	beq.n	8003a2a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d013      	beq.n	8003a22 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	4a76      	ldr	r2, [pc, #472]	; (8003bd8 <HAL_UART_IRQHandler+0x350>)
 8003a00:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe f89a 	bl	8001b40 <HAL_DMA_Abort_IT>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	e00e      	b.n	8003a40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8ec 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	e00a      	b.n	8003a40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8e8 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a30:	e006      	b.n	8003a40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f8e4 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a3e:	e0c3      	b.n	8003bc8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a40:	bf00      	nop
    return;
 8003a42:	e0c1      	b.n	8003bc8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f040 80a1 	bne.w	8003b90 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 809b 	beq.w	8003b90 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8095 	beq.w	8003b90 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d04e      	beq.n	8003b28 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a94:	8a3b      	ldrh	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8098 	beq.w	8003bcc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aa0:	8a3a      	ldrh	r2, [r7, #16]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	f080 8092 	bcs.w	8003bcc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8a3a      	ldrh	r2, [r7, #16]
 8003aac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d02b      	beq.n	8003b10 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0210 	bic.w	r2, r2, #16
 8003b04:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd ffdd 	bl	8001aca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f876 	bl	8003c12 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b26:	e051      	b.n	8003bcc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d047      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003b40:	8a7b      	ldrh	r3, [r7, #18]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d044      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b54:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0210 	bic.w	r2, r2, #16
 8003b82:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b84:	8a7b      	ldrh	r3, [r7, #18]
 8003b86:	4619      	mov	r1, r3
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f842 	bl	8003c12 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b8e:	e01f      	b.n	8003bd0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_UART_IRQHandler+0x324>
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f8c9 	bl	8003d3c <UART_Transmit_IT>
    return;
 8003baa:	e012      	b.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f90a 	bl	8003dda <UART_EndTransmit_IT>
    return;
 8003bc6:	e004      	b.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
    return;
 8003bc8:	bf00      	nop
 8003bca:	e002      	b.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
      return;
 8003bcc:	bf00      	nop
 8003bce:	e000      	b.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
      return;
 8003bd0:	bf00      	nop
  }
}
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	08003d15 	.word	0x08003d15

08003bdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c38:	e02c      	b.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d028      	beq.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c48:	f7fd fe04 	bl	8001854 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d21d      	bcs.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e00f      	b.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d0c3      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cd2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0201 	bic.w	r2, r2, #1
 8003ce2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d107      	bne.n	8003cfc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0210 	bic.w	r2, r2, #16
 8003cfa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f7ff ff66 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b21      	cmp	r3, #33	; 0x21
 8003d4e:	d13e      	bne.n	8003dce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d58:	d114      	bne.n	8003d84 <UART_Transmit_IT+0x48>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d110      	bne.n	8003d84 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]
 8003d82:	e008      	b.n	8003d96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	1c59      	adds	r1, r3, #1
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6211      	str	r1, [r2, #32]
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4619      	mov	r1, r3
 8003da4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10f      	bne.n	8003dca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e000      	b.n	8003dd0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
  }
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff feee 	bl	8003bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b22      	cmp	r3, #34	; 0x22
 8003e1c:	f040 8099 	bne.w	8003f52 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e28:	d117      	bne.n	8003e5a <UART_Receive_IT+0x50>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d113      	bne.n	8003e5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	1c9a      	adds	r2, r3, #2
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	629a      	str	r2, [r3, #40]	; 0x28
 8003e58:	e026      	b.n	8003ea8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6c:	d007      	beq.n	8003e7e <UART_Receive_IT+0x74>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <UART_Receive_IT+0x82>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	e008      	b.n	8003e9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d148      	bne.n	8003f4e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0220 	bic.w	r2, r2, #32
 8003eca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d123      	bne.n	8003f44 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0210 	bic.w	r2, r2, #16
 8003f10:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b10      	cmp	r3, #16
 8003f1e:	d10a      	bne.n	8003f36 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fe68 	bl	8003c12 <HAL_UARTEx_RxEventCallback>
 8003f42:	e002      	b.n	8003f4a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fe52 	bl	8003bee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e002      	b.n	8003f54 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e000      	b.n	8003f54 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
  }
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f96:	f023 030c 	bic.w	r3, r3, #12
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2c      	ldr	r2, [pc, #176]	; (8004070 <UART_SetConfig+0x114>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d103      	bne.n	8003fcc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fc4:	f7fe fbf0 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	e002      	b.n	8003fd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fcc:	f7fe fbd8 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8003fd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009a      	lsls	r2, r3, #2
 8003fdc:	441a      	add	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	4a22      	ldr	r2, [pc, #136]	; (8004074 <UART_SetConfig+0x118>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	0119      	lsls	r1, r3, #4
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009a      	lsls	r2, r3, #2
 8003ffc:	441a      	add	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	fbb2 f2f3 	udiv	r2, r2, r3
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <UART_SetConfig+0x118>)
 800400a:	fba3 0302 	umull	r0, r3, r3, r2
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	2064      	movs	r0, #100	; 0x64
 8004012:	fb00 f303 	mul.w	r3, r0, r3
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	3332      	adds	r3, #50	; 0x32
 800401c:	4a15      	ldr	r2, [pc, #84]	; (8004074 <UART_SetConfig+0x118>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004028:	4419      	add	r1, r3
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009a      	lsls	r2, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004040:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <UART_SetConfig+0x118>)
 8004042:	fba3 0302 	umull	r0, r3, r3, r2
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	2064      	movs	r0, #100	; 0x64
 800404a:	fb00 f303 	mul.w	r3, r0, r3
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	3332      	adds	r3, #50	; 0x32
 8004054:	4a07      	ldr	r2, [pc, #28]	; (8004074 <UART_SetConfig+0x118>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	f003 020f 	and.w	r2, r3, #15
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	440a      	add	r2, r1
 8004066:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40013800 	.word	0x40013800
 8004074:	51eb851f 	.word	0x51eb851f

08004078 <__errno>:
 8004078:	4b01      	ldr	r3, [pc, #4]	; (8004080 <__errno+0x8>)
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000074 	.word	0x20000074

08004084 <__libc_init_array>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	2600      	movs	r6, #0
 8004088:	4d0c      	ldr	r5, [pc, #48]	; (80040bc <__libc_init_array+0x38>)
 800408a:	4c0d      	ldr	r4, [pc, #52]	; (80040c0 <__libc_init_array+0x3c>)
 800408c:	1b64      	subs	r4, r4, r5
 800408e:	10a4      	asrs	r4, r4, #2
 8004090:	42a6      	cmp	r6, r4
 8004092:	d109      	bne.n	80040a8 <__libc_init_array+0x24>
 8004094:	f000 fc9c 	bl	80049d0 <_init>
 8004098:	2600      	movs	r6, #0
 800409a:	4d0a      	ldr	r5, [pc, #40]	; (80040c4 <__libc_init_array+0x40>)
 800409c:	4c0a      	ldr	r4, [pc, #40]	; (80040c8 <__libc_init_array+0x44>)
 800409e:	1b64      	subs	r4, r4, r5
 80040a0:	10a4      	asrs	r4, r4, #2
 80040a2:	42a6      	cmp	r6, r4
 80040a4:	d105      	bne.n	80040b2 <__libc_init_array+0x2e>
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
 80040a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ac:	4798      	blx	r3
 80040ae:	3601      	adds	r6, #1
 80040b0:	e7ee      	b.n	8004090 <__libc_init_array+0xc>
 80040b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b6:	4798      	blx	r3
 80040b8:	3601      	adds	r6, #1
 80040ba:	e7f2      	b.n	80040a2 <__libc_init_array+0x1e>
 80040bc:	08004ab0 	.word	0x08004ab0
 80040c0:	08004ab0 	.word	0x08004ab0
 80040c4:	08004ab0 	.word	0x08004ab0
 80040c8:	08004ab4 	.word	0x08004ab4

080040cc <memset>:
 80040cc:	4603      	mov	r3, r0
 80040ce:	4402      	add	r2, r0
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d100      	bne.n	80040d6 <memset+0xa>
 80040d4:	4770      	bx	lr
 80040d6:	f803 1b01 	strb.w	r1, [r3], #1
 80040da:	e7f9      	b.n	80040d0 <memset+0x4>

080040dc <siprintf>:
 80040dc:	b40e      	push	{r1, r2, r3}
 80040de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040e2:	b500      	push	{lr}
 80040e4:	b09c      	sub	sp, #112	; 0x70
 80040e6:	ab1d      	add	r3, sp, #116	; 0x74
 80040e8:	9002      	str	r0, [sp, #8]
 80040ea:	9006      	str	r0, [sp, #24]
 80040ec:	9107      	str	r1, [sp, #28]
 80040ee:	9104      	str	r1, [sp, #16]
 80040f0:	4808      	ldr	r0, [pc, #32]	; (8004114 <siprintf+0x38>)
 80040f2:	4909      	ldr	r1, [pc, #36]	; (8004118 <siprintf+0x3c>)
 80040f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80040f8:	9105      	str	r1, [sp, #20]
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	a902      	add	r1, sp, #8
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	f000 f868 	bl	80041d4 <_svfiprintf_r>
 8004104:	2200      	movs	r2, #0
 8004106:	9b02      	ldr	r3, [sp, #8]
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	b01c      	add	sp, #112	; 0x70
 800410c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004110:	b003      	add	sp, #12
 8004112:	4770      	bx	lr
 8004114:	20000074 	.word	0x20000074
 8004118:	ffff0208 	.word	0xffff0208

0800411c <__ssputs_r>:
 800411c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	688e      	ldr	r6, [r1, #8]
 8004122:	4682      	mov	sl, r0
 8004124:	429e      	cmp	r6, r3
 8004126:	460c      	mov	r4, r1
 8004128:	4690      	mov	r8, r2
 800412a:	461f      	mov	r7, r3
 800412c:	d838      	bhi.n	80041a0 <__ssputs_r+0x84>
 800412e:	898a      	ldrh	r2, [r1, #12]
 8004130:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004134:	d032      	beq.n	800419c <__ssputs_r+0x80>
 8004136:	6825      	ldr	r5, [r4, #0]
 8004138:	6909      	ldr	r1, [r1, #16]
 800413a:	3301      	adds	r3, #1
 800413c:	eba5 0901 	sub.w	r9, r5, r1
 8004140:	6965      	ldr	r5, [r4, #20]
 8004142:	444b      	add	r3, r9
 8004144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800414c:	106d      	asrs	r5, r5, #1
 800414e:	429d      	cmp	r5, r3
 8004150:	bf38      	it	cc
 8004152:	461d      	movcc	r5, r3
 8004154:	0553      	lsls	r3, r2, #21
 8004156:	d531      	bpl.n	80041bc <__ssputs_r+0xa0>
 8004158:	4629      	mov	r1, r5
 800415a:	f000 fb6f 	bl	800483c <_malloc_r>
 800415e:	4606      	mov	r6, r0
 8004160:	b950      	cbnz	r0, 8004178 <__ssputs_r+0x5c>
 8004162:	230c      	movs	r3, #12
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	f8ca 3000 	str.w	r3, [sl]
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004172:	81a3      	strh	r3, [r4, #12]
 8004174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004178:	464a      	mov	r2, r9
 800417a:	6921      	ldr	r1, [r4, #16]
 800417c:	f000 face 	bl	800471c <memcpy>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	6126      	str	r6, [r4, #16]
 800418e:	444e      	add	r6, r9
 8004190:	6026      	str	r6, [r4, #0]
 8004192:	463e      	mov	r6, r7
 8004194:	6165      	str	r5, [r4, #20]
 8004196:	eba5 0509 	sub.w	r5, r5, r9
 800419a:	60a5      	str	r5, [r4, #8]
 800419c:	42be      	cmp	r6, r7
 800419e:	d900      	bls.n	80041a2 <__ssputs_r+0x86>
 80041a0:	463e      	mov	r6, r7
 80041a2:	4632      	mov	r2, r6
 80041a4:	4641      	mov	r1, r8
 80041a6:	6820      	ldr	r0, [r4, #0]
 80041a8:	f000 fac6 	bl	8004738 <memmove>
 80041ac:	68a3      	ldr	r3, [r4, #8]
 80041ae:	2000      	movs	r0, #0
 80041b0:	1b9b      	subs	r3, r3, r6
 80041b2:	60a3      	str	r3, [r4, #8]
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	4433      	add	r3, r6
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	e7db      	b.n	8004174 <__ssputs_r+0x58>
 80041bc:	462a      	mov	r2, r5
 80041be:	f000 fbb1 	bl	8004924 <_realloc_r>
 80041c2:	4606      	mov	r6, r0
 80041c4:	2800      	cmp	r0, #0
 80041c6:	d1e1      	bne.n	800418c <__ssputs_r+0x70>
 80041c8:	4650      	mov	r0, sl
 80041ca:	6921      	ldr	r1, [r4, #16]
 80041cc:	f000 face 	bl	800476c <_free_r>
 80041d0:	e7c7      	b.n	8004162 <__ssputs_r+0x46>
	...

080041d4 <_svfiprintf_r>:
 80041d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d8:	4698      	mov	r8, r3
 80041da:	898b      	ldrh	r3, [r1, #12]
 80041dc:	4607      	mov	r7, r0
 80041de:	061b      	lsls	r3, r3, #24
 80041e0:	460d      	mov	r5, r1
 80041e2:	4614      	mov	r4, r2
 80041e4:	b09d      	sub	sp, #116	; 0x74
 80041e6:	d50e      	bpl.n	8004206 <_svfiprintf_r+0x32>
 80041e8:	690b      	ldr	r3, [r1, #16]
 80041ea:	b963      	cbnz	r3, 8004206 <_svfiprintf_r+0x32>
 80041ec:	2140      	movs	r1, #64	; 0x40
 80041ee:	f000 fb25 	bl	800483c <_malloc_r>
 80041f2:	6028      	str	r0, [r5, #0]
 80041f4:	6128      	str	r0, [r5, #16]
 80041f6:	b920      	cbnz	r0, 8004202 <_svfiprintf_r+0x2e>
 80041f8:	230c      	movs	r3, #12
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004200:	e0d1      	b.n	80043a6 <_svfiprintf_r+0x1d2>
 8004202:	2340      	movs	r3, #64	; 0x40
 8004204:	616b      	str	r3, [r5, #20]
 8004206:	2300      	movs	r3, #0
 8004208:	9309      	str	r3, [sp, #36]	; 0x24
 800420a:	2320      	movs	r3, #32
 800420c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004210:	2330      	movs	r3, #48	; 0x30
 8004212:	f04f 0901 	mov.w	r9, #1
 8004216:	f8cd 800c 	str.w	r8, [sp, #12]
 800421a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80043c0 <_svfiprintf_r+0x1ec>
 800421e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004222:	4623      	mov	r3, r4
 8004224:	469a      	mov	sl, r3
 8004226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800422a:	b10a      	cbz	r2, 8004230 <_svfiprintf_r+0x5c>
 800422c:	2a25      	cmp	r2, #37	; 0x25
 800422e:	d1f9      	bne.n	8004224 <_svfiprintf_r+0x50>
 8004230:	ebba 0b04 	subs.w	fp, sl, r4
 8004234:	d00b      	beq.n	800424e <_svfiprintf_r+0x7a>
 8004236:	465b      	mov	r3, fp
 8004238:	4622      	mov	r2, r4
 800423a:	4629      	mov	r1, r5
 800423c:	4638      	mov	r0, r7
 800423e:	f7ff ff6d 	bl	800411c <__ssputs_r>
 8004242:	3001      	adds	r0, #1
 8004244:	f000 80aa 	beq.w	800439c <_svfiprintf_r+0x1c8>
 8004248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800424a:	445a      	add	r2, fp
 800424c:	9209      	str	r2, [sp, #36]	; 0x24
 800424e:	f89a 3000 	ldrb.w	r3, [sl]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80a2 	beq.w	800439c <_svfiprintf_r+0x1c8>
 8004258:	2300      	movs	r3, #0
 800425a:	f04f 32ff 	mov.w	r2, #4294967295
 800425e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004262:	f10a 0a01 	add.w	sl, sl, #1
 8004266:	9304      	str	r3, [sp, #16]
 8004268:	9307      	str	r3, [sp, #28]
 800426a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800426e:	931a      	str	r3, [sp, #104]	; 0x68
 8004270:	4654      	mov	r4, sl
 8004272:	2205      	movs	r2, #5
 8004274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004278:	4851      	ldr	r0, [pc, #324]	; (80043c0 <_svfiprintf_r+0x1ec>)
 800427a:	f000 fa41 	bl	8004700 <memchr>
 800427e:	9a04      	ldr	r2, [sp, #16]
 8004280:	b9d8      	cbnz	r0, 80042ba <_svfiprintf_r+0xe6>
 8004282:	06d0      	lsls	r0, r2, #27
 8004284:	bf44      	itt	mi
 8004286:	2320      	movmi	r3, #32
 8004288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800428c:	0711      	lsls	r1, r2, #28
 800428e:	bf44      	itt	mi
 8004290:	232b      	movmi	r3, #43	; 0x2b
 8004292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004296:	f89a 3000 	ldrb.w	r3, [sl]
 800429a:	2b2a      	cmp	r3, #42	; 0x2a
 800429c:	d015      	beq.n	80042ca <_svfiprintf_r+0xf6>
 800429e:	4654      	mov	r4, sl
 80042a0:	2000      	movs	r0, #0
 80042a2:	f04f 0c0a 	mov.w	ip, #10
 80042a6:	9a07      	ldr	r2, [sp, #28]
 80042a8:	4621      	mov	r1, r4
 80042aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042ae:	3b30      	subs	r3, #48	; 0x30
 80042b0:	2b09      	cmp	r3, #9
 80042b2:	d94e      	bls.n	8004352 <_svfiprintf_r+0x17e>
 80042b4:	b1b0      	cbz	r0, 80042e4 <_svfiprintf_r+0x110>
 80042b6:	9207      	str	r2, [sp, #28]
 80042b8:	e014      	b.n	80042e4 <_svfiprintf_r+0x110>
 80042ba:	eba0 0308 	sub.w	r3, r0, r8
 80042be:	fa09 f303 	lsl.w	r3, r9, r3
 80042c2:	4313      	orrs	r3, r2
 80042c4:	46a2      	mov	sl, r4
 80042c6:	9304      	str	r3, [sp, #16]
 80042c8:	e7d2      	b.n	8004270 <_svfiprintf_r+0x9c>
 80042ca:	9b03      	ldr	r3, [sp, #12]
 80042cc:	1d19      	adds	r1, r3, #4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	9103      	str	r1, [sp, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bfbb      	ittet	lt
 80042d6:	425b      	neglt	r3, r3
 80042d8:	f042 0202 	orrlt.w	r2, r2, #2
 80042dc:	9307      	strge	r3, [sp, #28]
 80042de:	9307      	strlt	r3, [sp, #28]
 80042e0:	bfb8      	it	lt
 80042e2:	9204      	strlt	r2, [sp, #16]
 80042e4:	7823      	ldrb	r3, [r4, #0]
 80042e6:	2b2e      	cmp	r3, #46	; 0x2e
 80042e8:	d10c      	bne.n	8004304 <_svfiprintf_r+0x130>
 80042ea:	7863      	ldrb	r3, [r4, #1]
 80042ec:	2b2a      	cmp	r3, #42	; 0x2a
 80042ee:	d135      	bne.n	800435c <_svfiprintf_r+0x188>
 80042f0:	9b03      	ldr	r3, [sp, #12]
 80042f2:	3402      	adds	r4, #2
 80042f4:	1d1a      	adds	r2, r3, #4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	9203      	str	r2, [sp, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bfb8      	it	lt
 80042fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004302:	9305      	str	r3, [sp, #20]
 8004304:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80043c4 <_svfiprintf_r+0x1f0>
 8004308:	2203      	movs	r2, #3
 800430a:	4650      	mov	r0, sl
 800430c:	7821      	ldrb	r1, [r4, #0]
 800430e:	f000 f9f7 	bl	8004700 <memchr>
 8004312:	b140      	cbz	r0, 8004326 <_svfiprintf_r+0x152>
 8004314:	2340      	movs	r3, #64	; 0x40
 8004316:	eba0 000a 	sub.w	r0, r0, sl
 800431a:	fa03 f000 	lsl.w	r0, r3, r0
 800431e:	9b04      	ldr	r3, [sp, #16]
 8004320:	3401      	adds	r4, #1
 8004322:	4303      	orrs	r3, r0
 8004324:	9304      	str	r3, [sp, #16]
 8004326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800432a:	2206      	movs	r2, #6
 800432c:	4826      	ldr	r0, [pc, #152]	; (80043c8 <_svfiprintf_r+0x1f4>)
 800432e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004332:	f000 f9e5 	bl	8004700 <memchr>
 8004336:	2800      	cmp	r0, #0
 8004338:	d038      	beq.n	80043ac <_svfiprintf_r+0x1d8>
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <_svfiprintf_r+0x1f8>)
 800433c:	bb1b      	cbnz	r3, 8004386 <_svfiprintf_r+0x1b2>
 800433e:	9b03      	ldr	r3, [sp, #12]
 8004340:	3307      	adds	r3, #7
 8004342:	f023 0307 	bic.w	r3, r3, #7
 8004346:	3308      	adds	r3, #8
 8004348:	9303      	str	r3, [sp, #12]
 800434a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800434c:	4433      	add	r3, r6
 800434e:	9309      	str	r3, [sp, #36]	; 0x24
 8004350:	e767      	b.n	8004222 <_svfiprintf_r+0x4e>
 8004352:	460c      	mov	r4, r1
 8004354:	2001      	movs	r0, #1
 8004356:	fb0c 3202 	mla	r2, ip, r2, r3
 800435a:	e7a5      	b.n	80042a8 <_svfiprintf_r+0xd4>
 800435c:	2300      	movs	r3, #0
 800435e:	f04f 0c0a 	mov.w	ip, #10
 8004362:	4619      	mov	r1, r3
 8004364:	3401      	adds	r4, #1
 8004366:	9305      	str	r3, [sp, #20]
 8004368:	4620      	mov	r0, r4
 800436a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800436e:	3a30      	subs	r2, #48	; 0x30
 8004370:	2a09      	cmp	r2, #9
 8004372:	d903      	bls.n	800437c <_svfiprintf_r+0x1a8>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0c5      	beq.n	8004304 <_svfiprintf_r+0x130>
 8004378:	9105      	str	r1, [sp, #20]
 800437a:	e7c3      	b.n	8004304 <_svfiprintf_r+0x130>
 800437c:	4604      	mov	r4, r0
 800437e:	2301      	movs	r3, #1
 8004380:	fb0c 2101 	mla	r1, ip, r1, r2
 8004384:	e7f0      	b.n	8004368 <_svfiprintf_r+0x194>
 8004386:	ab03      	add	r3, sp, #12
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	462a      	mov	r2, r5
 800438c:	4638      	mov	r0, r7
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <_svfiprintf_r+0x1fc>)
 8004390:	a904      	add	r1, sp, #16
 8004392:	f3af 8000 	nop.w
 8004396:	1c42      	adds	r2, r0, #1
 8004398:	4606      	mov	r6, r0
 800439a:	d1d6      	bne.n	800434a <_svfiprintf_r+0x176>
 800439c:	89ab      	ldrh	r3, [r5, #12]
 800439e:	065b      	lsls	r3, r3, #25
 80043a0:	f53f af2c 	bmi.w	80041fc <_svfiprintf_r+0x28>
 80043a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043a6:	b01d      	add	sp, #116	; 0x74
 80043a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ac:	ab03      	add	r3, sp, #12
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	462a      	mov	r2, r5
 80043b2:	4638      	mov	r0, r7
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <_svfiprintf_r+0x1fc>)
 80043b6:	a904      	add	r1, sp, #16
 80043b8:	f000 f87c 	bl	80044b4 <_printf_i>
 80043bc:	e7eb      	b.n	8004396 <_svfiprintf_r+0x1c2>
 80043be:	bf00      	nop
 80043c0:	08004a7c 	.word	0x08004a7c
 80043c4:	08004a82 	.word	0x08004a82
 80043c8:	08004a86 	.word	0x08004a86
 80043cc:	00000000 	.word	0x00000000
 80043d0:	0800411d 	.word	0x0800411d

080043d4 <_printf_common>:
 80043d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d8:	4616      	mov	r6, r2
 80043da:	4699      	mov	r9, r3
 80043dc:	688a      	ldr	r2, [r1, #8]
 80043de:	690b      	ldr	r3, [r1, #16]
 80043e0:	4607      	mov	r7, r0
 80043e2:	4293      	cmp	r3, r2
 80043e4:	bfb8      	it	lt
 80043e6:	4613      	movlt	r3, r2
 80043e8:	6033      	str	r3, [r6, #0]
 80043ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043ee:	460c      	mov	r4, r1
 80043f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043f4:	b10a      	cbz	r2, 80043fa <_printf_common+0x26>
 80043f6:	3301      	adds	r3, #1
 80043f8:	6033      	str	r3, [r6, #0]
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	0699      	lsls	r1, r3, #26
 80043fe:	bf42      	ittt	mi
 8004400:	6833      	ldrmi	r3, [r6, #0]
 8004402:	3302      	addmi	r3, #2
 8004404:	6033      	strmi	r3, [r6, #0]
 8004406:	6825      	ldr	r5, [r4, #0]
 8004408:	f015 0506 	ands.w	r5, r5, #6
 800440c:	d106      	bne.n	800441c <_printf_common+0x48>
 800440e:	f104 0a19 	add.w	sl, r4, #25
 8004412:	68e3      	ldr	r3, [r4, #12]
 8004414:	6832      	ldr	r2, [r6, #0]
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	42ab      	cmp	r3, r5
 800441a:	dc28      	bgt.n	800446e <_printf_common+0x9a>
 800441c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004420:	1e13      	subs	r3, r2, #0
 8004422:	6822      	ldr	r2, [r4, #0]
 8004424:	bf18      	it	ne
 8004426:	2301      	movne	r3, #1
 8004428:	0692      	lsls	r2, r2, #26
 800442a:	d42d      	bmi.n	8004488 <_printf_common+0xb4>
 800442c:	4649      	mov	r1, r9
 800442e:	4638      	mov	r0, r7
 8004430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004434:	47c0      	blx	r8
 8004436:	3001      	adds	r0, #1
 8004438:	d020      	beq.n	800447c <_printf_common+0xa8>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	68e5      	ldr	r5, [r4, #12]
 800443e:	f003 0306 	and.w	r3, r3, #6
 8004442:	2b04      	cmp	r3, #4
 8004444:	bf18      	it	ne
 8004446:	2500      	movne	r5, #0
 8004448:	6832      	ldr	r2, [r6, #0]
 800444a:	f04f 0600 	mov.w	r6, #0
 800444e:	68a3      	ldr	r3, [r4, #8]
 8004450:	bf08      	it	eq
 8004452:	1aad      	subeq	r5, r5, r2
 8004454:	6922      	ldr	r2, [r4, #16]
 8004456:	bf08      	it	eq
 8004458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800445c:	4293      	cmp	r3, r2
 800445e:	bfc4      	itt	gt
 8004460:	1a9b      	subgt	r3, r3, r2
 8004462:	18ed      	addgt	r5, r5, r3
 8004464:	341a      	adds	r4, #26
 8004466:	42b5      	cmp	r5, r6
 8004468:	d11a      	bne.n	80044a0 <_printf_common+0xcc>
 800446a:	2000      	movs	r0, #0
 800446c:	e008      	b.n	8004480 <_printf_common+0xac>
 800446e:	2301      	movs	r3, #1
 8004470:	4652      	mov	r2, sl
 8004472:	4649      	mov	r1, r9
 8004474:	4638      	mov	r0, r7
 8004476:	47c0      	blx	r8
 8004478:	3001      	adds	r0, #1
 800447a:	d103      	bne.n	8004484 <_printf_common+0xb0>
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004484:	3501      	adds	r5, #1
 8004486:	e7c4      	b.n	8004412 <_printf_common+0x3e>
 8004488:	2030      	movs	r0, #48	; 0x30
 800448a:	18e1      	adds	r1, r4, r3
 800448c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004496:	4422      	add	r2, r4
 8004498:	3302      	adds	r3, #2
 800449a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800449e:	e7c5      	b.n	800442c <_printf_common+0x58>
 80044a0:	2301      	movs	r3, #1
 80044a2:	4622      	mov	r2, r4
 80044a4:	4649      	mov	r1, r9
 80044a6:	4638      	mov	r0, r7
 80044a8:	47c0      	blx	r8
 80044aa:	3001      	adds	r0, #1
 80044ac:	d0e6      	beq.n	800447c <_printf_common+0xa8>
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7d9      	b.n	8004466 <_printf_common+0x92>
	...

080044b4 <_printf_i>:
 80044b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044b8:	7e0f      	ldrb	r7, [r1, #24]
 80044ba:	4691      	mov	r9, r2
 80044bc:	2f78      	cmp	r7, #120	; 0x78
 80044be:	4680      	mov	r8, r0
 80044c0:	460c      	mov	r4, r1
 80044c2:	469a      	mov	sl, r3
 80044c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ca:	d807      	bhi.n	80044dc <_printf_i+0x28>
 80044cc:	2f62      	cmp	r7, #98	; 0x62
 80044ce:	d80a      	bhi.n	80044e6 <_printf_i+0x32>
 80044d0:	2f00      	cmp	r7, #0
 80044d2:	f000 80d9 	beq.w	8004688 <_printf_i+0x1d4>
 80044d6:	2f58      	cmp	r7, #88	; 0x58
 80044d8:	f000 80a4 	beq.w	8004624 <_printf_i+0x170>
 80044dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044e4:	e03a      	b.n	800455c <_printf_i+0xa8>
 80044e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044ea:	2b15      	cmp	r3, #21
 80044ec:	d8f6      	bhi.n	80044dc <_printf_i+0x28>
 80044ee:	a101      	add	r1, pc, #4	; (adr r1, 80044f4 <_printf_i+0x40>)
 80044f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044f4:	0800454d 	.word	0x0800454d
 80044f8:	08004561 	.word	0x08004561
 80044fc:	080044dd 	.word	0x080044dd
 8004500:	080044dd 	.word	0x080044dd
 8004504:	080044dd 	.word	0x080044dd
 8004508:	080044dd 	.word	0x080044dd
 800450c:	08004561 	.word	0x08004561
 8004510:	080044dd 	.word	0x080044dd
 8004514:	080044dd 	.word	0x080044dd
 8004518:	080044dd 	.word	0x080044dd
 800451c:	080044dd 	.word	0x080044dd
 8004520:	0800466f 	.word	0x0800466f
 8004524:	08004591 	.word	0x08004591
 8004528:	08004651 	.word	0x08004651
 800452c:	080044dd 	.word	0x080044dd
 8004530:	080044dd 	.word	0x080044dd
 8004534:	08004691 	.word	0x08004691
 8004538:	080044dd 	.word	0x080044dd
 800453c:	08004591 	.word	0x08004591
 8004540:	080044dd 	.word	0x080044dd
 8004544:	080044dd 	.word	0x080044dd
 8004548:	08004659 	.word	0x08004659
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	602a      	str	r2, [r5, #0]
 8004554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800455c:	2301      	movs	r3, #1
 800455e:	e0a4      	b.n	80046aa <_printf_i+0x1f6>
 8004560:	6820      	ldr	r0, [r4, #0]
 8004562:	6829      	ldr	r1, [r5, #0]
 8004564:	0606      	lsls	r6, r0, #24
 8004566:	f101 0304 	add.w	r3, r1, #4
 800456a:	d50a      	bpl.n	8004582 <_printf_i+0xce>
 800456c:	680e      	ldr	r6, [r1, #0]
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	2e00      	cmp	r6, #0
 8004572:	da03      	bge.n	800457c <_printf_i+0xc8>
 8004574:	232d      	movs	r3, #45	; 0x2d
 8004576:	4276      	negs	r6, r6
 8004578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457c:	230a      	movs	r3, #10
 800457e:	485e      	ldr	r0, [pc, #376]	; (80046f8 <_printf_i+0x244>)
 8004580:	e019      	b.n	80045b6 <_printf_i+0x102>
 8004582:	680e      	ldr	r6, [r1, #0]
 8004584:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004588:	602b      	str	r3, [r5, #0]
 800458a:	bf18      	it	ne
 800458c:	b236      	sxthne	r6, r6
 800458e:	e7ef      	b.n	8004570 <_printf_i+0xbc>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	6820      	ldr	r0, [r4, #0]
 8004594:	1d19      	adds	r1, r3, #4
 8004596:	6029      	str	r1, [r5, #0]
 8004598:	0601      	lsls	r1, r0, #24
 800459a:	d501      	bpl.n	80045a0 <_printf_i+0xec>
 800459c:	681e      	ldr	r6, [r3, #0]
 800459e:	e002      	b.n	80045a6 <_printf_i+0xf2>
 80045a0:	0646      	lsls	r6, r0, #25
 80045a2:	d5fb      	bpl.n	800459c <_printf_i+0xe8>
 80045a4:	881e      	ldrh	r6, [r3, #0]
 80045a6:	2f6f      	cmp	r7, #111	; 0x6f
 80045a8:	bf0c      	ite	eq
 80045aa:	2308      	moveq	r3, #8
 80045ac:	230a      	movne	r3, #10
 80045ae:	4852      	ldr	r0, [pc, #328]	; (80046f8 <_printf_i+0x244>)
 80045b0:	2100      	movs	r1, #0
 80045b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045b6:	6865      	ldr	r5, [r4, #4]
 80045b8:	2d00      	cmp	r5, #0
 80045ba:	bfa8      	it	ge
 80045bc:	6821      	ldrge	r1, [r4, #0]
 80045be:	60a5      	str	r5, [r4, #8]
 80045c0:	bfa4      	itt	ge
 80045c2:	f021 0104 	bicge.w	r1, r1, #4
 80045c6:	6021      	strge	r1, [r4, #0]
 80045c8:	b90e      	cbnz	r6, 80045ce <_printf_i+0x11a>
 80045ca:	2d00      	cmp	r5, #0
 80045cc:	d04d      	beq.n	800466a <_printf_i+0x1b6>
 80045ce:	4615      	mov	r5, r2
 80045d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80045d4:	fb03 6711 	mls	r7, r3, r1, r6
 80045d8:	5dc7      	ldrb	r7, [r0, r7]
 80045da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045de:	4637      	mov	r7, r6
 80045e0:	42bb      	cmp	r3, r7
 80045e2:	460e      	mov	r6, r1
 80045e4:	d9f4      	bls.n	80045d0 <_printf_i+0x11c>
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d10b      	bne.n	8004602 <_printf_i+0x14e>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	07de      	lsls	r6, r3, #31
 80045ee:	d508      	bpl.n	8004602 <_printf_i+0x14e>
 80045f0:	6923      	ldr	r3, [r4, #16]
 80045f2:	6861      	ldr	r1, [r4, #4]
 80045f4:	4299      	cmp	r1, r3
 80045f6:	bfde      	ittt	le
 80045f8:	2330      	movle	r3, #48	; 0x30
 80045fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004602:	1b52      	subs	r2, r2, r5
 8004604:	6122      	str	r2, [r4, #16]
 8004606:	464b      	mov	r3, r9
 8004608:	4621      	mov	r1, r4
 800460a:	4640      	mov	r0, r8
 800460c:	f8cd a000 	str.w	sl, [sp]
 8004610:	aa03      	add	r2, sp, #12
 8004612:	f7ff fedf 	bl	80043d4 <_printf_common>
 8004616:	3001      	adds	r0, #1
 8004618:	d14c      	bne.n	80046b4 <_printf_i+0x200>
 800461a:	f04f 30ff 	mov.w	r0, #4294967295
 800461e:	b004      	add	sp, #16
 8004620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004624:	4834      	ldr	r0, [pc, #208]	; (80046f8 <_printf_i+0x244>)
 8004626:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800462a:	6829      	ldr	r1, [r5, #0]
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004632:	6029      	str	r1, [r5, #0]
 8004634:	061d      	lsls	r5, r3, #24
 8004636:	d514      	bpl.n	8004662 <_printf_i+0x1ae>
 8004638:	07df      	lsls	r7, r3, #31
 800463a:	bf44      	itt	mi
 800463c:	f043 0320 	orrmi.w	r3, r3, #32
 8004640:	6023      	strmi	r3, [r4, #0]
 8004642:	b91e      	cbnz	r6, 800464c <_printf_i+0x198>
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	f023 0320 	bic.w	r3, r3, #32
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	2310      	movs	r3, #16
 800464e:	e7af      	b.n	80045b0 <_printf_i+0xfc>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	f043 0320 	orr.w	r3, r3, #32
 8004656:	6023      	str	r3, [r4, #0]
 8004658:	2378      	movs	r3, #120	; 0x78
 800465a:	4828      	ldr	r0, [pc, #160]	; (80046fc <_printf_i+0x248>)
 800465c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004660:	e7e3      	b.n	800462a <_printf_i+0x176>
 8004662:	0659      	lsls	r1, r3, #25
 8004664:	bf48      	it	mi
 8004666:	b2b6      	uxthmi	r6, r6
 8004668:	e7e6      	b.n	8004638 <_printf_i+0x184>
 800466a:	4615      	mov	r5, r2
 800466c:	e7bb      	b.n	80045e6 <_printf_i+0x132>
 800466e:	682b      	ldr	r3, [r5, #0]
 8004670:	6826      	ldr	r6, [r4, #0]
 8004672:	1d18      	adds	r0, r3, #4
 8004674:	6961      	ldr	r1, [r4, #20]
 8004676:	6028      	str	r0, [r5, #0]
 8004678:	0635      	lsls	r5, r6, #24
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	d501      	bpl.n	8004682 <_printf_i+0x1ce>
 800467e:	6019      	str	r1, [r3, #0]
 8004680:	e002      	b.n	8004688 <_printf_i+0x1d4>
 8004682:	0670      	lsls	r0, r6, #25
 8004684:	d5fb      	bpl.n	800467e <_printf_i+0x1ca>
 8004686:	8019      	strh	r1, [r3, #0]
 8004688:	2300      	movs	r3, #0
 800468a:	4615      	mov	r5, r2
 800468c:	6123      	str	r3, [r4, #16]
 800468e:	e7ba      	b.n	8004606 <_printf_i+0x152>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	2100      	movs	r1, #0
 8004694:	1d1a      	adds	r2, r3, #4
 8004696:	602a      	str	r2, [r5, #0]
 8004698:	681d      	ldr	r5, [r3, #0]
 800469a:	6862      	ldr	r2, [r4, #4]
 800469c:	4628      	mov	r0, r5
 800469e:	f000 f82f 	bl	8004700 <memchr>
 80046a2:	b108      	cbz	r0, 80046a8 <_printf_i+0x1f4>
 80046a4:	1b40      	subs	r0, r0, r5
 80046a6:	6060      	str	r0, [r4, #4]
 80046a8:	6863      	ldr	r3, [r4, #4]
 80046aa:	6123      	str	r3, [r4, #16]
 80046ac:	2300      	movs	r3, #0
 80046ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b2:	e7a8      	b.n	8004606 <_printf_i+0x152>
 80046b4:	462a      	mov	r2, r5
 80046b6:	4649      	mov	r1, r9
 80046b8:	4640      	mov	r0, r8
 80046ba:	6923      	ldr	r3, [r4, #16]
 80046bc:	47d0      	blx	sl
 80046be:	3001      	adds	r0, #1
 80046c0:	d0ab      	beq.n	800461a <_printf_i+0x166>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	079b      	lsls	r3, r3, #30
 80046c6:	d413      	bmi.n	80046f0 <_printf_i+0x23c>
 80046c8:	68e0      	ldr	r0, [r4, #12]
 80046ca:	9b03      	ldr	r3, [sp, #12]
 80046cc:	4298      	cmp	r0, r3
 80046ce:	bfb8      	it	lt
 80046d0:	4618      	movlt	r0, r3
 80046d2:	e7a4      	b.n	800461e <_printf_i+0x16a>
 80046d4:	2301      	movs	r3, #1
 80046d6:	4632      	mov	r2, r6
 80046d8:	4649      	mov	r1, r9
 80046da:	4640      	mov	r0, r8
 80046dc:	47d0      	blx	sl
 80046de:	3001      	adds	r0, #1
 80046e0:	d09b      	beq.n	800461a <_printf_i+0x166>
 80046e2:	3501      	adds	r5, #1
 80046e4:	68e3      	ldr	r3, [r4, #12]
 80046e6:	9903      	ldr	r1, [sp, #12]
 80046e8:	1a5b      	subs	r3, r3, r1
 80046ea:	42ab      	cmp	r3, r5
 80046ec:	dcf2      	bgt.n	80046d4 <_printf_i+0x220>
 80046ee:	e7eb      	b.n	80046c8 <_printf_i+0x214>
 80046f0:	2500      	movs	r5, #0
 80046f2:	f104 0619 	add.w	r6, r4, #25
 80046f6:	e7f5      	b.n	80046e4 <_printf_i+0x230>
 80046f8:	08004a8d 	.word	0x08004a8d
 80046fc:	08004a9e 	.word	0x08004a9e

08004700 <memchr>:
 8004700:	4603      	mov	r3, r0
 8004702:	b510      	push	{r4, lr}
 8004704:	b2c9      	uxtb	r1, r1
 8004706:	4402      	add	r2, r0
 8004708:	4293      	cmp	r3, r2
 800470a:	4618      	mov	r0, r3
 800470c:	d101      	bne.n	8004712 <memchr+0x12>
 800470e:	2000      	movs	r0, #0
 8004710:	e003      	b.n	800471a <memchr+0x1a>
 8004712:	7804      	ldrb	r4, [r0, #0]
 8004714:	3301      	adds	r3, #1
 8004716:	428c      	cmp	r4, r1
 8004718:	d1f6      	bne.n	8004708 <memchr+0x8>
 800471a:	bd10      	pop	{r4, pc}

0800471c <memcpy>:
 800471c:	440a      	add	r2, r1
 800471e:	4291      	cmp	r1, r2
 8004720:	f100 33ff 	add.w	r3, r0, #4294967295
 8004724:	d100      	bne.n	8004728 <memcpy+0xc>
 8004726:	4770      	bx	lr
 8004728:	b510      	push	{r4, lr}
 800472a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800472e:	4291      	cmp	r1, r2
 8004730:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004734:	d1f9      	bne.n	800472a <memcpy+0xe>
 8004736:	bd10      	pop	{r4, pc}

08004738 <memmove>:
 8004738:	4288      	cmp	r0, r1
 800473a:	b510      	push	{r4, lr}
 800473c:	eb01 0402 	add.w	r4, r1, r2
 8004740:	d902      	bls.n	8004748 <memmove+0x10>
 8004742:	4284      	cmp	r4, r0
 8004744:	4623      	mov	r3, r4
 8004746:	d807      	bhi.n	8004758 <memmove+0x20>
 8004748:	1e43      	subs	r3, r0, #1
 800474a:	42a1      	cmp	r1, r4
 800474c:	d008      	beq.n	8004760 <memmove+0x28>
 800474e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004756:	e7f8      	b.n	800474a <memmove+0x12>
 8004758:	4601      	mov	r1, r0
 800475a:	4402      	add	r2, r0
 800475c:	428a      	cmp	r2, r1
 800475e:	d100      	bne.n	8004762 <memmove+0x2a>
 8004760:	bd10      	pop	{r4, pc}
 8004762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800476a:	e7f7      	b.n	800475c <memmove+0x24>

0800476c <_free_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4605      	mov	r5, r0
 8004770:	2900      	cmp	r1, #0
 8004772:	d040      	beq.n	80047f6 <_free_r+0x8a>
 8004774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004778:	1f0c      	subs	r4, r1, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	bfb8      	it	lt
 800477e:	18e4      	addlt	r4, r4, r3
 8004780:	f000 f910 	bl	80049a4 <__malloc_lock>
 8004784:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <_free_r+0x8c>)
 8004786:	6813      	ldr	r3, [r2, #0]
 8004788:	b933      	cbnz	r3, 8004798 <_free_r+0x2c>
 800478a:	6063      	str	r3, [r4, #4]
 800478c:	6014      	str	r4, [r2, #0]
 800478e:	4628      	mov	r0, r5
 8004790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004794:	f000 b90c 	b.w	80049b0 <__malloc_unlock>
 8004798:	42a3      	cmp	r3, r4
 800479a:	d908      	bls.n	80047ae <_free_r+0x42>
 800479c:	6820      	ldr	r0, [r4, #0]
 800479e:	1821      	adds	r1, r4, r0
 80047a0:	428b      	cmp	r3, r1
 80047a2:	bf01      	itttt	eq
 80047a4:	6819      	ldreq	r1, [r3, #0]
 80047a6:	685b      	ldreq	r3, [r3, #4]
 80047a8:	1809      	addeq	r1, r1, r0
 80047aa:	6021      	streq	r1, [r4, #0]
 80047ac:	e7ed      	b.n	800478a <_free_r+0x1e>
 80047ae:	461a      	mov	r2, r3
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	b10b      	cbz	r3, 80047b8 <_free_r+0x4c>
 80047b4:	42a3      	cmp	r3, r4
 80047b6:	d9fa      	bls.n	80047ae <_free_r+0x42>
 80047b8:	6811      	ldr	r1, [r2, #0]
 80047ba:	1850      	adds	r0, r2, r1
 80047bc:	42a0      	cmp	r0, r4
 80047be:	d10b      	bne.n	80047d8 <_free_r+0x6c>
 80047c0:	6820      	ldr	r0, [r4, #0]
 80047c2:	4401      	add	r1, r0
 80047c4:	1850      	adds	r0, r2, r1
 80047c6:	4283      	cmp	r3, r0
 80047c8:	6011      	str	r1, [r2, #0]
 80047ca:	d1e0      	bne.n	800478e <_free_r+0x22>
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4401      	add	r1, r0
 80047d2:	6011      	str	r1, [r2, #0]
 80047d4:	6053      	str	r3, [r2, #4]
 80047d6:	e7da      	b.n	800478e <_free_r+0x22>
 80047d8:	d902      	bls.n	80047e0 <_free_r+0x74>
 80047da:	230c      	movs	r3, #12
 80047dc:	602b      	str	r3, [r5, #0]
 80047de:	e7d6      	b.n	800478e <_free_r+0x22>
 80047e0:	6820      	ldr	r0, [r4, #0]
 80047e2:	1821      	adds	r1, r4, r0
 80047e4:	428b      	cmp	r3, r1
 80047e6:	bf01      	itttt	eq
 80047e8:	6819      	ldreq	r1, [r3, #0]
 80047ea:	685b      	ldreq	r3, [r3, #4]
 80047ec:	1809      	addeq	r1, r1, r0
 80047ee:	6021      	streq	r1, [r4, #0]
 80047f0:	6063      	str	r3, [r4, #4]
 80047f2:	6054      	str	r4, [r2, #4]
 80047f4:	e7cb      	b.n	800478e <_free_r+0x22>
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	20000270 	.word	0x20000270

080047fc <sbrk_aligned>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4e0e      	ldr	r6, [pc, #56]	; (8004838 <sbrk_aligned+0x3c>)
 8004800:	460c      	mov	r4, r1
 8004802:	6831      	ldr	r1, [r6, #0]
 8004804:	4605      	mov	r5, r0
 8004806:	b911      	cbnz	r1, 800480e <sbrk_aligned+0x12>
 8004808:	f000 f8bc 	bl	8004984 <_sbrk_r>
 800480c:	6030      	str	r0, [r6, #0]
 800480e:	4621      	mov	r1, r4
 8004810:	4628      	mov	r0, r5
 8004812:	f000 f8b7 	bl	8004984 <_sbrk_r>
 8004816:	1c43      	adds	r3, r0, #1
 8004818:	d00a      	beq.n	8004830 <sbrk_aligned+0x34>
 800481a:	1cc4      	adds	r4, r0, #3
 800481c:	f024 0403 	bic.w	r4, r4, #3
 8004820:	42a0      	cmp	r0, r4
 8004822:	d007      	beq.n	8004834 <sbrk_aligned+0x38>
 8004824:	1a21      	subs	r1, r4, r0
 8004826:	4628      	mov	r0, r5
 8004828:	f000 f8ac 	bl	8004984 <_sbrk_r>
 800482c:	3001      	adds	r0, #1
 800482e:	d101      	bne.n	8004834 <sbrk_aligned+0x38>
 8004830:	f04f 34ff 	mov.w	r4, #4294967295
 8004834:	4620      	mov	r0, r4
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	20000274 	.word	0x20000274

0800483c <_malloc_r>:
 800483c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004840:	1ccd      	adds	r5, r1, #3
 8004842:	f025 0503 	bic.w	r5, r5, #3
 8004846:	3508      	adds	r5, #8
 8004848:	2d0c      	cmp	r5, #12
 800484a:	bf38      	it	cc
 800484c:	250c      	movcc	r5, #12
 800484e:	2d00      	cmp	r5, #0
 8004850:	4607      	mov	r7, r0
 8004852:	db01      	blt.n	8004858 <_malloc_r+0x1c>
 8004854:	42a9      	cmp	r1, r5
 8004856:	d905      	bls.n	8004864 <_malloc_r+0x28>
 8004858:	230c      	movs	r3, #12
 800485a:	2600      	movs	r6, #0
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	4630      	mov	r0, r6
 8004860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004864:	4e2e      	ldr	r6, [pc, #184]	; (8004920 <_malloc_r+0xe4>)
 8004866:	f000 f89d 	bl	80049a4 <__malloc_lock>
 800486a:	6833      	ldr	r3, [r6, #0]
 800486c:	461c      	mov	r4, r3
 800486e:	bb34      	cbnz	r4, 80048be <_malloc_r+0x82>
 8004870:	4629      	mov	r1, r5
 8004872:	4638      	mov	r0, r7
 8004874:	f7ff ffc2 	bl	80047fc <sbrk_aligned>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	4604      	mov	r4, r0
 800487c:	d14d      	bne.n	800491a <_malloc_r+0xde>
 800487e:	6834      	ldr	r4, [r6, #0]
 8004880:	4626      	mov	r6, r4
 8004882:	2e00      	cmp	r6, #0
 8004884:	d140      	bne.n	8004908 <_malloc_r+0xcc>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	4631      	mov	r1, r6
 800488a:	4638      	mov	r0, r7
 800488c:	eb04 0803 	add.w	r8, r4, r3
 8004890:	f000 f878 	bl	8004984 <_sbrk_r>
 8004894:	4580      	cmp	r8, r0
 8004896:	d13a      	bne.n	800490e <_malloc_r+0xd2>
 8004898:	6821      	ldr	r1, [r4, #0]
 800489a:	3503      	adds	r5, #3
 800489c:	1a6d      	subs	r5, r5, r1
 800489e:	f025 0503 	bic.w	r5, r5, #3
 80048a2:	3508      	adds	r5, #8
 80048a4:	2d0c      	cmp	r5, #12
 80048a6:	bf38      	it	cc
 80048a8:	250c      	movcc	r5, #12
 80048aa:	4638      	mov	r0, r7
 80048ac:	4629      	mov	r1, r5
 80048ae:	f7ff ffa5 	bl	80047fc <sbrk_aligned>
 80048b2:	3001      	adds	r0, #1
 80048b4:	d02b      	beq.n	800490e <_malloc_r+0xd2>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	442b      	add	r3, r5
 80048ba:	6023      	str	r3, [r4, #0]
 80048bc:	e00e      	b.n	80048dc <_malloc_r+0xa0>
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	1b52      	subs	r2, r2, r5
 80048c2:	d41e      	bmi.n	8004902 <_malloc_r+0xc6>
 80048c4:	2a0b      	cmp	r2, #11
 80048c6:	d916      	bls.n	80048f6 <_malloc_r+0xba>
 80048c8:	1961      	adds	r1, r4, r5
 80048ca:	42a3      	cmp	r3, r4
 80048cc:	6025      	str	r5, [r4, #0]
 80048ce:	bf18      	it	ne
 80048d0:	6059      	strne	r1, [r3, #4]
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	bf08      	it	eq
 80048d6:	6031      	streq	r1, [r6, #0]
 80048d8:	5162      	str	r2, [r4, r5]
 80048da:	604b      	str	r3, [r1, #4]
 80048dc:	4638      	mov	r0, r7
 80048de:	f104 060b 	add.w	r6, r4, #11
 80048e2:	f000 f865 	bl	80049b0 <__malloc_unlock>
 80048e6:	f026 0607 	bic.w	r6, r6, #7
 80048ea:	1d23      	adds	r3, r4, #4
 80048ec:	1af2      	subs	r2, r6, r3
 80048ee:	d0b6      	beq.n	800485e <_malloc_r+0x22>
 80048f0:	1b9b      	subs	r3, r3, r6
 80048f2:	50a3      	str	r3, [r4, r2]
 80048f4:	e7b3      	b.n	800485e <_malloc_r+0x22>
 80048f6:	6862      	ldr	r2, [r4, #4]
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	bf0c      	ite	eq
 80048fc:	6032      	streq	r2, [r6, #0]
 80048fe:	605a      	strne	r2, [r3, #4]
 8004900:	e7ec      	b.n	80048dc <_malloc_r+0xa0>
 8004902:	4623      	mov	r3, r4
 8004904:	6864      	ldr	r4, [r4, #4]
 8004906:	e7b2      	b.n	800486e <_malloc_r+0x32>
 8004908:	4634      	mov	r4, r6
 800490a:	6876      	ldr	r6, [r6, #4]
 800490c:	e7b9      	b.n	8004882 <_malloc_r+0x46>
 800490e:	230c      	movs	r3, #12
 8004910:	4638      	mov	r0, r7
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	f000 f84c 	bl	80049b0 <__malloc_unlock>
 8004918:	e7a1      	b.n	800485e <_malloc_r+0x22>
 800491a:	6025      	str	r5, [r4, #0]
 800491c:	e7de      	b.n	80048dc <_malloc_r+0xa0>
 800491e:	bf00      	nop
 8004920:	20000270 	.word	0x20000270

08004924 <_realloc_r>:
 8004924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	4680      	mov	r8, r0
 800492a:	4614      	mov	r4, r2
 800492c:	460e      	mov	r6, r1
 800492e:	b921      	cbnz	r1, 800493a <_realloc_r+0x16>
 8004930:	4611      	mov	r1, r2
 8004932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004936:	f7ff bf81 	b.w	800483c <_malloc_r>
 800493a:	b92a      	cbnz	r2, 8004948 <_realloc_r+0x24>
 800493c:	f7ff ff16 	bl	800476c <_free_r>
 8004940:	4625      	mov	r5, r4
 8004942:	4628      	mov	r0, r5
 8004944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004948:	f000 f838 	bl	80049bc <_malloc_usable_size_r>
 800494c:	4284      	cmp	r4, r0
 800494e:	4607      	mov	r7, r0
 8004950:	d802      	bhi.n	8004958 <_realloc_r+0x34>
 8004952:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004956:	d812      	bhi.n	800497e <_realloc_r+0x5a>
 8004958:	4621      	mov	r1, r4
 800495a:	4640      	mov	r0, r8
 800495c:	f7ff ff6e 	bl	800483c <_malloc_r>
 8004960:	4605      	mov	r5, r0
 8004962:	2800      	cmp	r0, #0
 8004964:	d0ed      	beq.n	8004942 <_realloc_r+0x1e>
 8004966:	42bc      	cmp	r4, r7
 8004968:	4622      	mov	r2, r4
 800496a:	4631      	mov	r1, r6
 800496c:	bf28      	it	cs
 800496e:	463a      	movcs	r2, r7
 8004970:	f7ff fed4 	bl	800471c <memcpy>
 8004974:	4631      	mov	r1, r6
 8004976:	4640      	mov	r0, r8
 8004978:	f7ff fef8 	bl	800476c <_free_r>
 800497c:	e7e1      	b.n	8004942 <_realloc_r+0x1e>
 800497e:	4635      	mov	r5, r6
 8004980:	e7df      	b.n	8004942 <_realloc_r+0x1e>
	...

08004984 <_sbrk_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	2300      	movs	r3, #0
 8004988:	4d05      	ldr	r5, [pc, #20]	; (80049a0 <_sbrk_r+0x1c>)
 800498a:	4604      	mov	r4, r0
 800498c:	4608      	mov	r0, r1
 800498e:	602b      	str	r3, [r5, #0]
 8004990:	f7fc fdb4 	bl	80014fc <_sbrk>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	d102      	bne.n	800499e <_sbrk_r+0x1a>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	b103      	cbz	r3, 800499e <_sbrk_r+0x1a>
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	bd38      	pop	{r3, r4, r5, pc}
 80049a0:	20000278 	.word	0x20000278

080049a4 <__malloc_lock>:
 80049a4:	4801      	ldr	r0, [pc, #4]	; (80049ac <__malloc_lock+0x8>)
 80049a6:	f000 b811 	b.w	80049cc <__retarget_lock_acquire_recursive>
 80049aa:	bf00      	nop
 80049ac:	2000027c 	.word	0x2000027c

080049b0 <__malloc_unlock>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__malloc_unlock+0x8>)
 80049b2:	f000 b80c 	b.w	80049ce <__retarget_lock_release_recursive>
 80049b6:	bf00      	nop
 80049b8:	2000027c 	.word	0x2000027c

080049bc <_malloc_usable_size_r>:
 80049bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c0:	1f18      	subs	r0, r3, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bfbc      	itt	lt
 80049c6:	580b      	ldrlt	r3, [r1, r0]
 80049c8:	18c0      	addlt	r0, r0, r3
 80049ca:	4770      	bx	lr

080049cc <__retarget_lock_acquire_recursive>:
 80049cc:	4770      	bx	lr

080049ce <__retarget_lock_release_recursive>:
 80049ce:	4770      	bx	lr

080049d0 <_init>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr

080049dc <_fini>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	bf00      	nop
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr
