
AssignRB02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b8c  08004b8c  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08004b8c  08004b8c  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b8c  08004b8c  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08004b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200000e0  08004c74  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08004c74  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd26  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002330  00000000  00000000  0002ce2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  0002f160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  0002ff40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c04  00000000  00000000  00030c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcf0  00000000  00000000  00049804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1e2  00000000  00000000  000594f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e46d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  000e4728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a98 	.word	0x08004a98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08004a98 	.word	0x08004a98

0800014c <LED1_OFF>:




// GROUP LED1;
void LED1_OFF(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2104      	movs	r1, #4
 8000154:	4808      	ldr	r0, [pc, #32]	; (8000178 <LED1_OFF+0x2c>)
 8000156:	f001 ff68 	bl	800202a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000160:	4805      	ldr	r0, [pc, #20]	; (8000178 <LED1_OFF+0x2c>)
 8000162:	f001 ff62 	bl	800202a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000166:	2200      	movs	r2, #0
 8000168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <LED1_OFF+0x2c>)
 800016e:	f001 ff5c 	bl	800202a <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010c00 	.word	0x40010c00

0800017c <RED1_TOGGLE>:

void RED1_TOGGLE(){
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	if (RED1 == 0){
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <RED1_TOGGLE+0x2c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d108      	bne.n	800019a <RED1_TOGGLE+0x1e>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000188:	2201      	movs	r2, #1
 800018a:	2104      	movs	r1, #4
 800018c:	4807      	ldr	r0, [pc, #28]	; (80001ac <RED1_TOGGLE+0x30>)
 800018e:	f001 ff4c 	bl	800202a <HAL_GPIO_WritePin>
		RED1 = 1;
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <RED1_TOGGLE+0x2c>)
 8000194:	2201      	movs	r2, #1
 8000196:	601a      	str	r2, [r3, #0]
	}
	else{
		LED1_OFF();
		RED1 = 0;
	}
}
 8000198:	e004      	b.n	80001a4 <RED1_TOGGLE+0x28>
		LED1_OFF();
 800019a:	f7ff ffd7 	bl	800014c <LED1_OFF>
		RED1 = 0;
 800019e:	4b02      	ldr	r3, [pc, #8]	; (80001a8 <RED1_TOGGLE+0x2c>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <YELLOW1_TOGGLE>:
void YELLOW1_TOGGLE(){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	if (YELLOW1 == 0){
 80001b4:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <YELLOW1_TOGGLE+0x30>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d109      	bne.n	80001d0 <YELLOW1_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80001bc:	2201      	movs	r2, #1
 80001be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c2:	4808      	ldr	r0, [pc, #32]	; (80001e4 <YELLOW1_TOGGLE+0x34>)
 80001c4:	f001 ff31 	bl	800202a <HAL_GPIO_WritePin>
		YELLOW1 = 1;
 80001c8:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <YELLOW1_TOGGLE+0x30>)
 80001ca:	2201      	movs	r2, #1
 80001cc:	601a      	str	r2, [r3, #0]
	}
	else{
		LED1_OFF();
		YELLOW1 = 0;
	}
}
 80001ce:	e004      	b.n	80001da <YELLOW1_TOGGLE+0x2a>
		LED1_OFF();
 80001d0:	f7ff ffbc 	bl	800014c <LED1_OFF>
		YELLOW1 = 0;
 80001d4:	4b02      	ldr	r3, [pc, #8]	; (80001e0 <YELLOW1_TOGGLE+0x30>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000100 	.word	0x20000100
 80001e4:	40010c00 	.word	0x40010c00

080001e8 <GREEN1_TOGGLE>:
void GREEN1_TOGGLE(){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	if (GREEN1 == 0){
 80001ec:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <GREEN1_TOGGLE+0x30>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d109      	bne.n	8000208 <GREEN1_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <GREEN1_TOGGLE+0x34>)
 80001fc:	f001 ff15 	bl	800202a <HAL_GPIO_WritePin>
		GREEN1 = 1;
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <GREEN1_TOGGLE+0x30>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
	}
	else{
		LED1_OFF();
		GREEN1 = 0;
	}
}
 8000206:	e004      	b.n	8000212 <GREEN1_TOGGLE+0x2a>
		LED1_OFF();
 8000208:	f7ff ffa0 	bl	800014c <LED1_OFF>
		GREEN1 = 0;
 800020c:	4b02      	ldr	r3, [pc, #8]	; (8000218 <GREEN1_TOGGLE+0x30>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000104 	.word	0x20000104
 800021c:	40010c00 	.word	0x40010c00

08000220 <LED2_OFF>:


//GROUP LED2
void LED2_OFF(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022a:	4808      	ldr	r0, [pc, #32]	; (800024c <LED2_OFF+0x2c>)
 800022c:	f001 fefd 	bl	800202a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <LED2_OFF+0x2c>)
 8000238:	f001 fef7 	bl	800202a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000242:	4802      	ldr	r0, [pc, #8]	; (800024c <LED2_OFF+0x2c>)
 8000244:	f001 fef1 	bl	800202a <HAL_GPIO_WritePin>
}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40010c00 	.word	0x40010c00

08000250 <RED2_TOGGLE>:

void RED2_TOGGLE(){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	if (RED2 == 0){
 8000254:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <RED2_TOGGLE+0x30>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d109      	bne.n	8000270 <RED2_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000262:	4808      	ldr	r0, [pc, #32]	; (8000284 <RED2_TOGGLE+0x34>)
 8000264:	f001 fee1 	bl	800202a <HAL_GPIO_WritePin>
		RED2 = 1;
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <RED2_TOGGLE+0x30>)
 800026a:	2201      	movs	r2, #1
 800026c:	601a      	str	r2, [r3, #0]
	}
	else{
		LED2_OFF();
		RED2 = 0;
	}
}
 800026e:	e004      	b.n	800027a <RED2_TOGGLE+0x2a>
		LED2_OFF();
 8000270:	f7ff ffd6 	bl	8000220 <LED2_OFF>
		RED2 = 0;
 8000274:	4b02      	ldr	r3, [pc, #8]	; (8000280 <RED2_TOGGLE+0x30>)
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000108 	.word	0x20000108
 8000284:	40010c00 	.word	0x40010c00

08000288 <YELLOW2_TOGGLE>:
void YELLOW2_TOGGLE(){
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	if (YELLOW2 == 0){
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <YELLOW2_TOGGLE+0x30>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d109      	bne.n	80002a8 <YELLOW2_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000294:	2201      	movs	r2, #1
 8000296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800029a:	4808      	ldr	r0, [pc, #32]	; (80002bc <YELLOW2_TOGGLE+0x34>)
 800029c:	f001 fec5 	bl	800202a <HAL_GPIO_WritePin>
		YELLOW2 = 1;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <YELLOW2_TOGGLE+0x30>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	601a      	str	r2, [r3, #0]
	}
	else{
		LED2_OFF();
		YELLOW2 = 0;
	}
}
 80002a6:	e004      	b.n	80002b2 <YELLOW2_TOGGLE+0x2a>
		LED2_OFF();
 80002a8:	f7ff ffba 	bl	8000220 <LED2_OFF>
		YELLOW2 = 0;
 80002ac:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <YELLOW2_TOGGLE+0x30>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	2000010c 	.word	0x2000010c
 80002bc:	40010c00 	.word	0x40010c00

080002c0 <GREEN2_TOGGLE>:
void GREEN2_TOGGLE(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	if (GREEN2 == 0){
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <GREEN2_TOGGLE+0x30>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d109      	bne.n	80002e0 <GREEN2_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d2:	4808      	ldr	r0, [pc, #32]	; (80002f4 <GREEN2_TOGGLE+0x34>)
 80002d4:	f001 fea9 	bl	800202a <HAL_GPIO_WritePin>
		GREEN2 = 1;
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <GREEN2_TOGGLE+0x30>)
 80002da:	2201      	movs	r2, #1
 80002dc:	601a      	str	r2, [r3, #0]
	}
	else{
		LED2_OFF();
		GREEN2 = 0;
	}
}
 80002de:	e004      	b.n	80002ea <GREEN2_TOGGLE+0x2a>
		LED2_OFF();
 80002e0:	f7ff ff9e 	bl	8000220 <LED2_OFF>
		GREEN2 = 0;
 80002e4:	4b02      	ldr	r3, [pc, #8]	; (80002f0 <GREEN2_TOGGLE+0x30>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000110 	.word	0x20000110
 80002f4:	40010c00 	.word	0x40010c00

080002f8 <LED3_OFF>:


//GROUP LED3
void LED3_OFF(){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED3_GPIO_Port, LED_RED3_Pin, RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2180      	movs	r1, #128	; 0x80
 8000300:	4808      	ldr	r0, [pc, #32]	; (8000324 <LED3_OFF+0x2c>)
 8000302:	f001 fe92 	bl	800202a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW3_GPIO_Port, LED_YELLOW3_Pin, RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030c:	4805      	ldr	r0, [pc, #20]	; (8000324 <LED3_OFF+0x2c>)
 800030e:	f001 fe8c 	bl	800202a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN3_GPIO_Port, LED_GREEN3_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000318:	4802      	ldr	r0, [pc, #8]	; (8000324 <LED3_OFF+0x2c>)
 800031a:	f001 fe86 	bl	800202a <HAL_GPIO_WritePin>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40010c00 	.word	0x40010c00

08000328 <RED3_TOGGLE>:

void RED3_TOGGLE(){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	if (RED3 == 0){
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <RED3_TOGGLE+0x2c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d108      	bne.n	8000346 <RED3_TOGGLE+0x1e>
		HAL_GPIO_WritePin(LED_RED3_GPIO_Port, LED_RED3_Pin, SET);
 8000334:	2201      	movs	r2, #1
 8000336:	2180      	movs	r1, #128	; 0x80
 8000338:	4807      	ldr	r0, [pc, #28]	; (8000358 <RED3_TOGGLE+0x30>)
 800033a:	f001 fe76 	bl	800202a <HAL_GPIO_WritePin>
		RED3 = 1;
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <RED3_TOGGLE+0x2c>)
 8000340:	2201      	movs	r2, #1
 8000342:	601a      	str	r2, [r3, #0]
	}
	else{
		LED3_OFF();
		RED3 = 0;
	}
}
 8000344:	e004      	b.n	8000350 <RED3_TOGGLE+0x28>
		LED3_OFF();
 8000346:	f7ff ffd7 	bl	80002f8 <LED3_OFF>
		RED3 = 0;
 800034a:	4b02      	ldr	r3, [pc, #8]	; (8000354 <RED3_TOGGLE+0x2c>)
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000114 	.word	0x20000114
 8000358:	40010c00 	.word	0x40010c00

0800035c <YELLOW3_TOGGLE>:
void YELLOW3_TOGGLE(){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	if (YELLOW3 == 0){
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <YELLOW3_TOGGLE+0x30>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d109      	bne.n	800037c <YELLOW3_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_YELLOW3_GPIO_Port, LED_YELLOW3_Pin, SET);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800036e:	4808      	ldr	r0, [pc, #32]	; (8000390 <YELLOW3_TOGGLE+0x34>)
 8000370:	f001 fe5b 	bl	800202a <HAL_GPIO_WritePin>
		YELLOW3 = 1;
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <YELLOW3_TOGGLE+0x30>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
	}
	else{
		LED3_OFF();
		YELLOW3 = 0;
	}
}
 800037a:	e004      	b.n	8000386 <YELLOW3_TOGGLE+0x2a>
		LED3_OFF();
 800037c:	f7ff ffbc 	bl	80002f8 <LED3_OFF>
		YELLOW3 = 0;
 8000380:	4b02      	ldr	r3, [pc, #8]	; (800038c <YELLOW3_TOGGLE+0x30>)
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000118 	.word	0x20000118
 8000390:	40010c00 	.word	0x40010c00

08000394 <GREEN3_TOGGLE>:
void GREEN3_TOGGLE(){
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	if (GREEN3 == 0){
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <GREEN3_TOGGLE+0x30>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d109      	bne.n	80003b4 <GREEN3_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_GREEN3_GPIO_Port, LED_GREEN3_Pin, SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a6:	4808      	ldr	r0, [pc, #32]	; (80003c8 <GREEN3_TOGGLE+0x34>)
 80003a8:	f001 fe3f 	bl	800202a <HAL_GPIO_WritePin>
		GREEN3 = 1;
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <GREEN3_TOGGLE+0x30>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	601a      	str	r2, [r3, #0]
	}
	else{
		LED3_OFF();
		GREEN3 = 0;
	}
}
 80003b2:	e004      	b.n	80003be <GREEN3_TOGGLE+0x2a>
		LED3_OFF();
 80003b4:	f7ff ffa0 	bl	80002f8 <LED3_OFF>
		GREEN3 = 0;
 80003b8:	4b02      	ldr	r3, [pc, #8]	; (80003c4 <GREEN3_TOGGLE+0x30>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000011c 	.word	0x2000011c
 80003c8:	40010c00 	.word	0x40010c00

080003cc <setTimer1>:
int timer10_flag = 0;
///


//*******
void setTimer1(int duration){
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/CLOCK_TIMER;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <setTimer1+0x2c>)
 80003d8:	fb82 1203 	smull	r1, r2, r2, r3
 80003dc:	1092      	asrs	r2, r2, #2
 80003de:	17db      	asrs	r3, r3, #31
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	4a06      	ldr	r2, [pc, #24]	; (80003fc <setTimer1+0x30>)
 80003e4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <setTimer1+0x34>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	66666667 	.word	0x66666667
 80003fc:	20000120 	.word	0x20000120
 8000400:	20000148 	.word	0x20000148

08000404 <setTimer2>:

void setTimer2(int duration){
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/CLOCK_TIMER;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a08      	ldr	r2, [pc, #32]	; (8000430 <setTimer2+0x2c>)
 8000410:	fb82 1203 	smull	r1, r2, r2, r3
 8000414:	1092      	asrs	r2, r2, #2
 8000416:	17db      	asrs	r3, r3, #31
 8000418:	1ad3      	subs	r3, r2, r3
 800041a:	4a06      	ldr	r2, [pc, #24]	; (8000434 <setTimer2+0x30>)
 800041c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <setTimer2+0x34>)
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	66666667 	.word	0x66666667
 8000434:	20000124 	.word	0x20000124
 8000438:	2000014c 	.word	0x2000014c

0800043c <setTimer3>:

void setTimer3(int duration){
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/CLOCK_TIMER;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <setTimer3+0x2c>)
 8000448:	fb82 1203 	smull	r1, r2, r2, r3
 800044c:	1092      	asrs	r2, r2, #2
 800044e:	17db      	asrs	r3, r3, #31
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	4a06      	ldr	r2, [pc, #24]	; (800046c <setTimer3+0x30>)
 8000454:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <setTimer3+0x34>)
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	66666667 	.word	0x66666667
 800046c:	20000128 	.word	0x20000128
 8000470:	20000150 	.word	0x20000150

08000474 <setTimer4>:

void setTimer4(int duration){
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/CLOCK_TIMER;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <setTimer4+0x2c>)
 8000480:	fb82 1203 	smull	r1, r2, r2, r3
 8000484:	1092      	asrs	r2, r2, #2
 8000486:	17db      	asrs	r3, r3, #31
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <setTimer4+0x30>)
 800048c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <setTimer4+0x34>)
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	66666667 	.word	0x66666667
 80004a4:	2000012c 	.word	0x2000012c
 80004a8:	20000154 	.word	0x20000154

080004ac <setTimer5>:

void setTimer5(int duration){
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/CLOCK_TIMER;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a08      	ldr	r2, [pc, #32]	; (80004d8 <setTimer5+0x2c>)
 80004b8:	fb82 1203 	smull	r1, r2, r2, r3
 80004bc:	1092      	asrs	r2, r2, #2
 80004be:	17db      	asrs	r3, r3, #31
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	4a06      	ldr	r2, [pc, #24]	; (80004dc <setTimer5+0x30>)
 80004c4:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <setTimer5+0x34>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	66666667 	.word	0x66666667
 80004dc:	20000130 	.word	0x20000130
 80004e0:	20000158 	.word	0x20000158

080004e4 <timerRun>:
}
//**********



void timerRun(){
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	if (timer1_counter == 1 ){
 80004e8:	4b42      	ldr	r3, [pc, #264]	; (80005f4 <timerRun+0x110>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d103      	bne.n	80004f8 <timerRun+0x14>
		//BEGIN-TODO
		timer1_flag = 1;
 80004f0:	4b41      	ldr	r3, [pc, #260]	; (80005f8 <timerRun+0x114>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	e004      	b.n	8000502 <timerRun+0x1e>
		//END-TODO
	}
	else timer1_counter--;
 80004f8:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <timerRun+0x110>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	4a3d      	ldr	r2, [pc, #244]	; (80005f4 <timerRun+0x110>)
 8000500:	6013      	str	r3, [r2, #0]

	if (timer2_counter == 1 ) timer2_flag = 1;
 8000502:	4b3e      	ldr	r3, [pc, #248]	; (80005fc <timerRun+0x118>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d103      	bne.n	8000512 <timerRun+0x2e>
 800050a:	4b3d      	ldr	r3, [pc, #244]	; (8000600 <timerRun+0x11c>)
 800050c:	2201      	movs	r2, #1
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	e004      	b.n	800051c <timerRun+0x38>
	else timer2_counter--;
 8000512:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <timerRun+0x118>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3b01      	subs	r3, #1
 8000518:	4a38      	ldr	r2, [pc, #224]	; (80005fc <timerRun+0x118>)
 800051a:	6013      	str	r3, [r2, #0]

	if (timer3_counter == 1 ) timer3_flag = 1;
 800051c:	4b39      	ldr	r3, [pc, #228]	; (8000604 <timerRun+0x120>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d103      	bne.n	800052c <timerRun+0x48>
 8000524:	4b38      	ldr	r3, [pc, #224]	; (8000608 <timerRun+0x124>)
 8000526:	2201      	movs	r2, #1
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	e004      	b.n	8000536 <timerRun+0x52>
	else timer3_counter--;
 800052c:	4b35      	ldr	r3, [pc, #212]	; (8000604 <timerRun+0x120>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3b01      	subs	r3, #1
 8000532:	4a34      	ldr	r2, [pc, #208]	; (8000604 <timerRun+0x120>)
 8000534:	6013      	str	r3, [r2, #0]

	if (timer4_counter == 1 ) timer4_flag = 1;
 8000536:	4b35      	ldr	r3, [pc, #212]	; (800060c <timerRun+0x128>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d103      	bne.n	8000546 <timerRun+0x62>
 800053e:	4b34      	ldr	r3, [pc, #208]	; (8000610 <timerRun+0x12c>)
 8000540:	2201      	movs	r2, #1
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	e004      	b.n	8000550 <timerRun+0x6c>
	else timer4_counter--;
 8000546:	4b31      	ldr	r3, [pc, #196]	; (800060c <timerRun+0x128>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	3b01      	subs	r3, #1
 800054c:	4a2f      	ldr	r2, [pc, #188]	; (800060c <timerRun+0x128>)
 800054e:	6013      	str	r3, [r2, #0]

	if (timer5_counter == 1 ) timer5_flag = 1;
 8000550:	4b30      	ldr	r3, [pc, #192]	; (8000614 <timerRun+0x130>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d103      	bne.n	8000560 <timerRun+0x7c>
 8000558:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <timerRun+0x134>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	e004      	b.n	800056a <timerRun+0x86>
	else timer5_counter--;
 8000560:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <timerRun+0x130>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3b01      	subs	r3, #1
 8000566:	4a2b      	ldr	r2, [pc, #172]	; (8000614 <timerRun+0x130>)
 8000568:	6013      	str	r3, [r2, #0]

	if (timer6_counter == 1 ) timer6_flag = 1;
 800056a:	4b2c      	ldr	r3, [pc, #176]	; (800061c <timerRun+0x138>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d103      	bne.n	800057a <timerRun+0x96>
 8000572:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <timerRun+0x13c>)
 8000574:	2201      	movs	r2, #1
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	e004      	b.n	8000584 <timerRun+0xa0>
	else timer6_counter--;
 800057a:	4b28      	ldr	r3, [pc, #160]	; (800061c <timerRun+0x138>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3b01      	subs	r3, #1
 8000580:	4a26      	ldr	r2, [pc, #152]	; (800061c <timerRun+0x138>)
 8000582:	6013      	str	r3, [r2, #0]


	if (timer7_counter == 1 ) timer7_flag = 1;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <timerRun+0x140>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d103      	bne.n	8000594 <timerRun+0xb0>
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <timerRun+0x144>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	e004      	b.n	800059e <timerRun+0xba>
	else timer7_counter--;
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <timerRun+0x140>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3b01      	subs	r3, #1
 800059a:	4a22      	ldr	r2, [pc, #136]	; (8000624 <timerRun+0x140>)
 800059c:	6013      	str	r3, [r2, #0]

	if (timer8_counter == 1 ) timer8_flag = 1;
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <timerRun+0x148>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d103      	bne.n	80005ae <timerRun+0xca>
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <timerRun+0x14c>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	e004      	b.n	80005b8 <timerRun+0xd4>
	else timer8_counter--;
 80005ae:	4b1f      	ldr	r3, [pc, #124]	; (800062c <timerRun+0x148>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	4a1d      	ldr	r2, [pc, #116]	; (800062c <timerRun+0x148>)
 80005b6:	6013      	str	r3, [r2, #0]

	if (timer9_counter == 1 ) timer9_flag = 1;
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <timerRun+0x150>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d103      	bne.n	80005c8 <timerRun+0xe4>
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <timerRun+0x154>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	e004      	b.n	80005d2 <timerRun+0xee>
	else timer9_counter--;
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <timerRun+0x150>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3b01      	subs	r3, #1
 80005ce:	4a19      	ldr	r2, [pc, #100]	; (8000634 <timerRun+0x150>)
 80005d0:	6013      	str	r3, [r2, #0]

	if (timer10_counter == 1 ) timer10_flag = 1;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <timerRun+0x158>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d103      	bne.n	80005e2 <timerRun+0xfe>
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <timerRun+0x15c>)
 80005dc:	2201      	movs	r2, #1
 80005de:	601a      	str	r2, [r3, #0]
	else timer10_counter--;


}
 80005e0:	e004      	b.n	80005ec <timerRun+0x108>
	else timer10_counter--;
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <timerRun+0x158>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <timerRun+0x158>)
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	20000120 	.word	0x20000120
 80005f8:	20000148 	.word	0x20000148
 80005fc:	20000124 	.word	0x20000124
 8000600:	2000014c 	.word	0x2000014c
 8000604:	20000128 	.word	0x20000128
 8000608:	20000150 	.word	0x20000150
 800060c:	2000012c 	.word	0x2000012c
 8000610:	20000154 	.word	0x20000154
 8000614:	20000130 	.word	0x20000130
 8000618:	20000158 	.word	0x20000158
 800061c:	20000134 	.word	0x20000134
 8000620:	2000015c 	.word	0x2000015c
 8000624:	20000138 	.word	0x20000138
 8000628:	20000160 	.word	0x20000160
 800062c:	2000013c 	.word	0x2000013c
 8000630:	20000164 	.word	0x20000164
 8000634:	20000140 	.word	0x20000140
 8000638:	20000168 	.word	0x20000168
 800063c:	20000144 	.word	0x20000144
 8000640:	2000016c 	.word	0x2000016c

08000644 <isButton1Pressed>:


//Thoi gian cua nhan de'
int TimerforKeyPRESS1 = 200;

int isButton1Pressed(){
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <isButton1Pressed+0x20>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d104      	bne.n	800065a <isButton1Pressed+0x16>
		button1_flag = 0;
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <isButton1Pressed+0x20>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
		return 1;
 8000656:	2301      	movs	r3, #1
 8000658:	e000      	b.n	800065c <isButton1Pressed+0x18>
	}
	else return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	20000170 	.word	0x20000170

08000668 <getKeyInput1>:
//
void getKeyInput1(){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	KeyReg0_1 = KeyReg1_1;
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <getKeyInput1+0x98>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a24      	ldr	r2, [pc, #144]	; (8000704 <getKeyInput1+0x9c>)
 8000672:	6013      	str	r3, [r2, #0]
	KeyReg1_1 = KeyReg2_1;
 8000674:	4b24      	ldr	r3, [pc, #144]	; (8000708 <getKeyInput1+0xa0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <getKeyInput1+0x98>)
 800067a:	6013      	str	r3, [r2, #0]
	KeyReg2_1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800067c:	2102      	movs	r1, #2
 800067e:	4823      	ldr	r0, [pc, #140]	; (800070c <getKeyInput1+0xa4>)
 8000680:	f001 fcbc 	bl	8001ffc <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <getKeyInput1+0xa0>)
 800068a:	601a      	str	r2, [r3, #0]

	if (KeyReg0_1 == KeyReg1_1 && KeyReg1_1 == KeyReg2_1){
 800068c:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <getKeyInput1+0x9c>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <getKeyInput1+0x98>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d131      	bne.n	80006fc <getKeyInput1+0x94>
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <getKeyInput1+0x98>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <getKeyInput1+0xa0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d12b      	bne.n	80006fc <getKeyInput1+0x94>

		if (KeyReg2_1 != KeyReg3_1){					//Nhan doi trang thai
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <getKeyInput1+0xa0>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <getKeyInput1+0xa8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d012      	beq.n	80006d6 <getKeyInput1+0x6e>
			KeyReg3_1 = KeyReg2_1;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <getKeyInput1+0xa0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a16      	ldr	r2, [pc, #88]	; (8000710 <getKeyInput1+0xa8>)
 80006b6:	6013      	str	r3, [r2, #0]
			if (KeyReg2_1 == PRESSED_STATE){			//Neu dang nhan
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <getKeyInput1+0xa0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d103      	bne.n	80006c8 <getKeyInput1+0x60>
				button1_flag = 1;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <getKeyInput1+0xac>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
		}


	}

}
 80006c6:	e019      	b.n	80006fc <getKeyInput1+0x94>
				button1_flag = 0;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <getKeyInput1+0xac>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS1 = 200;				//khi release thi RESET nhan de 1 giay
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <getKeyInput1+0xb0>)
 80006d0:	22c8      	movs	r2, #200	; 0xc8
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	e012      	b.n	80006fc <getKeyInput1+0x94>
			if(KeyReg2_1 == PRESSED_STATE){			// Neu dang nhan de
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <getKeyInput1+0xa0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d10e      	bne.n	80006fc <getKeyInput1+0x94>
				TimerforKeyPRESS1--;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <getKeyInput1+0xb0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <getKeyInput1+0xb0>)
 80006e6:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS1 == 0){			// Nhan de thanh cong
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <getKeyInput1+0xb0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d105      	bne.n	80006fc <getKeyInput1+0x94>
					TimerforKeyPRESS1 = 100;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <getKeyInput1+0xb0>)
 80006f2:	2264      	movs	r2, #100	; 0x64
 80006f4:	601a      	str	r2, [r3, #0]
					button1_flag = 1;
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <getKeyInput1+0xac>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000004 	.word	0x20000004
 8000704:	20000000 	.word	0x20000000
 8000708:	20000008 	.word	0x20000008
 800070c:	40010800 	.word	0x40010800
 8000710:	2000000c 	.word	0x2000000c
 8000714:	20000170 	.word	0x20000170
 8000718:	20000010 	.word	0x20000010

0800071c <isButton2Pressed>:

//Thoi gian cua nhan de'
int TimerforKeyPRESS2 = 200;


int isButton2Pressed(){
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <isButton2Pressed+0x20>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d104      	bne.n	8000732 <isButton2Pressed+0x16>
		button2_flag = 0;
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <isButton2Pressed+0x20>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
		return 1;
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <isButton2Pressed+0x18>
	}
	else return 0;
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	20000174 	.word	0x20000174

08000740 <getKeyInput2>:
//
void getKeyInput2(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	KeyReg0_2 = KeyReg1_2;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <getKeyInput2+0x98>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a24      	ldr	r2, [pc, #144]	; (80007dc <getKeyInput2+0x9c>)
 800074a:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = KeyReg2_2;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <getKeyInput2+0xa0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <getKeyInput2+0x98>)
 8000752:	6013      	str	r3, [r2, #0]
	KeyReg2_2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000754:	2110      	movs	r1, #16
 8000756:	4823      	ldr	r0, [pc, #140]	; (80007e4 <getKeyInput2+0xa4>)
 8000758:	f001 fc50 	bl	8001ffc <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <getKeyInput2+0xa0>)
 8000762:	601a      	str	r2, [r3, #0]


	if (KeyReg0_2 == KeyReg1_2 && KeyReg1_2 == KeyReg2_2){
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <getKeyInput2+0x9c>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <getKeyInput2+0x98>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d131      	bne.n	80007d4 <getKeyInput2+0x94>
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <getKeyInput2+0x98>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <getKeyInput2+0xa0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	d12b      	bne.n	80007d4 <getKeyInput2+0x94>

		if (KeyReg2_2 != KeyReg3_2){					//Nhan doi trang thai
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <getKeyInput2+0xa0>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <getKeyInput2+0xa8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d012      	beq.n	80007ae <getKeyInput2+0x6e>
			KeyReg3_2 = KeyReg2_2;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <getKeyInput2+0xa0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <getKeyInput2+0xa8>)
 800078e:	6013      	str	r3, [r2, #0]
			if (KeyReg2_2 == PRESSED_STATE){			//Neu dang nhan
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <getKeyInput2+0xa0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d103      	bne.n	80007a0 <getKeyInput2+0x60>
				button2_flag = 1;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <getKeyInput2+0xac>)
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]
		}


	}

}
 800079e:	e019      	b.n	80007d4 <getKeyInput2+0x94>
				button2_flag = 0;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <getKeyInput2+0xac>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS2 = 100;				//khi release thi RESET nhan de 1 giay
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <getKeyInput2+0xb0>)
 80007a8:	2264      	movs	r2, #100	; 0x64
 80007aa:	601a      	str	r2, [r3, #0]
}
 80007ac:	e012      	b.n	80007d4 <getKeyInput2+0x94>
			if(KeyReg2_2 == PRESSED_STATE){			// Neu dang nhan de
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <getKeyInput2+0xa0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d10e      	bne.n	80007d4 <getKeyInput2+0x94>
				TimerforKeyPRESS2--;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <getKeyInput2+0xb0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <getKeyInput2+0xb0>)
 80007be:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS2 == 0){			// Nhan de thanh cong
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <getKeyInput2+0xb0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d105      	bne.n	80007d4 <getKeyInput2+0x94>
					TimerforKeyPRESS2 = 50;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <getKeyInput2+0xb0>)
 80007ca:	2232      	movs	r2, #50	; 0x32
 80007cc:	601a      	str	r2, [r3, #0]
					button2_flag = 1;
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <getKeyInput2+0xac>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	601a      	str	r2, [r3, #0]
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000018 	.word	0x20000018
 80007dc:	20000014 	.word	0x20000014
 80007e0:	2000001c 	.word	0x2000001c
 80007e4:	40010800 	.word	0x40010800
 80007e8:	20000020 	.word	0x20000020
 80007ec:	20000174 	.word	0x20000174
 80007f0:	20000024 	.word	0x20000024

080007f4 <isButton3Pressed>:
//Thoi gian cua nhan de'
int TimerforKeyPRESS3 = 200;
int TimerforDBClick4 = 0;


int isButton3Pressed(){
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <isButton3Pressed+0x20>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d104      	bne.n	800080a <isButton3Pressed+0x16>
		button3_flag = 0;
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <isButton3Pressed+0x20>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
		return 1;
 8000806:	2301      	movs	r3, #1
 8000808:	e000      	b.n	800080c <isButton3Pressed+0x18>
	}
	else return 0;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	20000178 	.word	0x20000178

08000818 <isButton3DoubleClick>:


int isButton3DoubleClick(){
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
	if (button3_dbclick == 1){
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <isButton3DoubleClick+0x20>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d104      	bne.n	800082e <isButton3DoubleClick+0x16>
		button3_dbclick = 0;
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <isButton3DoubleClick+0x20>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
		return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <isButton3DoubleClick+0x18>
	}
	else return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	2000017c 	.word	0x2000017c

0800083c <getKeyInput3>:


//
void getKeyInput3(){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	KeyReg0_3 = KeyReg1_3;
 8000840:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <getKeyInput3+0xb8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a2c      	ldr	r2, [pc, #176]	; (80008f8 <getKeyInput3+0xbc>)
 8000846:	6013      	str	r3, [r2, #0]
	KeyReg1_3 = KeyReg2_3;
 8000848:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <getKeyInput3+0xc0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <getKeyInput3+0xb8>)
 800084e:	6013      	str	r3, [r2, #0]
	KeyReg2_3 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000850:	2101      	movs	r1, #1
 8000852:	482b      	ldr	r0, [pc, #172]	; (8000900 <getKeyInput3+0xc4>)
 8000854:	f001 fbd2 	bl	8001ffc <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <getKeyInput3+0xc0>)
 800085e:	601a      	str	r2, [r3, #0]


	if (KeyReg0_3 == KeyReg1_3 && KeyReg1_3 == KeyReg2_3){
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <getKeyInput3+0xbc>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <getKeyInput3+0xb8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	429a      	cmp	r2, r3
 800086a:	d141      	bne.n	80008f0 <getKeyInput3+0xb4>
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <getKeyInput3+0xb8>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <getKeyInput3+0xc0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	429a      	cmp	r2, r3
 8000876:	d13b      	bne.n	80008f0 <getKeyInput3+0xb4>

		if (KeyReg2_3 != KeyReg3_3){					//Nhan doi trang thai
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <getKeyInput3+0xc0>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <getKeyInput3+0xc8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	d01c      	beq.n	80008be <getKeyInput3+0x82>
			KeyReg3_3 = KeyReg2_3;
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <getKeyInput3+0xc0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <getKeyInput3+0xc8>)
 800088a:	6013      	str	r3, [r2, #0]
			if (KeyReg2_3 == PRESSED_STATE){			//Neu dang nhan
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <getKeyInput3+0xc0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d10a      	bne.n	80008aa <getKeyInput3+0x6e>
				button3_flag = 1;
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <getKeyInput3+0xcc>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
				if (TimerforDBClick4 > 0){
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <getKeyInput3+0xd0>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	dd26      	ble.n	80008f0 <getKeyInput3+0xb4>
					button3_dbclick = 1;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <getKeyInput3+0xd4>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
		}


	}

}
 80008a8:	e022      	b.n	80008f0 <getKeyInput3+0xb4>
				button3_flag = 0;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <getKeyInput3+0xcc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS3 = 100;				//khi release thi RESET nhan de 1 giay, neu nhan lai trong 1 giay thi tinh la nhan de
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <getKeyInput3+0xd8>)
 80008b2:	2264      	movs	r2, #100	; 0x64
 80008b4:	601a      	str	r2, [r3, #0]
				TimerforDBClick4 = 40;					// settimer double click 400ms.
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <getKeyInput3+0xd0>)
 80008b8:	2228      	movs	r2, #40	; 0x28
 80008ba:	601a      	str	r2, [r3, #0]
}
 80008bc:	e018      	b.n	80008f0 <getKeyInput3+0xb4>
			if(KeyReg2_3 == PRESSED_STATE){			// Neu dang nhan de
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <getKeyInput3+0xc0>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10f      	bne.n	80008e6 <getKeyInput3+0xaa>
				TimerforKeyPRESS3--;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <getKeyInput3+0xd8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	4a11      	ldr	r2, [pc, #68]	; (8000914 <getKeyInput3+0xd8>)
 80008ce:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS3 == 0){			// Nhan de thanh cong
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <getKeyInput3+0xd8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d10b      	bne.n	80008f0 <getKeyInput3+0xb4>
					TimerforKeyPRESS3 = 50;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <getKeyInput3+0xd8>)
 80008da:	2232      	movs	r2, #50	; 0x32
 80008dc:	601a      	str	r2, [r3, #0]
					button3_flag = 1;
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <getKeyInput3+0xcc>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	601a      	str	r2, [r3, #0]
}
 80008e4:	e004      	b.n	80008f0 <getKeyInput3+0xb4>
			else TimerforDBClick4--;				//Releasing , khong lam gi ca
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <getKeyInput3+0xd0>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <getKeyInput3+0xd0>)
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000002c 	.word	0x2000002c
 80008f8:	20000028 	.word	0x20000028
 80008fc:	20000030 	.word	0x20000030
 8000900:	40010c00 	.word	0x40010c00
 8000904:	20000034 	.word	0x20000034
 8000908:	20000178 	.word	0x20000178
 800090c:	20000184 	.word	0x20000184
 8000910:	2000017c 	.word	0x2000017c
 8000914:	20000038 	.word	0x20000038

08000918 <isButton4Pressed>:
int KeyReg3_4 = NORMAL_STATE;

//Thoi gian cua nhan de'
int TimerforKeyPRESS4 = 200;

int isButton4Pressed(){
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	if (button4_flag == 1){
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <isButton4Pressed+0x20>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d104      	bne.n	800092e <isButton4Pressed+0x16>
		button4_flag = 0;
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <isButton4Pressed+0x20>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
		return 1;
 800092a:	2301      	movs	r3, #1
 800092c:	e000      	b.n	8000930 <isButton4Pressed+0x18>
	}
	else return 0;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000180 	.word	0x20000180

0800093c <getKeyInput4>:


//
void getKeyInput4(){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	KeyReg0_4 = KeyReg1_4;
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <getKeyInput4+0x98>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a24      	ldr	r2, [pc, #144]	; (80009d8 <getKeyInput4+0x9c>)
 8000946:	6013      	str	r3, [r2, #0]
	KeyReg1_4 = KeyReg2_4;
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <getKeyInput4+0xa0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <getKeyInput4+0x98>)
 800094e:	6013      	str	r3, [r2, #0]
	//KeyReg2_4 = HAL_GPIO_ReadPin(BUTTONUSER_GPIO_Port,BUTTONUSER_Pin);
	KeyReg2_4 = HAL_GPIO_ReadPin(BUTTONUSER_GPIO_Port,BUTTONUSER_Pin);
 8000950:	2101      	movs	r1, #1
 8000952:	4823      	ldr	r0, [pc, #140]	; (80009e0 <getKeyInput4+0xa4>)
 8000954:	f001 fb52 	bl	8001ffc <HAL_GPIO_ReadPin>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <getKeyInput4+0xa0>)
 800095e:	601a      	str	r2, [r3, #0]


	if (KeyReg0_4 == KeyReg1_4 && KeyReg1_4 == KeyReg2_4){
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <getKeyInput4+0x9c>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <getKeyInput4+0x98>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	d131      	bne.n	80009d0 <getKeyInput4+0x94>
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <getKeyInput4+0x98>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <getKeyInput4+0xa0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	429a      	cmp	r2, r3
 8000976:	d12b      	bne.n	80009d0 <getKeyInput4+0x94>

		if (KeyReg2_4 != KeyReg3_4){					//Nhan doi trang thai
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <getKeyInput4+0xa0>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <getKeyInput4+0xa8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d012      	beq.n	80009aa <getKeyInput4+0x6e>
			KeyReg3_4 = KeyReg2_4;
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <getKeyInput4+0xa0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <getKeyInput4+0xa8>)
 800098a:	6013      	str	r3, [r2, #0]
			if (KeyReg2_4 == PRESSED_STATE){			//Neu dang nhan
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <getKeyInput4+0xa0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d103      	bne.n	800099c <getKeyInput4+0x60>
				button4_flag = 1;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <getKeyInput4+0xac>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
		}


	}

}
 800099a:	e019      	b.n	80009d0 <getKeyInput4+0x94>
				button4_flag = 0;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <getKeyInput4+0xac>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS4 = 100;				//khi release thi RESET nhan de 1 giay
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <getKeyInput4+0xb0>)
 80009a4:	2264      	movs	r2, #100	; 0x64
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	e012      	b.n	80009d0 <getKeyInput4+0x94>
			if(KeyReg2_4 == PRESSED_STATE){			// Neu dang nhan de
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <getKeyInput4+0xa0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10e      	bne.n	80009d0 <getKeyInput4+0x94>
				TimerforKeyPRESS4--;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <getKeyInput4+0xb0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <getKeyInput4+0xb0>)
 80009ba:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS4 == 0){			// Nhan de thanh cong
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <getKeyInput4+0xb0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d105      	bne.n	80009d0 <getKeyInput4+0x94>
					TimerforKeyPRESS4 = 50;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <getKeyInput4+0xb0>)
 80009c6:	2232      	movs	r2, #50	; 0x32
 80009c8:	601a      	str	r2, [r3, #0]
					button4_flag = 1;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <getKeyInput4+0xac>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000040 	.word	0x20000040
 80009d8:	2000003c 	.word	0x2000003c
 80009dc:	20000044 	.word	0x20000044
 80009e0:	40010800 	.word	0x40010800
 80009e4:	20000048 	.word	0x20000048
 80009e8:	20000180 	.word	0x20000180
 80009ec:	2000004c 	.word	0x2000004c

080009f0 <buzzer>:

int toggle_buzzer = 1;
int act_buzzer = 0;
int time = 1000;

void buzzer(){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

	if (act_buzzer == 1){
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <buzzer+0xa0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d134      	bne.n	8000a68 <buzzer+0x78>
		if (timer4_flag == 1){
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <buzzer+0xa4>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d140      	bne.n	8000a88 <buzzer+0x98>
			setTimer4(time);
 8000a06:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <buzzer+0xa8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fd32 	bl	8000474 <setTimer4>
			time -= 50;
 8000a10:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <buzzer+0xa8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3b32      	subs	r3, #50	; 0x32
 8000a16:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <buzzer+0xa8>)
 8000a18:	6013      	str	r3, [r2, #0]
			if (time < 150) time = 150;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <buzzer+0xa8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b95      	cmp	r3, #149	; 0x95
 8000a20:	dc02      	bgt.n	8000a28 <buzzer+0x38>
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <buzzer+0xa8>)
 8000a24:	2296      	movs	r2, #150	; 0x96
 8000a26:	601a      	str	r2, [r3, #0]
			int feq = 900 - 500*(10*timer3_counter/timer_yellow);
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <buzzer+0xac>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <buzzer+0xb0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a3e:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <buzzer+0xb4>)
 8000a40:	fb02 f303 	mul.w	r3, r2, r3
 8000a44:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8000a48:	607b      	str	r3, [r7, #4]
			__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1, feq*toggle_buzzer);
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <buzzer+0xb8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	fb03 f202 	mul.w	r2, r3, r2
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <buzzer+0xbc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
			toggle_buzzer = 1 - toggle_buzzer;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <buzzer+0xb8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f1c3 0301 	rsb	r3, r3, #1
 8000a62:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <buzzer+0xb8>)
 8000a64:	6013      	str	r3, [r2, #0]
		toggle_buzzer = 1;
		time = timer_yellow/10;
		setTimer4(200);
	}

}
 8000a66:	e00f      	b.n	8000a88 <buzzer+0x98>
		toggle_buzzer = 1;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <buzzer+0xb8>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]
		time = timer_yellow/10;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <buzzer+0xb0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <buzzer+0xc0>)
 8000a74:	fb82 1203 	smull	r1, r2, r2, r3
 8000a78:	1092      	asrs	r2, r2, #2
 8000a7a:	17db      	asrs	r3, r3, #31
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <buzzer+0xa8>)
 8000a80:	6013      	str	r3, [r2, #0]
		setTimer4(200);
 8000a82:	20c8      	movs	r0, #200	; 0xc8
 8000a84:	f7ff fcf6 	bl	8000474 <setTimer4>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000188 	.word	0x20000188
 8000a94:	20000154 	.word	0x20000154
 8000a98:	20000054 	.word	0x20000054
 8000a9c:	20000128 	.word	0x20000128
 8000aa0:	20000064 	.word	0x20000064
 8000aa4:	fffffe0c 	.word	0xfffffe0c
 8000aa8:	20000050 	.word	0x20000050
 8000aac:	20000220 	.word	0x20000220
 8000ab0:	66666667 	.word	0x66666667

08000ab4 <printstatus>:

int status_man = INIT;
int temp_timer = 0;
int reset = 0;

void printstatus(){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09a      	sub	sp, #104	; 0x68
 8000ab8:	af00      	add	r7, sp, #0

	switch(status_man){
 8000aba:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <printstatus+0xcc>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3b65      	subs	r3, #101	; 0x65
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d854      	bhi.n	8000b6e <printstatus+0xba>
 8000ac4:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <printstatus+0x18>)
 8000ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aca:	bf00      	nop
 8000acc:	08000add 	.word	0x08000add
 8000ad0:	08000b1b 	.word	0x08000b1b
 8000ad4:	08000b53 	.word	0x08000b53
 8000ad8:	08000b37 	.word	0x08000b37
	case INIT:
	{
		char str2[100];
		if (reset) HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!RESET ALL----#\r\n"), 1000);
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <printstatus+0xd0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00c      	beq.n	8000afe <printstatus+0x4a>
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4928      	ldr	r1, [pc, #160]	; (8000b88 <printstatus+0xd4>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fb5b 	bl	80041a4 <siprintf>
 8000aee:	4603      	mov	r3, r0
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	1d39      	adds	r1, r7, #4
 8000af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af8:	4824      	ldr	r0, [pc, #144]	; (8000b8c <printstatus+0xd8>)
 8000afa:	f002 fe96 	bl	800382a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!AUTO MODE----#\r\n"), 1000);
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4923      	ldr	r1, [pc, #140]	; (8000b90 <printstatus+0xdc>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fb4e 	bl	80041a4 <siprintf>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	1d39      	adds	r1, r7, #4
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	481e      	ldr	r0, [pc, #120]	; (8000b8c <printstatus+0xd8>)
 8000b14:	f002 fe89 	bl	800382a <HAL_UART_Transmit>
	}
		break;
 8000b18:	e02a      	b.n	8000b70 <printstatus+0xbc>

	case MAN_RED:
	{
		char str2[100];
		HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!RED MODE----#\r\n"), 1000);
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	491d      	ldr	r1, [pc, #116]	; (8000b94 <printstatus+0xe0>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f003 fb40 	bl	80041a4 <siprintf>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	1d39      	adds	r1, r7, #4
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	4817      	ldr	r0, [pc, #92]	; (8000b8c <printstatus+0xd8>)
 8000b30:	f002 fe7b 	bl	800382a <HAL_UART_Transmit>
	}
		break;
 8000b34:	e01c      	b.n	8000b70 <printstatus+0xbc>

	case MAN_YELLOW:
	{
		char str2[100];
		HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!YELLOW MODE----#\r\n"), 1000);
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4917      	ldr	r1, [pc, #92]	; (8000b98 <printstatus+0xe4>)
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fb32 	bl	80041a4 <siprintf>
 8000b40:	4603      	mov	r3, r0
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	1d39      	adds	r1, r7, #4
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	4810      	ldr	r0, [pc, #64]	; (8000b8c <printstatus+0xd8>)
 8000b4c:	f002 fe6d 	bl	800382a <HAL_UART_Transmit>
	}
		break;
 8000b50:	e00e      	b.n	8000b70 <printstatus+0xbc>

	case MAN_GREEN:
	{
		char str2[100];
		HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!GREEN MODE----#\r\n"), 1000);
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4911      	ldr	r1, [pc, #68]	; (8000b9c <printstatus+0xe8>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f003 fb24 	bl	80041a4 <siprintf>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	1d39      	adds	r1, r7, #4
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	4809      	ldr	r0, [pc, #36]	; (8000b8c <printstatus+0xd8>)
 8000b68:	f002 fe5f 	bl	800382a <HAL_UART_Transmit>
	}
		break;
 8000b6c:	e000      	b.n	8000b70 <printstatus+0xbc>

	default:
		break;
 8000b6e:	bf00      	nop
	}

	reset = 0;
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <printstatus+0xd0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]

}
 8000b76:	bf00      	nop
 8000b78:	3768      	adds	r7, #104	; 0x68
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000058 	.word	0x20000058
 8000b84:	20000190 	.word	0x20000190
 8000b88:	08004ab0 	.word	0x08004ab0
 8000b8c:	20000194 	.word	0x20000194
 8000b90:	08004ac4 	.word	0x08004ac4
 8000b94:	08004ad8 	.word	0x08004ad8
 8000b98:	08004aec 	.word	0x08004aec
 8000b9c:	08004b00 	.word	0x08004b00

08000ba0 <fsm_manual_run>:


void fsm_manual_run(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b09a      	sub	sp, #104	; 0x68
 8000ba4:	af00      	add	r7, sp, #0

	switch(status_man){
 8000ba6:	4b9a      	ldr	r3, [pc, #616]	; (8000e10 <fsm_manual_run+0x270>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3b65      	subs	r3, #101	; 0x65
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	f200 8122 	bhi.w	8000df6 <fsm_manual_run+0x256>
 8000bb2:	a201      	add	r2, pc, #4	; (adr r2, 8000bb8 <fsm_manual_run+0x18>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000bc9 	.word	0x08000bc9
 8000bbc:	08000c25 	.word	0x08000c25
 8000bc0:	08000d6b 	.word	0x08000d6b
 8000bc4:	08000cdf 	.word	0x08000cdf

	case INIT:
		if (isButton1Pressed()){
 8000bc8:	f7ff fd3c 	bl	8000644 <isButton1Pressed>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d007      	beq.n	8000be2 <fsm_manual_run+0x42>
			status_man = MAN_RED;
 8000bd2:	4b8f      	ldr	r3, [pc, #572]	; (8000e10 <fsm_manual_run+0x270>)
 8000bd4:	2266      	movs	r2, #102	; 0x66
 8000bd6:	601a      	str	r2, [r3, #0]
			temp_timer = 0;
 8000bd8:	4b8e      	ldr	r3, [pc, #568]	; (8000e14 <fsm_manual_run+0x274>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
			printstatus();
 8000bde:	f7ff ff69 	bl	8000ab4 <printstatus>
		}
		if (isButton3DoubleClick()){
 8000be2:	f7ff fe19 	bl	8000818 <isButton3DoubleClick>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f000 8106 	beq.w	8000dfa <fsm_manual_run+0x25a>
			timer_red = RED_TIME;
 8000bee:	4b8a      	ldr	r3, [pc, #552]	; (8000e18 <fsm_manual_run+0x278>)
 8000bf0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bf4:	601a      	str	r2, [r3, #0]
			timer_green = GREEN_TIME;
 8000bf6:	4b89      	ldr	r3, [pc, #548]	; (8000e1c <fsm_manual_run+0x27c>)
 8000bf8:	f241 7270 	movw	r2, #6000	; 0x1770
 8000bfc:	601a      	str	r2, [r3, #0]
			timer_yellow = YELLOW_TIME;
 8000bfe:	4b88      	ldr	r3, [pc, #544]	; (8000e20 <fsm_manual_run+0x280>)
 8000c00:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c04:	601a      	str	r2, [r3, #0]
			status_light1 = INIT1;
 8000c06:	4b87      	ldr	r3, [pc, #540]	; (8000e24 <fsm_manual_run+0x284>)
 8000c08:	2213      	movs	r2, #19
 8000c0a:	601a      	str	r2, [r3, #0]
			status_light2 = INIT2;
 8000c0c:	4b86      	ldr	r3, [pc, #536]	; (8000e28 <fsm_manual_run+0x288>)
 8000c0e:	2217      	movs	r2, #23
 8000c10:	601a      	str	r2, [r3, #0]
			status_man = INIT;
 8000c12:	4b7f      	ldr	r3, [pc, #508]	; (8000e10 <fsm_manual_run+0x270>)
 8000c14:	2265      	movs	r2, #101	; 0x65
 8000c16:	601a      	str	r2, [r3, #0]
			reset = 1;
 8000c18:	4b84      	ldr	r3, [pc, #528]	; (8000e2c <fsm_manual_run+0x28c>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
			printstatus();
 8000c1e:	f7ff ff49 	bl	8000ab4 <printstatus>
		}
		break;
 8000c22:	e0ea      	b.n	8000dfa <fsm_manual_run+0x25a>



	case MAN_RED:

		if (isButton1Pressed()){
 8000c24:	f7ff fd0e 	bl	8000644 <isButton1Pressed>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d007      	beq.n	8000c3e <fsm_manual_run+0x9e>
			status_man = MAN_YELLOW;
 8000c2e:	4b78      	ldr	r3, [pc, #480]	; (8000e10 <fsm_manual_run+0x270>)
 8000c30:	2268      	movs	r2, #104	; 0x68
 8000c32:	601a      	str	r2, [r3, #0]
			temp_timer = 0;
 8000c34:	4b77      	ldr	r3, [pc, #476]	; (8000e14 <fsm_manual_run+0x274>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
			printstatus();
 8000c3a:	f7ff ff3b 	bl	8000ab4 <printstatus>
		}
		if (isButton2Pressed()){
 8000c3e:	f7ff fd6d 	bl	800071c <isButton2Pressed>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d014      	beq.n	8000c72 <fsm_manual_run+0xd2>
			temp_timer = temp_timer + 1000;
 8000c48:	4b72      	ldr	r3, [pc, #456]	; (8000e14 <fsm_manual_run+0x274>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000c50:	4a70      	ldr	r2, [pc, #448]	; (8000e14 <fsm_manual_run+0x274>)
 8000c52:	6013      	str	r3, [r2, #0]
			char str[100];
			HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!INC: %d#\r\n",temp_timer), 1000);
 8000c54:	4b6f      	ldr	r3, [pc, #444]	; (8000e14 <fsm_manual_run+0x274>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4975      	ldr	r1, [pc, #468]	; (8000e30 <fsm_manual_run+0x290>)
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 faa1 	bl	80041a4 <siprintf>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	1d39      	adds	r1, r7, #4
 8000c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6c:	4871      	ldr	r0, [pc, #452]	; (8000e34 <fsm_manual_run+0x294>)
 8000c6e:	f002 fddc 	bl	800382a <HAL_UART_Transmit>
		}
		if (isButton3Pressed()){
 8000c72:	f7ff fdbf 	bl	80007f4 <isButton3Pressed>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f000 80c0 	beq.w	8000dfe <fsm_manual_run+0x25e>
			timer_red = temp_timer;
 8000c7e:	4b65      	ldr	r3, [pc, #404]	; (8000e14 <fsm_manual_run+0x274>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a65      	ldr	r2, [pc, #404]	; (8000e18 <fsm_manual_run+0x278>)
 8000c84:	6013      	str	r3, [r2, #0]
			if (timer_red < timer_green + timer_yellow){			// timer red decrease
 8000c86:	4b65      	ldr	r3, [pc, #404]	; (8000e1c <fsm_manual_run+0x27c>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4b65      	ldr	r3, [pc, #404]	; (8000e20 <fsm_manual_run+0x280>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	441a      	add	r2, r3
 8000c90:	4b61      	ldr	r3, [pc, #388]	; (8000e18 <fsm_manual_run+0x278>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dd15      	ble.n	8000cc4 <fsm_manual_run+0x124>
				if (timer_red >= timer_green + 1 ) {
 8000c98:	4b60      	ldr	r3, [pc, #384]	; (8000e1c <fsm_manual_run+0x27c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b5e      	ldr	r3, [pc, #376]	; (8000e18 <fsm_manual_run+0x278>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	da07      	bge.n	8000cb4 <fsm_manual_run+0x114>
					timer_yellow = timer_red - timer_green;
 8000ca4:	4b5c      	ldr	r3, [pc, #368]	; (8000e18 <fsm_manual_run+0x278>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b5c      	ldr	r3, [pc, #368]	; (8000e1c <fsm_manual_run+0x27c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	4a5c      	ldr	r2, [pc, #368]	; (8000e20 <fsm_manual_run+0x280>)
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e00e      	b.n	8000cd2 <fsm_manual_run+0x132>
				}
				else timer_red = timer_green + timer_yellow;
 8000cb4:	4b59      	ldr	r3, [pc, #356]	; (8000e1c <fsm_manual_run+0x27c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b59      	ldr	r3, [pc, #356]	; (8000e20 <fsm_manual_run+0x280>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a56      	ldr	r2, [pc, #344]	; (8000e18 <fsm_manual_run+0x278>)
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e006      	b.n	8000cd2 <fsm_manual_run+0x132>
			}
			else timer_green = timer_red - timer_yellow;			// timer red increase
 8000cc4:	4b54      	ldr	r3, [pc, #336]	; (8000e18 <fsm_manual_run+0x278>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b55      	ldr	r3, [pc, #340]	; (8000e20 <fsm_manual_run+0x280>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	4a53      	ldr	r2, [pc, #332]	; (8000e1c <fsm_manual_run+0x27c>)
 8000cd0:	6013      	str	r3, [r2, #0]
			status_man = INIT;
 8000cd2:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <fsm_manual_run+0x270>)
 8000cd4:	2265      	movs	r2, #101	; 0x65
 8000cd6:	601a      	str	r2, [r3, #0]
			printstatus();
 8000cd8:	f7ff feec 	bl	8000ab4 <printstatus>
		}
		break;
 8000cdc:	e08f      	b.n	8000dfe <fsm_manual_run+0x25e>


	case MAN_YELLOW:
		if (isButton1Pressed()){
 8000cde:	f7ff fcb1 	bl	8000644 <isButton1Pressed>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d007      	beq.n	8000cf8 <fsm_manual_run+0x158>
			temp_timer = 0;
 8000ce8:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <fsm_manual_run+0x274>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
			status_man = MAN_GREEN;
 8000cee:	4b48      	ldr	r3, [pc, #288]	; (8000e10 <fsm_manual_run+0x270>)
 8000cf0:	2267      	movs	r2, #103	; 0x67
 8000cf2:	601a      	str	r2, [r3, #0]
			printstatus();
 8000cf4:	f7ff fede 	bl	8000ab4 <printstatus>
		}
		if (isButton2Pressed()){
 8000cf8:	f7ff fd10 	bl	800071c <isButton2Pressed>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d014      	beq.n	8000d2c <fsm_manual_run+0x18c>
			temp_timer = temp_timer + 1000;
 8000d02:	4b44      	ldr	r3, [pc, #272]	; (8000e14 <fsm_manual_run+0x274>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000d0a:	4a42      	ldr	r2, [pc, #264]	; (8000e14 <fsm_manual_run+0x274>)
 8000d0c:	6013      	str	r3, [r2, #0]
			char str[100];
			HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!INC: %d#\r\n",temp_timer), 1000);
 8000d0e:	4b41      	ldr	r3, [pc, #260]	; (8000e14 <fsm_manual_run+0x274>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	4946      	ldr	r1, [pc, #280]	; (8000e30 <fsm_manual_run+0x290>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fa44 	bl	80041a4 <siprintf>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	1d39      	adds	r1, r7, #4
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	4843      	ldr	r0, [pc, #268]	; (8000e34 <fsm_manual_run+0x294>)
 8000d28:	f002 fd7f 	bl	800382a <HAL_UART_Transmit>
		}
		if (isButton3Pressed()){
 8000d2c:	f7ff fd62 	bl	80007f4 <isButton3Pressed>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d065      	beq.n	8000e02 <fsm_manual_run+0x262>
			timer_yellow = temp_timer;
 8000d36:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <fsm_manual_run+0x274>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a39      	ldr	r2, [pc, #228]	; (8000e20 <fsm_manual_run+0x280>)
 8000d3c:	6013      	str	r3, [r2, #0]
			if (timer_red != timer_green + timer_yellow) timer_red = timer_green + timer_yellow;
 8000d3e:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <fsm_manual_run+0x27c>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <fsm_manual_run+0x280>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	441a      	add	r2, r3
 8000d48:	4b33      	ldr	r3, [pc, #204]	; (8000e18 <fsm_manual_run+0x278>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d006      	beq.n	8000d5e <fsm_manual_run+0x1be>
 8000d50:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <fsm_manual_run+0x27c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <fsm_manual_run+0x280>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a2f      	ldr	r2, [pc, #188]	; (8000e18 <fsm_manual_run+0x278>)
 8000d5c:	6013      	str	r3, [r2, #0]
			status_man = INIT;
 8000d5e:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <fsm_manual_run+0x270>)
 8000d60:	2265      	movs	r2, #101	; 0x65
 8000d62:	601a      	str	r2, [r3, #0]
			printstatus();
 8000d64:	f7ff fea6 	bl	8000ab4 <printstatus>
		}
		break;
 8000d68:	e04b      	b.n	8000e02 <fsm_manual_run+0x262>


	case MAN_GREEN:

		if (isButton1Pressed()){
 8000d6a:	f7ff fc6b 	bl	8000644 <isButton1Pressed>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d007      	beq.n	8000d84 <fsm_manual_run+0x1e4>
			temp_timer = 0;
 8000d74:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <fsm_manual_run+0x274>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
			status_man = INIT;
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <fsm_manual_run+0x270>)
 8000d7c:	2265      	movs	r2, #101	; 0x65
 8000d7e:	601a      	str	r2, [r3, #0]
			printstatus();
 8000d80:	f7ff fe98 	bl	8000ab4 <printstatus>
		}
		if (isButton2Pressed()){
 8000d84:	f7ff fcca 	bl	800071c <isButton2Pressed>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d014      	beq.n	8000db8 <fsm_manual_run+0x218>
			temp_timer = temp_timer + 1000;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <fsm_manual_run+0x274>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000d96:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <fsm_manual_run+0x274>)
 8000d98:	6013      	str	r3, [r2, #0]
			char str[100];
			HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!INC: %d#\r\n",temp_timer), 1000);
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <fsm_manual_run+0x274>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4923      	ldr	r1, [pc, #140]	; (8000e30 <fsm_manual_run+0x290>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 f9fe 	bl	80041a4 <siprintf>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	1d39      	adds	r1, r7, #4
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	4820      	ldr	r0, [pc, #128]	; (8000e34 <fsm_manual_run+0x294>)
 8000db4:	f002 fd39 	bl	800382a <HAL_UART_Transmit>
		}
		if (isButton3Pressed()){
 8000db8:	f7ff fd1c 	bl	80007f4 <isButton3Pressed>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d021      	beq.n	8000e06 <fsm_manual_run+0x266>
			timer_green = temp_timer;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <fsm_manual_run+0x274>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <fsm_manual_run+0x27c>)
 8000dc8:	6013      	str	r3, [r2, #0]
			if (timer_red != timer_green + timer_yellow) timer_red = timer_green + timer_yellow;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <fsm_manual_run+0x27c>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <fsm_manual_run+0x280>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	441a      	add	r2, r3
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <fsm_manual_run+0x278>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d006      	beq.n	8000dea <fsm_manual_run+0x24a>
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <fsm_manual_run+0x27c>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <fsm_manual_run+0x280>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a0c      	ldr	r2, [pc, #48]	; (8000e18 <fsm_manual_run+0x278>)
 8000de8:	6013      	str	r3, [r2, #0]
			status_man = INIT;
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <fsm_manual_run+0x270>)
 8000dec:	2265      	movs	r2, #101	; 0x65
 8000dee:	601a      	str	r2, [r3, #0]
			printstatus();
 8000df0:	f7ff fe60 	bl	8000ab4 <printstatus>
		}
		break;
 8000df4:	e007      	b.n	8000e06 <fsm_manual_run+0x266>

	default:
		break;
 8000df6:	bf00      	nop
 8000df8:	e006      	b.n	8000e08 <fsm_manual_run+0x268>
		break;
 8000dfa:	bf00      	nop
 8000dfc:	e004      	b.n	8000e08 <fsm_manual_run+0x268>
		break;
 8000dfe:	bf00      	nop
 8000e00:	e002      	b.n	8000e08 <fsm_manual_run+0x268>
		break;
 8000e02:	bf00      	nop
 8000e04:	e000      	b.n	8000e08 <fsm_manual_run+0x268>
		break;
 8000e06:	bf00      	nop
	}

}
 8000e08:	bf00      	nop
 8000e0a:	3768      	adds	r7, #104	; 0x68
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000058 	.word	0x20000058
 8000e14:	2000018c 	.word	0x2000018c
 8000e18:	2000005c 	.word	0x2000005c
 8000e1c:	20000060 	.word	0x20000060
 8000e20:	20000064 	.word	0x20000064
 8000e24:	2000006c 	.word	0x2000006c
 8000e28:	20000070 	.word	0x20000070
 8000e2c:	20000190 	.word	0x20000190
 8000e30:	08004b14 	.word	0x08004b14
 8000e34:	20000194 	.word	0x20000194

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b09c      	sub	sp, #112	; 0x70
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f000 fd39 	bl	80018b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f8c3 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e46:	f000 f9ef 	bl	8001228 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e4a:	f000 f9c3 	bl	80011d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e4e:	f000 f8ff 	bl	8001050 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e52:	f000 f949 	bl	80010e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 8000e56:	484e      	ldr	r0, [pc, #312]	; (8000f90 <main+0x158>)
 8000e58:	f001 fd8c 	bl	8002974 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	484d      	ldr	r0, [pc, #308]	; (8000f94 <main+0x15c>)
 8000e60:	f001 fe32 	bl	8002ac8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Set up for Pedestrian
  int userButton = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	66fb      	str	r3, [r7, #108]	; 0x6c
  LED3_OFF();
 8000e68:	f7ff fa46 	bl	80002f8 <LED3_OFF>

  //Set up for start
  setTimer1(250);
 8000e6c:	20fa      	movs	r0, #250	; 0xfa
 8000e6e:	f7ff faad 	bl	80003cc <setTimer1>
  int one_sec= 3;
 8000e72:	2303      	movs	r3, #3
 8000e74:	66bb      	str	r3, [r7, #104]	; 0x68
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //All about FSM
	  fsm_manual_run();		//manual fsm
 8000e76:	f7ff fe93 	bl	8000ba0 <fsm_manual_run>
	  light_control_1();	//fsm for traffic light 1
 8000e7a:	f000 fc03 	bl	8001684 <light_control_1>
	  light_control_2();	//fsm for traffic light 2
 8000e7e:	f000 fc77 	bl	8001770 <light_control_2>


	  if (isButton4Pressed()){		// Pedestrian pressed
 8000e82:	f7ff fd49 	bl	8000918 <isButton4Pressed>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d005      	beq.n	8000e98 <main+0x60>
		  userButton = 1;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
		  setTimer5(20000);
 8000e90:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000e94:	f7ff fb0a 	bl	80004ac <setTimer5>
	  }
	  if (timer5_flag == 1){		// Time out
 8000e98:	4b3f      	ldr	r3, [pc, #252]	; (8000f98 <main+0x160>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d103      	bne.n	8000ea8 <main+0x70>
		  userButton = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
		  LED3_OFF();
 8000ea4:	f7ff fa28 	bl	80002f8 <LED3_OFF>
	  }



	  if (timer1_flag == 1){		// One duration blinky 250ms
 8000ea8:	4b3c      	ldr	r3, [pc, #240]	; (8000f9c <main+0x164>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d1e2      	bne.n	8000e76 <main+0x3e>
		  setTimer1(250);
 8000eb0:	20fa      	movs	r0, #250	; 0xfa
 8000eb2:	f7ff fa8b 	bl	80003cc <setTimer1>

		  one_sec++;				// Count down, print to terminal
 8000eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000eb8:	3301      	adds	r3, #1
 8000eba:	66bb      	str	r3, [r7, #104]	; 0x68
		  if (one_sec == 4){
 8000ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d118      	bne.n	8000ef4 <main+0xbc>
			  one_sec = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	66bb      	str	r3, [r7, #104]	; 0x68
			  int time = timer3_counter/100;
 8000ec6:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <main+0x168>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a36      	ldr	r2, [pc, #216]	; (8000fa4 <main+0x16c>)
 8000ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed0:	1152      	asrs	r2, r2, #5
 8000ed2:	17db      	asrs	r3, r3, #31
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	667b      	str	r3, [r7, #100]	; 0x64
			  char str[100];
			  HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!7SEG: %d#\r\n",time), 1000);
 8000ed8:	463b      	mov	r3, r7
 8000eda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000edc:	4932      	ldr	r1, [pc, #200]	; (8000fa8 <main+0x170>)
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 f960 	bl	80041a4 <siprintf>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	4639      	mov	r1, r7
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	482f      	ldr	r0, [pc, #188]	; (8000fac <main+0x174>)
 8000ef0:	f002 fc9b 	bl	800382a <HAL_UART_Transmit>
		  }

	  		  //Cum den 1
		  if (RED1_flag){
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <main+0x178>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <main+0xca>
			  RED1_TOGGLE();
 8000efc:	f7ff f93e 	bl	800017c <RED1_TOGGLE>
 8000f00:	e00c      	b.n	8000f1c <main+0xe4>
		  }
		  else if(YELLOW1_flag){
 8000f02:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <main+0x17c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <main+0xd8>
			  YELLOW1_TOGGLE();
 8000f0a:	f7ff f951 	bl	80001b0 <YELLOW1_TOGGLE>
 8000f0e:	e005      	b.n	8000f1c <main+0xe4>
		  }
		  else if(GREEN1_flag){
 8000f10:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <main+0x180>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <main+0xe4>
	  		  GREEN1_TOGGLE();
 8000f18:	f7ff f966 	bl	80001e8 <GREEN1_TOGGLE>
	  	  }

	  		  //Cum den 2
		  if(RED2_flag){
 8000f1c:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <main+0x184>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00f      	beq.n	8000f44 <main+0x10c>
	  		  RED2_TOGGLE();
 8000f24:	f7ff f994 	bl	8000250 <RED2_TOGGLE>
	  		  //__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
	  		  //toggle = -1;
	 		  if (userButton) {
 8000f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0a3      	beq.n	8000e76 <main+0x3e>
	 			 act_buzzer =0;
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <main+0x188>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
	 			  RED3_TOGGLE();
 8000f34:	f7ff f9f8 	bl	8000328 <RED3_TOGGLE>
	 			  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,-100);
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <main+0x15c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
 8000f42:	e798      	b.n	8000e76 <main+0x3e>
	 		  }
		  }
		  else if(YELLOW2_flag){
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <main+0x18c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d012      	beq.n	8000f72 <main+0x13a>
			  YELLOW2_TOGGLE();
 8000f4c:	f7ff f99c 	bl	8000288 <YELLOW2_TOGGLE>
			  if (userButton) {
 8000f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d005      	beq.n	8000f62 <main+0x12a>
				  YELLOW3_TOGGLE();
 8000f56:	f7ff fa01 	bl	800035c <YELLOW3_TOGGLE>
				  // int feq = 100 - 100*(10*timer3_counter/timer_yellow);
				  // __HAL_TIM_SET_AUTORELOAD(&htim3,feq*5/2);
				  // __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,feq);
				  //toggle =1-toggle;
				  // HAL_Delay(100);
				  act_buzzer =1 ;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <main+0x188>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	e789      	b.n	8000e76 <main+0x3e>
			  }
			  else {
				  act_buzzer =0;
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <main+0x188>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
				  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <main+0x15c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
 8000f70:	e781      	b.n	8000e76 <main+0x3e>
			  }
		  }
	  	  else if(GREEN2_flag){
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <main+0x190>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f43f af7d 	beq.w	8000e76 <main+0x3e>
	  		  GREEN2_TOGGLE();
 8000f7c:	f7ff f9a0 	bl	80002c0 <GREEN2_TOGGLE>
	  		  if (userButton) GREEN3_TOGGLE();
 8000f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f43f af77 	beq.w	8000e76 <main+0x3e>
 8000f88:	f7ff fa04 	bl	8000394 <GREEN3_TOGGLE>
	  fsm_manual_run();		//manual fsm
 8000f8c:	e773      	b.n	8000e76 <main+0x3e>
 8000f8e:	bf00      	nop
 8000f90:	200001d8 	.word	0x200001d8
 8000f94:	20000220 	.word	0x20000220
 8000f98:	20000158 	.word	0x20000158
 8000f9c:	20000148 	.word	0x20000148
 8000fa0:	20000128 	.word	0x20000128
 8000fa4:	51eb851f 	.word	0x51eb851f
 8000fa8:	08004b20 	.word	0x08004b20
 8000fac:	20000194 	.word	0x20000194
 8000fb0:	2000026c 	.word	0x2000026c
 8000fb4:	20000274 	.word	0x20000274
 8000fb8:	2000027c 	.word	0x2000027c
 8000fbc:	20000270 	.word	0x20000270
 8000fc0:	20000188 	.word	0x20000188
 8000fc4:	20000278 	.word	0x20000278
 8000fc8:	20000280 	.word	0x20000280

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b090      	sub	sp, #64	; 0x40
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0318 	add.w	r3, r7, #24
 8000fd6:	2228      	movs	r2, #40	; 0x28
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f003 f8da 	bl	8004194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ffe:	2300      	movs	r3, #0
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001002:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	4618      	mov	r0, r3
 800100e:	f001 f847 	bl	80020a0 <HAL_RCC_OscConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001018:	f000 f9ba 	bl	8001390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101c:	230f      	movs	r3, #15
 800101e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001020:	2302      	movs	r3, #2
 8001022:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800102c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2102      	movs	r1, #2
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fab4 	bl	80025a4 <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001042:	f000 f9a5 	bl	8001390 <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	3740      	adds	r7, #64	; 0x40
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	463b      	mov	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_TIM2_Init+0x94>)
 800106e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001072:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <MX_TIM2_Init+0x94>)
 8001076:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800107a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_TIM2_Init+0x94>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_TIM2_Init+0x94>)
 8001084:	224f      	movs	r2, #79	; 0x4f
 8001086:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_TIM2_Init+0x94>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_TIM2_Init+0x94>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001094:	4813      	ldr	r0, [pc, #76]	; (80010e4 <MX_TIM2_Init+0x94>)
 8001096:	f001 fc1d 	bl	80028d4 <HAL_TIM_Base_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010a0:	f000 f976 	bl	8001390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	4619      	mov	r1, r3
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <MX_TIM2_Init+0x94>)
 80010b2:	f001 ff71 	bl	8002f98 <HAL_TIM_ConfigClockSource>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010bc:	f000 f968 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_TIM2_Init+0x94>)
 80010ce:	f002 faef 	bl	80036b0 <HAL_TIMEx_MasterConfigSynchronization>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010d8:	f000 f95a 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200001d8 	.word	0x200001d8

080010e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08e      	sub	sp, #56	; 0x38
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <MX_TIM3_Init+0xe4>)
 800111a:	4a2d      	ldr	r2, [pc, #180]	; (80011d0 <MX_TIM3_Init+0xe8>)
 800111c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <MX_TIM3_Init+0xe4>)
 8001120:	223f      	movs	r2, #63	; 0x3f
 8001122:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <MX_TIM3_Init+0xe4>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_TIM3_Init+0xe4>)
 800112c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001130:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_TIM3_Init+0xe4>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <MX_TIM3_Init+0xe4>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800113e:	4823      	ldr	r0, [pc, #140]	; (80011cc <MX_TIM3_Init+0xe4>)
 8001140:	f001 fbc8 	bl	80028d4 <HAL_TIM_Base_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800114a:	f000 f921 	bl	8001390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001154:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001158:	4619      	mov	r1, r3
 800115a:	481c      	ldr	r0, [pc, #112]	; (80011cc <MX_TIM3_Init+0xe4>)
 800115c:	f001 ff1c 	bl	8002f98 <HAL_TIM_ConfigClockSource>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001166:	f000 f913 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800116a:	4818      	ldr	r0, [pc, #96]	; (80011cc <MX_TIM3_Init+0xe4>)
 800116c:	f001 fc54 	bl	8002a18 <HAL_TIM_PWM_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001176:	f000 f90b 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	4619      	mov	r1, r3
 8001188:	4810      	ldr	r0, [pc, #64]	; (80011cc <MX_TIM3_Init+0xe4>)
 800118a:	f002 fa91 	bl	80036b0 <HAL_TIMEx_MasterConfigSynchronization>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001194:	f000 f8fc 	bl	8001390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001198:	2360      	movs	r3, #96	; 0x60
 800119a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM3_Init+0xe4>)
 80011b0:	f001 fe34 	bl	8002e1c <HAL_TIM_PWM_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011ba:	f000 f8e9 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM3_Init+0xe4>)
 80011c0:	f000 f95e 	bl	8001480 <HAL_TIM_MspPostInit>

}
 80011c4:	bf00      	nop
 80011c6:	3738      	adds	r7, #56	; 0x38
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000220 	.word	0x20000220
 80011d0:	40000400 	.word	0x40000400

080011d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_USART2_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 800120c:	f002 fac0 	bl	8003790 <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f8bb 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000194 	.word	0x20000194
 8001224:	40004400 	.word	0x40004400

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123c:	4b45      	ldr	r3, [pc, #276]	; (8001354 <MX_GPIO_Init+0x12c>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a44      	ldr	r2, [pc, #272]	; (8001354 <MX_GPIO_Init+0x12c>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b42      	ldr	r3, [pc, #264]	; (8001354 <MX_GPIO_Init+0x12c>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001254:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <MX_GPIO_Init+0x12c>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a3e      	ldr	r2, [pc, #248]	; (8001354 <MX_GPIO_Init+0x12c>)
 800125a:	f043 0320 	orr.w	r3, r3, #32
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b3c      	ldr	r3, [pc, #240]	; (8001354 <MX_GPIO_Init+0x12c>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b39      	ldr	r3, [pc, #228]	; (8001354 <MX_GPIO_Init+0x12c>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a38      	ldr	r2, [pc, #224]	; (8001354 <MX_GPIO_Init+0x12c>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b36      	ldr	r3, [pc, #216]	; (8001354 <MX_GPIO_Init+0x12c>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001284:	4b33      	ldr	r3, [pc, #204]	; (8001354 <MX_GPIO_Init+0x12c>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a32      	ldr	r2, [pc, #200]	; (8001354 <MX_GPIO_Init+0x12c>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b30      	ldr	r3, [pc, #192]	; (8001354 <MX_GPIO_Init+0x12c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED3B_Pin|LED1A_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80012a2:	482d      	ldr	r0, [pc, #180]	; (8001358 <MX_GPIO_Init+0x130>)
 80012a4:	f000 fec1 	bl	800202a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED1_Pin|LED3A_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin
 80012a8:	2200      	movs	r2, #0
 80012aa:	f64f 71bc 	movw	r1, #65468	; 0xffbc
 80012ae:	482b      	ldr	r0, [pc, #172]	; (800135c <MX_GPIO_Init+0x134>)
 80012b0:	f000 febb 	bl	800202a <HAL_GPIO_WritePin>
                          |LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|LED1B_Pin
                          |LED2B_Pin|LED2A_Pin|LED_RED3_Pin|LED_YELLOW3_Pin
                          |LED_GREEN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ba:	4b29      	ldr	r3, [pc, #164]	; (8001360 <MX_GPIO_Init+0x138>)
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4619      	mov	r1, r3
 80012c8:	4826      	ldr	r0, [pc, #152]	; (8001364 <MX_GPIO_Init+0x13c>)
 80012ca:	f000 fd13 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTONUSER_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTONUSER_Pin|BUTTON1_Pin|BUTTON2_Pin;
 80012ce:	2313      	movs	r3, #19
 80012d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	481d      	ldr	r0, [pc, #116]	; (8001358 <MX_GPIO_Init+0x130>)
 80012e2:	f000 fd07 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED3B_Pin LED1A_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED3B_Pin|LED1A_Pin;
 80012e6:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	4619      	mov	r1, r3
 80012fe:	4816      	ldr	r0, [pc, #88]	; (8001358 <MX_GPIO_Init+0x130>)
 8001300:	f000 fcf8 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8001304:	2301      	movs	r3, #1
 8001306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130c:	2301      	movs	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4619      	mov	r1, r3
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <MX_GPIO_Init+0x134>)
 8001318:	f000 fcec 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED3A_Pin LED_YELLOW1_Pin LED_GREEN1_Pin
                           LED_RED2_Pin LED_YELLOW2_Pin LED_GREEN2_Pin LED1B_Pin
                           LED2B_Pin LED2A_Pin LED_RED3_Pin LED_YELLOW3_Pin
                           LED_GREEN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED3A_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin
 800131c:	f64f 73bc 	movw	r3, #65468	; 0xffbc
 8001320:	613b      	str	r3, [r7, #16]
                          |LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|LED1B_Pin
                          |LED2B_Pin|LED2A_Pin|LED_RED3_Pin|LED_YELLOW3_Pin
                          |LED_GREEN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2302      	movs	r3, #2
 800132c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	4619      	mov	r1, r3
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <MX_GPIO_Init+0x134>)
 8001336:	f000 fcdd 	bl	8001cf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2028      	movs	r0, #40	; 0x28
 8001340:	f000 fbf1 	bl	8001b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001344:	2028      	movs	r0, #40	; 0x28
 8001346:	f000 fc0a 	bl	8001b5e <HAL_NVIC_EnableIRQ>

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	40010800 	.word	0x40010800
 800135c:	40010c00 	.word	0x40010c00
 8001360:	10110000 	.word	0x10110000
 8001364:	40011000 	.word	0x40011000

08001368 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001370:	f7ff f8b8 	bl	80004e4 <timerRun>
	getKeyInput1();
 8001374:	f7ff f978 	bl	8000668 <getKeyInput1>
	getKeyInput2();
 8001378:	f7ff f9e2 	bl	8000740 <getKeyInput2>
	getKeyInput3();
 800137c:	f7ff fa5e 	bl	800083c <getKeyInput3>
	getKeyInput4();
 8001380:	f7ff fadc 	bl	800093c <getKeyInput4>
	buzzer();
 8001384:	f7ff fb34 	bl	80009f0 <buzzer>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001398:	e7fe      	b.n	8001398 <Error_Handler+0x8>
	...

0800139c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_MspInit+0x5c>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <HAL_MspInit+0x5c>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6193      	str	r3, [r2, #24]
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_MspInit+0x5c>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_MspInit+0x5c>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <HAL_MspInit+0x5c>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_MspInit+0x5c>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_MspInit+0x60>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_MspInit+0x60>)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000

08001400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001410:	d114      	bne.n	800143c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_TIM_Base_MspInit+0x78>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a18      	ldr	r2, [pc, #96]	; (8001478 <HAL_TIM_Base_MspInit+0x78>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_TIM_Base_MspInit+0x78>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	201c      	movs	r0, #28
 8001430:	f000 fb79 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001434:	201c      	movs	r0, #28
 8001436:	f000 fb92 	bl	8001b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800143a:	e018      	b.n	800146e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_TIM_Base_MspInit+0x7c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d113      	bne.n	800146e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_TIM_Base_MspInit+0x78>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_TIM_Base_MspInit+0x78>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_TIM_Base_MspInit+0x78>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	201d      	movs	r0, #29
 8001464:	f000 fb5f 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001468:	201d      	movs	r0, #29
 800146a:	f000 fb78 	bl	8001b5e <HAL_NVIC_EnableIRQ>
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	40000400 	.word	0x40000400

08001480 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_TIM_MspPostInit+0x58>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d117      	bne.n	80014d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_TIM_MspPostInit+0x5c>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <HAL_TIM_MspPostInit+0x5c>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_TIM_MspPostInit+0x5c>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014b8:	2340      	movs	r3, #64	; 0x40
 80014ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <HAL_TIM_MspPostInit+0x60>)
 80014cc:	f000 fc12 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40000400 	.word	0x40000400
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010800 	.word	0x40010800

080014e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a19      	ldr	r2, [pc, #100]	; (8001564 <HAL_UART_MspInit+0x80>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d12b      	bne.n	800155c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_UART_MspInit+0x84>)
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	4a17      	ldr	r2, [pc, #92]	; (8001568 <HAL_UART_MspInit+0x84>)
 800150a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150e:	61d3      	str	r3, [r2, #28]
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_UART_MspInit+0x84>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_UART_MspInit+0x84>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_UART_MspInit+0x84>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_UART_MspInit+0x84>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001534:	230c      	movs	r3, #12
 8001536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2302      	movs	r3, #2
 800153e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4619      	mov	r1, r3
 8001546:	4809      	ldr	r0, [pc, #36]	; (800156c <HAL_UART_MspInit+0x88>)
 8001548:	f000 fbd4 	bl	8001cf4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	2026      	movs	r0, #38	; 0x26
 8001552:	f000 fae8 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001556:	2026      	movs	r0, #38	; 0x26
 8001558:	f000 fb01 	bl	8001b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40004400 	.word	0x40004400
 8001568:	40021000 	.word	0x40021000
 800156c:	40010800 	.word	0x40010800

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b6:	f000 f9c3 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <TIM2_IRQHandler+0x10>)
 80015c6:	f001 fb21 	bl	8002c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200001d8 	.word	0x200001d8

080015d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <TIM3_IRQHandler+0x10>)
 80015da:	f001 fb17 	bl	8002c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000220 	.word	0x20000220

080015e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <USART2_IRQHandler+0x10>)
 80015ee:	f002 f9af 	bl	8003950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000194 	.word	0x20000194

080015fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001600:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001604:	f000 fd2a 	bl	800205c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <_sbrk+0x5c>)
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <_sbrk+0x60>)
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <_sbrk+0x64>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <_sbrk+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d207      	bcs.n	800164c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800163c:	f002 fd80 	bl	8004140 <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	220c      	movs	r2, #12
 8001644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e009      	b.n	8001660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <_sbrk+0x64>)
 800165c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20005000 	.word	0x20005000
 800166c:	00000400 	.word	0x00000400
 8001670:	20000268 	.word	0x20000268
 8001674:	20000298 	.word	0x20000298

08001678 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <light_control_1>:

int status_light1 = INIT1;
int status_light2 = INIT2;


void light_control_1(){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0

	switch(status_light1){
 8001688:	4b31      	ldr	r3, [pc, #196]	; (8001750 <light_control_1+0xcc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3b13      	subs	r3, #19
 800168e:	2b03      	cmp	r3, #3
 8001690:	d854      	bhi.n	800173c <light_control_1+0xb8>
 8001692:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <light_control_1+0x14>)
 8001694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001698:	080016a9 	.word	0x080016a9
 800169c:	080016bf 	.word	0x080016bf
 80016a0:	08001713 	.word	0x08001713
 80016a4:	080016e9 	.word	0x080016e9

		case INIT1:
			setTimer2(timer_red);
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <light_control_1+0xd0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fea9 	bl	8000404 <setTimer2>
			LED1_OFF();
 80016b2:	f7fe fd4b 	bl	800014c <LED1_OFF>
			status_light1 = AUTO_RED1;
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <light_control_1+0xcc>)
 80016b8:	2214      	movs	r2, #20
 80016ba:	601a      	str	r2, [r3, #0]
			break;
 80016bc:	e045      	b.n	800174a <light_control_1+0xc6>

		case AUTO_RED1:
			RED1_flag = 1;
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <light_control_1+0xd4>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <light_control_1+0xd8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d139      	bne.n	8001740 <light_control_1+0xbc>
				setTimer2(timer_green);
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <light_control_1+0xdc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fe97 	bl	8000404 <setTimer2>
				LED1_OFF();
 80016d6:	f7fe fd39 	bl	800014c <LED1_OFF>
				RED1_flag = 0;
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <light_control_1+0xd4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_GREEN1;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <light_control_1+0xcc>)
 80016e2:	2216      	movs	r2, #22
 80016e4:	601a      	str	r2, [r3, #0]
			}
			break;
 80016e6:	e02b      	b.n	8001740 <light_control_1+0xbc>

		case AUTO_GREEN1:
			GREEN1_flag = 1;
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <light_control_1+0xe0>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <light_control_1+0xd8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d126      	bne.n	8001744 <light_control_1+0xc0>
				setTimer2(timer_yellow);
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <light_control_1+0xe4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fe82 	bl	8000404 <setTimer2>
				LED1_OFF();
 8001700:	f7fe fd24 	bl	800014c <LED1_OFF>
				GREEN1_flag = 0;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <light_control_1+0xe0>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_YELLOW1;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <light_control_1+0xcc>)
 800170c:	2215      	movs	r2, #21
 800170e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001710:	e018      	b.n	8001744 <light_control_1+0xc0>

		case AUTO_YELLOW1:
			YELLOW1_flag = 1;
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <light_control_1+0xe8>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <light_control_1+0xd8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d113      	bne.n	8001748 <light_control_1+0xc4>
				setTimer2(timer_red);
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <light_control_1+0xd0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fe6d 	bl	8000404 <setTimer2>
				LED1_OFF();
 800172a:	f7fe fd0f 	bl	800014c <LED1_OFF>
				YELLOW1_flag = 0;
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <light_control_1+0xe8>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_RED1;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <light_control_1+0xcc>)
 8001736:	2214      	movs	r2, #20
 8001738:	601a      	str	r2, [r3, #0]
			}
			break;
 800173a:	e005      	b.n	8001748 <light_control_1+0xc4>
		default:
			break;
 800173c:	bf00      	nop
 800173e:	e004      	b.n	800174a <light_control_1+0xc6>
			break;
 8001740:	bf00      	nop
 8001742:	e002      	b.n	800174a <light_control_1+0xc6>
			break;
 8001744:	bf00      	nop
 8001746:	e000      	b.n	800174a <light_control_1+0xc6>
			break;
 8001748:	bf00      	nop
		}

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000006c 	.word	0x2000006c
 8001754:	2000005c 	.word	0x2000005c
 8001758:	2000026c 	.word	0x2000026c
 800175c:	2000014c 	.word	0x2000014c
 8001760:	20000060 	.word	0x20000060
 8001764:	2000027c 	.word	0x2000027c
 8001768:	20000064 	.word	0x20000064
 800176c:	20000274 	.word	0x20000274

08001770 <light_control_2>:




void light_control_2(){
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0

	switch(status_light2){
 8001774:	4b34      	ldr	r3, [pc, #208]	; (8001848 <light_control_2+0xd8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3b17      	subs	r3, #23
 800177a:	2b03      	cmp	r3, #3
 800177c:	d85a      	bhi.n	8001834 <light_control_2+0xc4>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <light_control_2+0x14>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	08001795 	.word	0x08001795
 8001788:	080017b7 	.word	0x080017b7
 800178c:	080017e1 	.word	0x080017e1
 8001790:	0800180b 	.word	0x0800180b

		case INIT2:
			setTimer3(timer_green);
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <light_control_2+0xdc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fe4f 	bl	800043c <setTimer3>
			LED2_OFF();
 800179e:	f7fe fd3f 	bl	8000220 <LED2_OFF>
			RED2_flag = 0;
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <light_control_2+0xe0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
			YELLOW2_flag = 0;
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <light_control_2+0xe4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
			status_light2 = AUTO_GREEN2;
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <light_control_2+0xd8>)
 80017b0:	221a      	movs	r2, #26
 80017b2:	601a      	str	r2, [r3, #0]
			break;
 80017b4:	e045      	b.n	8001842 <light_control_2+0xd2>

		case AUTO_RED2:
			RED2_flag = 1;
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <light_control_2+0xe0>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <light_control_2+0xe8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d139      	bne.n	8001838 <light_control_2+0xc8>
				setTimer3(timer_green);
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <light_control_2+0xdc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fe37 	bl	800043c <setTimer3>
				LED2_OFF();
 80017ce:	f7fe fd27 	bl	8000220 <LED2_OFF>
				RED2_flag = 0;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <light_control_2+0xe0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_GREEN2;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <light_control_2+0xd8>)
 80017da:	221a      	movs	r2, #26
 80017dc:	601a      	str	r2, [r3, #0]
			}
			break;
 80017de:	e02b      	b.n	8001838 <light_control_2+0xc8>

		case AUTO_YELLOW2:
			YELLOW2_flag = 1;
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <light_control_2+0xe4>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <light_control_2+0xe8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d126      	bne.n	800183c <light_control_2+0xcc>
				setTimer3(timer_red);
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <light_control_2+0xec>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fe22 	bl	800043c <setTimer3>
				LED2_OFF();
 80017f8:	f7fe fd12 	bl	8000220 <LED2_OFF>
				YELLOW2_flag = 0;
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <light_control_2+0xe4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_RED2;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <light_control_2+0xd8>)
 8001804:	2218      	movs	r2, #24
 8001806:	601a      	str	r2, [r3, #0]
			}
			break;
 8001808:	e018      	b.n	800183c <light_control_2+0xcc>

		case AUTO_GREEN2:
			GREEN2_flag = 1;
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <light_control_2+0xf0>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <light_control_2+0xe8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d113      	bne.n	8001840 <light_control_2+0xd0>
				setTimer3(timer_yellow);
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <light_control_2+0xf4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe0d 	bl	800043c <setTimer3>
				LED2_OFF();
 8001822:	f7fe fcfd 	bl	8000220 <LED2_OFF>
				GREEN2_flag = 0;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <light_control_2+0xf0>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_YELLOW2;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <light_control_2+0xd8>)
 800182e:	2219      	movs	r2, #25
 8001830:	601a      	str	r2, [r3, #0]
			}
			break;
 8001832:	e005      	b.n	8001840 <light_control_2+0xd0>
		default:
			break;
 8001834:	bf00      	nop
 8001836:	e004      	b.n	8001842 <light_control_2+0xd2>
			break;
 8001838:	bf00      	nop
 800183a:	e002      	b.n	8001842 <light_control_2+0xd2>
			break;
 800183c:	bf00      	nop
 800183e:	e000      	b.n	8001842 <light_control_2+0xd2>
			break;
 8001840:	bf00      	nop
		}

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000070 	.word	0x20000070
 800184c:	20000060 	.word	0x20000060
 8001850:	20000270 	.word	0x20000270
 8001854:	20000278 	.word	0x20000278
 8001858:	20000150 	.word	0x20000150
 800185c:	2000005c 	.word	0x2000005c
 8001860:	20000280 	.word	0x20000280
 8001864:	20000064 	.word	0x20000064

08001868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800186a:	490d      	ldr	r1, [pc, #52]	; (80018a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001880:	4c0a      	ldr	r4, [pc, #40]	; (80018ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800188e:	f7ff fef3 	bl	8001678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001892:	f002 fc5b 	bl	800414c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001896:	f7ff facf 	bl	8000e38 <main>
  bx lr
 800189a:	4770      	bx	lr
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a0:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80018a4:	08004b94 	.word	0x08004b94
  ldr r2, =_sbss
 80018a8:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80018ac:	20000298 	.word	0x20000298

080018b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC1_2_IRQHandler>
	...

080018b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_Init+0x28>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_Init+0x28>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f923 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f808 	bl	80018e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff fd64 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40022000 	.word	0x40022000

080018e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x54>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x58>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f93b 	bl	8001b7a <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00e      	b.n	800192c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d80a      	bhi.n	800192a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f000 f903 	bl	8001b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4a06      	ldr	r2, [pc, #24]	; (800193c <HAL_InitTick+0x5c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000068 	.word	0x20000068
 8001938:	20000078 	.word	0x20000078
 800193c:	20000074 	.word	0x20000074

08001940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_IncTick+0x1c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_IncTick+0x20>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a03      	ldr	r2, [pc, #12]	; (8001960 <HAL_IncTick+0x20>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	20000078 	.word	0x20000078
 8001960:	20000284 	.word	0x20000284

08001964 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b02      	ldr	r3, [pc, #8]	; (8001974 <HAL_GetTick+0x10>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	20000284 	.word	0x20000284

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4906      	ldr	r1, [pc, #24]	; (8001a10 <__NVIC_EnableIRQ+0x34>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	; (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	; 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff90 	bl	8001a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff2d 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff42 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff90 	bl	8001a68 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5f 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff35 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffa2 	bl	8001acc <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d008      	beq.n	8001bba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2204      	movs	r2, #4
 8001bac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e020      	b.n	8001bfc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 020e 	bic.w	r2, r2, #14
 8001bc8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be2:	2101      	movs	r1, #1
 8001be4:	fa01 f202 	lsl.w	r2, r1, r2
 8001be8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d005      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2204      	movs	r2, #4
 8001c22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e051      	b.n	8001cce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 020e 	bic.w	r2, r2, #14
 8001c38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <HAL_DMA_Abort_IT+0xd0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d029      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xa0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a20      	ldr	r2, [pc, #128]	; (8001cdc <HAL_DMA_Abort_IT+0xd4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d022      	beq.n	8001ca4 <HAL_DMA_Abort_IT+0x9c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <HAL_DMA_Abort_IT+0xd8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d01a      	beq.n	8001c9e <HAL_DMA_Abort_IT+0x96>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <HAL_DMA_Abort_IT+0xdc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d012      	beq.n	8001c98 <HAL_DMA_Abort_IT+0x90>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <HAL_DMA_Abort_IT+0xe0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00a      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x8a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <HAL_DMA_Abort_IT+0xe4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d102      	bne.n	8001c8c <HAL_DMA_Abort_IT+0x84>
 8001c86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c8a:	e00e      	b.n	8001caa <HAL_DMA_Abort_IT+0xa2>
 8001c8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c90:	e00b      	b.n	8001caa <HAL_DMA_Abort_IT+0xa2>
 8001c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c96:	e008      	b.n	8001caa <HAL_DMA_Abort_IT+0xa2>
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	e005      	b.n	8001caa <HAL_DMA_Abort_IT+0xa2>
 8001c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca2:	e002      	b.n	8001caa <HAL_DMA_Abort_IT+0xa2>
 8001ca4:	2310      	movs	r3, #16
 8001ca6:	e000      	b.n	8001caa <HAL_DMA_Abort_IT+0xa2>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	4a11      	ldr	r2, [pc, #68]	; (8001cf0 <HAL_DMA_Abort_IT+0xe8>)
 8001cac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
    } 
  }
  return status;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40020008 	.word	0x40020008
 8001cdc:	4002001c 	.word	0x4002001c
 8001ce0:	40020030 	.word	0x40020030
 8001ce4:	40020044 	.word	0x40020044
 8001ce8:	40020058 	.word	0x40020058
 8001cec:	4002006c 	.word	0x4002006c
 8001cf0:	40020000 	.word	0x40020000

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b08b      	sub	sp, #44	; 0x2c
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d02:	2300      	movs	r3, #0
 8001d04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d06:	e169      	b.n	8001fdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f040 8158 	bne.w	8001fd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4a9a      	ldr	r2, [pc, #616]	; (8001f94 <HAL_GPIO_Init+0x2a0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d05e      	beq.n	8001dee <HAL_GPIO_Init+0xfa>
 8001d30:	4a98      	ldr	r2, [pc, #608]	; (8001f94 <HAL_GPIO_Init+0x2a0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d875      	bhi.n	8001e22 <HAL_GPIO_Init+0x12e>
 8001d36:	4a98      	ldr	r2, [pc, #608]	; (8001f98 <HAL_GPIO_Init+0x2a4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d058      	beq.n	8001dee <HAL_GPIO_Init+0xfa>
 8001d3c:	4a96      	ldr	r2, [pc, #600]	; (8001f98 <HAL_GPIO_Init+0x2a4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d86f      	bhi.n	8001e22 <HAL_GPIO_Init+0x12e>
 8001d42:	4a96      	ldr	r2, [pc, #600]	; (8001f9c <HAL_GPIO_Init+0x2a8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d052      	beq.n	8001dee <HAL_GPIO_Init+0xfa>
 8001d48:	4a94      	ldr	r2, [pc, #592]	; (8001f9c <HAL_GPIO_Init+0x2a8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d869      	bhi.n	8001e22 <HAL_GPIO_Init+0x12e>
 8001d4e:	4a94      	ldr	r2, [pc, #592]	; (8001fa0 <HAL_GPIO_Init+0x2ac>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d04c      	beq.n	8001dee <HAL_GPIO_Init+0xfa>
 8001d54:	4a92      	ldr	r2, [pc, #584]	; (8001fa0 <HAL_GPIO_Init+0x2ac>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d863      	bhi.n	8001e22 <HAL_GPIO_Init+0x12e>
 8001d5a:	4a92      	ldr	r2, [pc, #584]	; (8001fa4 <HAL_GPIO_Init+0x2b0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d046      	beq.n	8001dee <HAL_GPIO_Init+0xfa>
 8001d60:	4a90      	ldr	r2, [pc, #576]	; (8001fa4 <HAL_GPIO_Init+0x2b0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d85d      	bhi.n	8001e22 <HAL_GPIO_Init+0x12e>
 8001d66:	2b12      	cmp	r3, #18
 8001d68:	d82a      	bhi.n	8001dc0 <HAL_GPIO_Init+0xcc>
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	d859      	bhi.n	8001e22 <HAL_GPIO_Init+0x12e>
 8001d6e:	a201      	add	r2, pc, #4	; (adr r2, 8001d74 <HAL_GPIO_Init+0x80>)
 8001d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d74:	08001def 	.word	0x08001def
 8001d78:	08001dc9 	.word	0x08001dc9
 8001d7c:	08001ddb 	.word	0x08001ddb
 8001d80:	08001e1d 	.word	0x08001e1d
 8001d84:	08001e23 	.word	0x08001e23
 8001d88:	08001e23 	.word	0x08001e23
 8001d8c:	08001e23 	.word	0x08001e23
 8001d90:	08001e23 	.word	0x08001e23
 8001d94:	08001e23 	.word	0x08001e23
 8001d98:	08001e23 	.word	0x08001e23
 8001d9c:	08001e23 	.word	0x08001e23
 8001da0:	08001e23 	.word	0x08001e23
 8001da4:	08001e23 	.word	0x08001e23
 8001da8:	08001e23 	.word	0x08001e23
 8001dac:	08001e23 	.word	0x08001e23
 8001db0:	08001e23 	.word	0x08001e23
 8001db4:	08001e23 	.word	0x08001e23
 8001db8:	08001dd1 	.word	0x08001dd1
 8001dbc:	08001de5 	.word	0x08001de5
 8001dc0:	4a79      	ldr	r2, [pc, #484]	; (8001fa8 <HAL_GPIO_Init+0x2b4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dc6:	e02c      	b.n	8001e22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	623b      	str	r3, [r7, #32]
          break;
 8001dce:	e029      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e024      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	3308      	adds	r3, #8
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e01f      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	330c      	adds	r3, #12
 8001dea:	623b      	str	r3, [r7, #32]
          break;
 8001dec:	e01a      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001df6:	2304      	movs	r3, #4
 8001df8:	623b      	str	r3, [r7, #32]
          break;
 8001dfa:	e013      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d105      	bne.n	8001e10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e04:	2308      	movs	r3, #8
 8001e06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	611a      	str	r2, [r3, #16]
          break;
 8001e0e:	e009      	b.n	8001e24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e10:	2308      	movs	r3, #8
 8001e12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	615a      	str	r2, [r3, #20]
          break;
 8001e1a:	e003      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
          break;
 8001e20:	e000      	b.n	8001e24 <HAL_GPIO_Init+0x130>
          break;
 8001e22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2bff      	cmp	r3, #255	; 0xff
 8001e28:	d801      	bhi.n	8001e2e <HAL_GPIO_Init+0x13a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	e001      	b.n	8001e32 <HAL_GPIO_Init+0x13e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3304      	adds	r3, #4
 8001e32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2bff      	cmp	r3, #255	; 0xff
 8001e38:	d802      	bhi.n	8001e40 <HAL_GPIO_Init+0x14c>
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	e002      	b.n	8001e46 <HAL_GPIO_Init+0x152>
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	3b08      	subs	r3, #8
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	210f      	movs	r1, #15
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	401a      	ands	r2, r3
 8001e58:	6a39      	ldr	r1, [r7, #32]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	431a      	orrs	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80b1 	beq.w	8001fd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e74:	4b4d      	ldr	r3, [pc, #308]	; (8001fac <HAL_GPIO_Init+0x2b8>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4a4c      	ldr	r2, [pc, #304]	; (8001fac <HAL_GPIO_Init+0x2b8>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6193      	str	r3, [r2, #24]
 8001e80:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <HAL_GPIO_Init+0x2b8>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e8c:	4a48      	ldr	r2, [pc, #288]	; (8001fb0 <HAL_GPIO_Init+0x2bc>)
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	220f      	movs	r2, #15
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4013      	ands	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a40      	ldr	r2, [pc, #256]	; (8001fb4 <HAL_GPIO_Init+0x2c0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d013      	beq.n	8001ee0 <HAL_GPIO_Init+0x1ec>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3f      	ldr	r2, [pc, #252]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00d      	beq.n	8001edc <HAL_GPIO_Init+0x1e8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3e      	ldr	r2, [pc, #248]	; (8001fbc <HAL_GPIO_Init+0x2c8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d007      	beq.n	8001ed8 <HAL_GPIO_Init+0x1e4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3d      	ldr	r2, [pc, #244]	; (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d101      	bne.n	8001ed4 <HAL_GPIO_Init+0x1e0>
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e006      	b.n	8001ee2 <HAL_GPIO_Init+0x1ee>
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	e004      	b.n	8001ee2 <HAL_GPIO_Init+0x1ee>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e002      	b.n	8001ee2 <HAL_GPIO_Init+0x1ee>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_GPIO_Init+0x1ee>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee4:	f002 0203 	and.w	r2, r2, #3
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	4093      	lsls	r3, r2
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ef2:	492f      	ldr	r1, [pc, #188]	; (8001fb0 <HAL_GPIO_Init+0x2bc>)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	492c      	ldr	r1, [pc, #176]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f1a:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4928      	ldr	r1, [pc, #160]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	4922      	ldr	r1, [pc, #136]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	491e      	ldr	r1, [pc, #120]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	4918      	ldr	r1, [pc, #96]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4914      	ldr	r1, [pc, #80]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d021      	beq.n	8001fc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
 8001f90:	e021      	b.n	8001fd6 <HAL_GPIO_Init+0x2e2>
 8001f92:	bf00      	nop
 8001f94:	10320000 	.word	0x10320000
 8001f98:	10310000 	.word	0x10310000
 8001f9c:	10220000 	.word	0x10220000
 8001fa0:	10210000 	.word	0x10210000
 8001fa4:	10120000 	.word	0x10120000
 8001fa8:	10110000 	.word	0x10110000
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40010800 	.word	0x40010800
 8001fb8:	40010c00 	.word	0x40010c00
 8001fbc:	40011000 	.word	0x40011000
 8001fc0:	40011400 	.word	0x40011400
 8001fc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_GPIO_Init+0x304>)
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	4909      	ldr	r1, [pc, #36]	; (8001ff8 <HAL_GPIO_Init+0x304>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	3301      	adds	r3, #1
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f47f ae8e 	bne.w	8001d08 <HAL_GPIO_Init+0x14>
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	372c      	adds	r7, #44	; 0x2c
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	40010400 	.word	0x40010400

08001ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e001      	b.n	800201e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	807b      	strh	r3, [r7, #2]
 8002036:	4613      	mov	r3, r2
 8002038:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800203a:	787b      	ldrb	r3, [r7, #1]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002040:	887a      	ldrh	r2, [r7, #2]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002046:	e003      	b.n	8002050 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	041a      	lsls	r2, r3, #16
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	611a      	str	r2, [r3, #16]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
	...

0800205c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d006      	beq.n	8002080 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f806 	bl	800208c <HAL_GPIO_EXTI_Callback>
  }
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40010400 	.word	0x40010400

0800208c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e272      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8087 	beq.w	80021ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c0:	4b92      	ldr	r3, [pc, #584]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d00c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020cc:	4b8f      	ldr	r3, [pc, #572]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d112      	bne.n	80020fe <HAL_RCC_OscConfig+0x5e>
 80020d8:	4b8c      	ldr	r3, [pc, #560]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d10b      	bne.n	80020fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e6:	4b89      	ldr	r3, [pc, #548]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d06c      	beq.n	80021cc <HAL_RCC_OscConfig+0x12c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d168      	bne.n	80021cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e24c      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x76>
 8002108:	4b80      	ldr	r3, [pc, #512]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a7f      	ldr	r2, [pc, #508]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e02e      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x98>
 800211e:	4b7b      	ldr	r3, [pc, #492]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7a      	ldr	r2, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b78      	ldr	r3, [pc, #480]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a77      	ldr	r2, [pc, #476]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0xbc>
 8002142:	4b72      	ldr	r3, [pc, #456]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a71      	ldr	r2, [pc, #452]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b6f      	ldr	r3, [pc, #444]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6e      	ldr	r2, [pc, #440]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 800215c:	4b6b      	ldr	r3, [pc, #428]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6a      	ldr	r2, [pc, #424]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b68      	ldr	r3, [pc, #416]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a67      	ldr	r2, [pc, #412]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fbf2 	bl	8001964 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff fbee 	bl	8001964 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e200      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b5d      	ldr	r3, [pc, #372]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xe4>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff fbde 	bl	8001964 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff fbda 	bl	8001964 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1ec      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x10c>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021da:	4b4c      	ldr	r3, [pc, #304]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x18c>
 80021f2:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1c0      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4939      	ldr	r1, [pc, #228]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7ff fb93 	bl	8001964 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002242:	f7ff fb8f 	bl	8001964 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1a1      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b2a      	ldr	r3, [pc, #168]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4927      	ldr	r1, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff fb72 	bl	8001964 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7ff fb6e 	bl	8001964 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e180      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03a      	beq.n	8002324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022bc:	f7ff fb52 	bl	8001964 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff fb4e 	bl	8001964 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e160      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f000 fad8 	bl	8002898 <RCC_Delay>
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f0:	f7ff fb38 	bl	8001964 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f6:	e00f      	b.n	8002318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7ff fb34 	bl	8001964 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d908      	bls.n	8002318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e146      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	42420000 	.word	0x42420000
 8002314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	4b92      	ldr	r3, [pc, #584]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e9      	bne.n	80022f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a6 	beq.w	800247e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b8b      	ldr	r3, [pc, #556]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10d      	bne.n	800235e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b88      	ldr	r3, [pc, #544]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a87      	ldr	r2, [pc, #540]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	61d3      	str	r3, [r2, #28]
 800234e:	4b85      	ldr	r3, [pc, #532]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235a:	2301      	movs	r3, #1
 800235c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b82      	ldr	r3, [pc, #520]	; (8002568 <HAL_RCC_OscConfig+0x4c8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d118      	bne.n	800239c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236a:	4b7f      	ldr	r3, [pc, #508]	; (8002568 <HAL_RCC_OscConfig+0x4c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7e      	ldr	r2, [pc, #504]	; (8002568 <HAL_RCC_OscConfig+0x4c8>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002376:	f7ff faf5 	bl	8001964 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237e:	f7ff faf1 	bl	8001964 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b64      	cmp	r3, #100	; 0x64
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e103      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	4b75      	ldr	r3, [pc, #468]	; (8002568 <HAL_RCC_OscConfig+0x4c8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x312>
 80023a4:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a6e      	ldr	r2, [pc, #440]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	e02d      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x334>
 80023ba:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a69      	ldr	r2, [pc, #420]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b67      	ldr	r3, [pc, #412]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a66      	ldr	r2, [pc, #408]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	e01c      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d10c      	bne.n	80023f6 <HAL_RCC_OscConfig+0x356>
 80023dc:	4b61      	ldr	r3, [pc, #388]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a60      	ldr	r2, [pc, #384]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a5d      	ldr	r2, [pc, #372]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	e00b      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023f6:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a5a      	ldr	r2, [pc, #360]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	4b58      	ldr	r3, [pc, #352]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a57      	ldr	r2, [pc, #348]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d015      	beq.n	8002442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7ff faa5 	bl	8001964 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7ff faa1 	bl	8001964 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0b1      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ee      	beq.n	800241e <HAL_RCC_OscConfig+0x37e>
 8002440:	e014      	b.n	800246c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff fa8f 	bl	8001964 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7ff fa8b 	bl	8001964 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e09b      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	4b40      	ldr	r3, [pc, #256]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ee      	bne.n	800244a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d105      	bne.n	800247e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002472:	4b3c      	ldr	r3, [pc, #240]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a3b      	ldr	r2, [pc, #236]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8087 	beq.w	8002596 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b08      	cmp	r3, #8
 8002492:	d061      	beq.n	8002558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d146      	bne.n	800252a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b33      	ldr	r3, [pc, #204]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff fa5f 	bl	8001964 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7ff fa5b 	bl	8001964 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e06d      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024bc:	4b29      	ldr	r3, [pc, #164]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d108      	bne.n	80024e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024d2:	4b24      	ldr	r3, [pc, #144]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4921      	ldr	r1, [pc, #132]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e4:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a19      	ldr	r1, [r3, #32]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	430b      	orrs	r3, r1
 80024f6:	491b      	ldr	r1, [pc, #108]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7ff fa2f 	bl	8001964 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7ff fa2b 	bl	8001964 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e03d      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x46a>
 8002528:	e035      	b.n	8002596 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff fa18 	bl	8001964 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7ff fa14 	bl	8001964 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e026      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x498>
 8002556:	e01e      	b.n	8002596 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d107      	bne.n	8002570 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e019      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
 8002564:	40021000 	.word	0x40021000
 8002568:	40007000 	.word	0x40007000
 800256c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x500>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0d0      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d910      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4965      	ldr	r1, [pc, #404]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0b8      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002600:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800260a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002618:	4b53      	ldr	r3, [pc, #332]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a52      	ldr	r2, [pc, #328]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4b50      	ldr	r3, [pc, #320]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	494d      	ldr	r1, [pc, #308]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d040      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d115      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e07f      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e073      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06b      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002682:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f023 0203 	bic.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4936      	ldr	r1, [pc, #216]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002694:	f7ff f966 	bl	8001964 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7ff f962 	bl	8001964 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e053      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 020c 	and.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1eb      	bne.n	800269c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b27      	ldr	r3, [pc, #156]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d210      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	4922      	ldr	r1, [pc, #136]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e032      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4916      	ldr	r1, [pc, #88]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	490e      	ldr	r1, [pc, #56]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002732:	f000 f821 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8002736:	4602      	mov	r2, r0
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	490a      	ldr	r1, [pc, #40]	; (800276c <HAL_RCC_ClockConfig+0x1c8>)
 8002744:	5ccb      	ldrb	r3, [r1, r3]
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	4a09      	ldr	r2, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1cc>)
 800274c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x1d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f8c4 	bl	80018e0 <HAL_InitTick>

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40022000 	.word	0x40022000
 8002768:	40021000 	.word	0x40021000
 800276c:	08004b40 	.word	0x08004b40
 8002770:	20000068 	.word	0x20000068
 8002774:	20000074 	.word	0x20000074

08002778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	b490      	push	{r4, r7}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800277e:	4b29      	ldr	r3, [pc, #164]	; (8002824 <HAL_RCC_GetSysClockFreq+0xac>)
 8002780:	1d3c      	adds	r4, r7, #4
 8002782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002788:	f240 2301 	movw	r3, #513	; 0x201
 800278c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d002      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x40>
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d003      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0x46>
 80027b6:	e02b      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b8:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ba:	623b      	str	r3, [r7, #32]
      break;
 80027bc:	e02b      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3328      	adds	r3, #40	; 0x28
 80027c8:	443b      	add	r3, r7
 80027ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d012      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	0c5b      	lsrs	r3, r3, #17
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	3328      	adds	r3, #40	; 0x28
 80027e6:	443b      	add	r3, r7
 80027e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027f2:	fb03 f202 	mul.w	r2, r3, r2
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	e004      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	623b      	str	r3, [r7, #32]
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002812:	623b      	str	r3, [r7, #32]
      break;
 8002814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002816:	6a3b      	ldr	r3, [r7, #32]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3728      	adds	r7, #40	; 0x28
 800281c:	46bd      	mov	sp, r7
 800281e:	bc90      	pop	{r4, r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	08004b30 	.word	0x08004b30
 8002828:	40021000 	.word	0x40021000
 800282c:	007a1200 	.word	0x007a1200
 8002830:	003d0900 	.word	0x003d0900

08002834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002838:	4b02      	ldr	r3, [pc, #8]	; (8002844 <HAL_RCC_GetHCLKFreq+0x10>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	20000068 	.word	0x20000068

08002848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800284c:	f7ff fff2 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4903      	ldr	r1, [pc, #12]	; (800286c <HAL_RCC_GetPCLK1Freq+0x24>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	08004b50 	.word	0x08004b50

08002870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002874:	f7ff ffde 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	0adb      	lsrs	r3, r3, #11
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	08004b50 	.word	0x08004b50

08002898 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <RCC_Delay+0x34>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <RCC_Delay+0x38>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0a5b      	lsrs	r3, r3, #9
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b4:	bf00      	nop
  }
  while (Delay --);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1e5a      	subs	r2, r3, #1
 80028ba:	60fa      	str	r2, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f9      	bne.n	80028b4 <RCC_Delay+0x1c>
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	20000068 	.word	0x20000068
 80028d0:	10624dd3 	.word	0x10624dd3

080028d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e041      	b.n	800296a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe fd80 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f000 fc28 	bl	8003168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d001      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e03a      	b.n	8002a02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a18      	ldr	r2, [pc, #96]	; (8002a0c <HAL_TIM_Base_Start_IT+0x98>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00e      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x58>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b6:	d009      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x58>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <HAL_TIM_Base_Start_IT+0x9c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x58>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <HAL_TIM_Base_Start_IT+0xa0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d111      	bne.n	80029f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d010      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0201 	orr.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ee:	e007      	b.n	8002a00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40012c00 	.word	0x40012c00
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40000800 	.word	0x40000800

08002a18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e041      	b.n	8002aae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f839 	bl	8002ab6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4610      	mov	r0, r2
 8002a58:	f000 fb86 	bl	8003168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_TIM_PWM_Start+0x24>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e022      	b.n	8002b32 <HAL_TIM_PWM_Start+0x6a>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d109      	bne.n	8002b06 <HAL_TIM_PWM_Start+0x3e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	bf14      	ite	ne
 8002afe:	2301      	movne	r3, #1
 8002b00:	2300      	moveq	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	e015      	b.n	8002b32 <HAL_TIM_PWM_Start+0x6a>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d109      	bne.n	8002b20 <HAL_TIM_PWM_Start+0x58>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e008      	b.n	8002b32 <HAL_TIM_PWM_Start+0x6a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e05e      	b.n	8002bf8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_PWM_Start+0x82>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b48:	e013      	b.n	8002b72 <HAL_TIM_PWM_Start+0xaa>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d104      	bne.n	8002b5a <HAL_TIM_PWM_Start+0x92>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b58:	e00b      	b.n	8002b72 <HAL_TIM_PWM_Start+0xaa>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d104      	bne.n	8002b6a <HAL_TIM_PWM_Start+0xa2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b68:	e003      	b.n	8002b72 <HAL_TIM_PWM_Start+0xaa>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	6839      	ldr	r1, [r7, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fd74 	bl	8003668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <HAL_TIM_PWM_Start+0x138>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d107      	bne.n	8002b9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <HAL_TIM_PWM_Start+0x138>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00e      	beq.n	8002bc2 <HAL_TIM_PWM_Start+0xfa>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d009      	beq.n	8002bc2 <HAL_TIM_PWM_Start+0xfa>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <HAL_TIM_PWM_Start+0x13c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_TIM_PWM_Start+0xfa>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <HAL_TIM_PWM_Start+0x140>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d111      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b06      	cmp	r3, #6
 8002bd2:	d010      	beq.n	8002bf6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be4:	e007      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0201 	orr.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40012c00 	.word	0x40012c00
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40000800 	.word	0x40000800

08002c0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0202 	mvn.w	r2, #2
 8002c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa6f 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa62 	bl	8003120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fa71 	bl	8003144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d122      	bne.n	8002cbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d11b      	bne.n	8002cbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0204 	mvn.w	r2, #4
 8002c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2202      	movs	r2, #2
 8002c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa45 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa38 	bl	8003120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fa47 	bl	8003144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d122      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0208 	mvn.w	r2, #8
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa1b 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa0e 	bl	8003120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fa1d 	bl	8003144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d122      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d11b      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0210 	mvn.w	r2, #16
 8002d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2208      	movs	r2, #8
 8002d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f9f1 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f9e4 	bl	8003120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f9f3 	bl	8003144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d10e      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d107      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0201 	mvn.w	r2, #1
 8002d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe faec 	bl	8001368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9a:	2b80      	cmp	r3, #128	; 0x80
 8002d9c:	d10e      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da8:	2b80      	cmp	r3, #128	; 0x80
 8002daa:	d107      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fce1 	bl	800377e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b40      	cmp	r3, #64	; 0x40
 8002dc8:	d10e      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d107      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9b7 	bl	8003156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d10e      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d107      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0220 	mvn.w	r2, #32
 8002e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fcac 	bl	800376c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e0ac      	b.n	8002f90 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	f200 809f 	bhi.w	8002f84 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e46:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002e81 	.word	0x08002e81
 8002e50:	08002f85 	.word	0x08002f85
 8002e54:	08002f85 	.word	0x08002f85
 8002e58:	08002f85 	.word	0x08002f85
 8002e5c:	08002ec1 	.word	0x08002ec1
 8002e60:	08002f85 	.word	0x08002f85
 8002e64:	08002f85 	.word	0x08002f85
 8002e68:	08002f85 	.word	0x08002f85
 8002e6c:	08002f03 	.word	0x08002f03
 8002e70:	08002f85 	.word	0x08002f85
 8002e74:	08002f85 	.word	0x08002f85
 8002e78:	08002f85 	.word	0x08002f85
 8002e7c:	08002f43 	.word	0x08002f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f9d0 	bl	800322c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0208 	orr.w	r2, r2, #8
 8002e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0204 	bic.w	r2, r2, #4
 8002eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6999      	ldr	r1, [r3, #24]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	619a      	str	r2, [r3, #24]
      break;
 8002ebe:	e062      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fa16 	bl	80032f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6999      	ldr	r1, [r3, #24]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	021a      	lsls	r2, r3, #8
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	619a      	str	r2, [r3, #24]
      break;
 8002f00:	e041      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fa5f 	bl	80033cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0208 	orr.w	r2, r2, #8
 8002f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0204 	bic.w	r2, r2, #4
 8002f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69d9      	ldr	r1, [r3, #28]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	61da      	str	r2, [r3, #28]
      break;
 8002f40:	e021      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 faa9 	bl	80034a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69d9      	ldr	r1, [r3, #28]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	021a      	lsls	r2, r3, #8
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	61da      	str	r2, [r3, #28]
      break;
 8002f82:	e000      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_ConfigClockSource+0x18>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0b3      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x180>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe8:	d03e      	beq.n	8003068 <HAL_TIM_ConfigClockSource+0xd0>
 8002fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fee:	f200 8087 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x168>
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff6:	f000 8085 	beq.w	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	d87f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x168>
 8003000:	2b70      	cmp	r3, #112	; 0x70
 8003002:	d01a      	beq.n	800303a <HAL_TIM_ConfigClockSource+0xa2>
 8003004:	2b70      	cmp	r3, #112	; 0x70
 8003006:	d87b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x168>
 8003008:	2b60      	cmp	r3, #96	; 0x60
 800300a:	d050      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x116>
 800300c:	2b60      	cmp	r3, #96	; 0x60
 800300e:	d877      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x168>
 8003010:	2b50      	cmp	r3, #80	; 0x50
 8003012:	d03c      	beq.n	800308e <HAL_TIM_ConfigClockSource+0xf6>
 8003014:	2b50      	cmp	r3, #80	; 0x50
 8003016:	d873      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x168>
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d058      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x136>
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d86f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x168>
 8003020:	2b30      	cmp	r3, #48	; 0x30
 8003022:	d064      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x156>
 8003024:	2b30      	cmp	r3, #48	; 0x30
 8003026:	d86b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x168>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d060      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x156>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d867      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x168>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05c      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x156>
 8003034:	2b10      	cmp	r3, #16
 8003036:	d05a      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003038:	e062      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f000 faee 	bl	800362a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800305c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	609a      	str	r2, [r3, #8]
      break;
 8003066:	e04e      	b.n	8003106 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f000 fad7 	bl	800362a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308a:	609a      	str	r2, [r3, #8]
      break;
 800308c:	e03b      	b.n	8003106 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	461a      	mov	r2, r3
 800309c:	f000 fa4e 	bl	800353c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2150      	movs	r1, #80	; 0x50
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 faa5 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 80030ac:	e02b      	b.n	8003106 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f000 fa6c 	bl	8003598 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2160      	movs	r1, #96	; 0x60
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fa95 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 80030cc:	e01b      	b.n	8003106 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	461a      	mov	r2, r3
 80030dc:	f000 fa2e 	bl	800353c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fa85 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 80030ec:	e00b      	b.n	8003106 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 fa7c 	bl	80035f6 <TIM_ITRx_SetConfig>
        break;
 80030fe:	e002      	b.n	8003106 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003100:	bf00      	nop
 8003102:	e000      	b.n	8003106 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003104:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a29      	ldr	r2, [pc, #164]	; (8003220 <TIM_Base_SetConfig+0xb8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00b      	beq.n	8003198 <TIM_Base_SetConfig+0x30>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003186:	d007      	beq.n	8003198 <TIM_Base_SetConfig+0x30>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a26      	ldr	r2, [pc, #152]	; (8003224 <TIM_Base_SetConfig+0xbc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <TIM_Base_SetConfig+0x30>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a25      	ldr	r2, [pc, #148]	; (8003228 <TIM_Base_SetConfig+0xc0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d108      	bne.n	80031aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <TIM_Base_SetConfig+0xb8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00b      	beq.n	80031ca <TIM_Base_SetConfig+0x62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b8:	d007      	beq.n	80031ca <TIM_Base_SetConfig+0x62>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a19      	ldr	r2, [pc, #100]	; (8003224 <TIM_Base_SetConfig+0xbc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d003      	beq.n	80031ca <TIM_Base_SetConfig+0x62>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a18      	ldr	r2, [pc, #96]	; (8003228 <TIM_Base_SetConfig+0xc0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d108      	bne.n	80031dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a07      	ldr	r2, [pc, #28]	; (8003220 <TIM_Base_SetConfig+0xb8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d103      	bne.n	8003210 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	615a      	str	r2, [r3, #20]
}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40000400 	.word	0x40000400
 8003228:	40000800 	.word	0x40000800

0800322c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0201 	bic.w	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f023 0302 	bic.w	r3, r3, #2
 8003274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <TIM_OC1_SetConfig+0xc8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d10c      	bne.n	80032a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f023 0308 	bic.w	r3, r3, #8
 800328e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f023 0304 	bic.w	r3, r3, #4
 80032a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <TIM_OC1_SetConfig+0xc8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d111      	bne.n	80032ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	621a      	str	r2, [r3, #32]
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40012c00 	.word	0x40012c00

080032f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f023 0210 	bic.w	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0320 	bic.w	r3, r3, #32
 8003342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <TIM_OC2_SetConfig+0xd0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d10d      	bne.n	8003374 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800335e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003372:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a14      	ldr	r2, [pc, #80]	; (80033c8 <TIM_OC2_SetConfig+0xd0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d113      	bne.n	80033a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800338a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	40012c00 	.word	0x40012c00

080033cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0303 	bic.w	r3, r3, #3
 8003402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a1d      	ldr	r2, [pc, #116]	; (800349c <TIM_OC3_SetConfig+0xd0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d10d      	bne.n	8003446 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a14      	ldr	r2, [pc, #80]	; (800349c <TIM_OC3_SetConfig+0xd0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d113      	bne.n	8003476 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800345c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	621a      	str	r2, [r3, #32]
}
 8003490:	bf00      	nop
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40012c00 	.word	0x40012c00

080034a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	031b      	lsls	r3, r3, #12
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a0f      	ldr	r2, [pc, #60]	; (8003538 <TIM_OC4_SetConfig+0x98>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d109      	bne.n	8003514 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003506:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	019b      	lsls	r3, r3, #6
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	621a      	str	r2, [r3, #32]
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	40012c00 	.word	0x40012c00

0800353c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f023 0201 	bic.w	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 030a 	bic.w	r3, r3, #10
 8003578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f023 0210 	bic.w	r2, r3, #16
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	031b      	lsls	r3, r3, #12
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	621a      	str	r2, [r3, #32]
}
 80035ec:	bf00      	nop
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	f043 0307 	orr.w	r3, r3, #7
 8003618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	609a      	str	r2, [r3, #8]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800362a:	b480      	push	{r7}
 800362c:	b087      	sub	sp, #28
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003644:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	021a      	lsls	r2, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	431a      	orrs	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4313      	orrs	r3, r2
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	609a      	str	r2, [r3, #8]
}
 800365e:	bf00      	nop
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	2201      	movs	r2, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1a      	ldr	r2, [r3, #32]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	43db      	mvns	r3, r3
 800368a:	401a      	ands	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a1a      	ldr	r2, [r3, #32]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	431a      	orrs	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e046      	b.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a16      	ldr	r2, [pc, #88]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00e      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003714:	d009      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a12      	ldr	r2, [pc, #72]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d004      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a10      	ldr	r2, [pc, #64]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d10c      	bne.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4313      	orrs	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	40012c00 	.word	0x40012c00
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800

0800376c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e03f      	b.n	8003822 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fe94 	bl	80014e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	; 0x24
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fc25 	bl	8004024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b08a      	sub	sp, #40	; 0x28
 800382e:	af02      	add	r7, sp, #8
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	603b      	str	r3, [r7, #0]
 8003836:	4613      	mov	r3, r2
 8003838:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b20      	cmp	r3, #32
 8003848:	d17c      	bne.n	8003944 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_UART_Transmit+0x2c>
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e075      	b.n	8003946 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_UART_Transmit+0x3e>
 8003864:	2302      	movs	r3, #2
 8003866:	e06e      	b.n	8003946 <HAL_UART_Transmit+0x11c>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2221      	movs	r2, #33	; 0x21
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800387e:	f7fe f871 	bl	8001964 <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003898:	d108      	bne.n	80038ac <HAL_UART_Transmit+0x82>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d104      	bne.n	80038ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	e003      	b.n	80038b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038bc:	e02a      	b.n	8003914 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2180      	movs	r1, #128	; 0x80
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fa11 	bl	8003cf0 <UART_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e036      	b.n	8003946 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	3302      	adds	r3, #2
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	e007      	b.n	8003906 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3301      	adds	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1cf      	bne.n	80038be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	2140      	movs	r1, #64	; 0x40
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f9e1 	bl	8003cf0 <UART_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e006      	b.n	8003946 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10d      	bne.n	80039a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_UART_IRQHandler+0x52>
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fa99 	bl	8003ed2 <UART_Receive_IT>
      return;
 80039a0:	e17b      	b.n	8003c9a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80b1 	beq.w	8003b0c <HAL_UART_IRQHandler+0x1bc>
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <HAL_UART_IRQHandler+0x70>
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80a6 	beq.w	8003b0c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_UART_IRQHandler+0x90>
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f043 0201 	orr.w	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_UART_IRQHandler+0xb0>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	f043 0202 	orr.w	r2, r3, #2
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_UART_IRQHandler+0xd0>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	f043 0204 	orr.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00f      	beq.n	8003a4a <HAL_UART_IRQHandler+0xfa>
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_UART_IRQHandler+0xee>
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f043 0208 	orr.w	r2, r3, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 811e 	beq.w	8003c90 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_UART_IRQHandler+0x11e>
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fa32 	bl	8003ed2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <HAL_UART_IRQHandler+0x146>
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d031      	beq.n	8003afa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f974 	bl	8003d84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d023      	beq.n	8003af2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d013      	beq.n	8003aea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	4a76      	ldr	r2, [pc, #472]	; (8003ca0 <HAL_UART_IRQHandler+0x350>)
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe f89a 	bl	8001c08 <HAL_DMA_Abort_IT>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae8:	e00e      	b.n	8003b08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8ec 	bl	8003cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af0:	e00a      	b.n	8003b08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8e8 	bl	8003cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af8:	e006      	b.n	8003b08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8e4 	bl	8003cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b06:	e0c3      	b.n	8003c90 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	bf00      	nop
    return;
 8003b0a:	e0c1      	b.n	8003c90 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	f040 80a1 	bne.w	8003c58 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 809b 	beq.w	8003c58 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8095 	beq.w	8003c58 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d04e      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b5c:	8a3b      	ldrh	r3, [r7, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8098 	beq.w	8003c94 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b68:	8a3a      	ldrh	r2, [r7, #16]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	f080 8092 	bcs.w	8003c94 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8a3a      	ldrh	r2, [r7, #16]
 8003b74:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d02b      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b8e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0210 	bic.w	r2, r2, #16
 8003bcc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd ffdd 	bl	8001b92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f876 	bl	8003cda <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bee:	e051      	b.n	8003c94 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d047      	beq.n	8003c98 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003c08:	8a7b      	ldrh	r3, [r7, #18]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d044      	beq.n	8003c98 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c1c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0210 	bic.w	r2, r2, #16
 8003c4a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c4c:	8a7b      	ldrh	r3, [r7, #18]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f842 	bl	8003cda <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c56:	e01f      	b.n	8003c98 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_UART_IRQHandler+0x324>
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f8c9 	bl	8003e04 <UART_Transmit_IT>
    return;
 8003c72:	e012      	b.n	8003c9a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00d      	beq.n	8003c9a <HAL_UART_IRQHandler+0x34a>
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f90a 	bl	8003ea2 <UART_EndTransmit_IT>
    return;
 8003c8e:	e004      	b.n	8003c9a <HAL_UART_IRQHandler+0x34a>
    return;
 8003c90:	bf00      	nop
 8003c92:	e002      	b.n	8003c9a <HAL_UART_IRQHandler+0x34a>
      return;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_UART_IRQHandler+0x34a>
      return;
 8003c98:	bf00      	nop
  }
}
 8003c9a:	3728      	adds	r7, #40	; 0x28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	08003ddd 	.word	0x08003ddd

08003ca4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr

08003cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d00:	e02c      	b.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d028      	beq.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d10:	f7fd fe28 	bl	8001964 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d21d      	bcs.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e00f      	b.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4013      	ands	r3, r2
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d0c3      	beq.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d107      	bne.n	8003dc4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0210 	bic.w	r2, r2, #16
 8003dc2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f7ff ff66 	bl	8003cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b21      	cmp	r3, #33	; 0x21
 8003e16:	d13e      	bne.n	8003e96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e20:	d114      	bne.n	8003e4c <UART_Transmit_IT+0x48>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d110      	bne.n	8003e4c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	621a      	str	r2, [r3, #32]
 8003e4a:	e008      	b.n	8003e5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	1c59      	adds	r1, r3, #1
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6211      	str	r1, [r2, #32]
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10f      	bne.n	8003e92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
  }
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr

08003ea2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff feee 	bl	8003ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b22      	cmp	r3, #34	; 0x22
 8003ee4:	f040 8099 	bne.w	800401a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef0:	d117      	bne.n	8003f22 <UART_Receive_IT+0x50>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d113      	bne.n	8003f22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	1c9a      	adds	r2, r3, #2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f20:	e026      	b.n	8003f70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d007      	beq.n	8003f46 <UART_Receive_IT+0x74>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <UART_Receive_IT+0x82>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	e008      	b.n	8003f66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d148      	bne.n	8004016 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0220 	bic.w	r2, r2, #32
 8003f92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0201 	bic.w	r2, r2, #1
 8003fb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d123      	bne.n	800400c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0210 	bic.w	r2, r2, #16
 8003fd8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	d10a      	bne.n	8003ffe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004002:	4619      	mov	r1, r3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fe68 	bl	8003cda <HAL_UARTEx_RxEventCallback>
 800400a:	e002      	b.n	8004012 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fe52 	bl	8003cb6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e002      	b.n	800401c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	e000      	b.n	800401c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800405e:	f023 030c 	bic.w	r3, r3, #12
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	430b      	orrs	r3, r1
 800406a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a2c      	ldr	r2, [pc, #176]	; (8004138 <UART_SetConfig+0x114>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d103      	bne.n	8004094 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800408c:	f7fe fbf0 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	e002      	b.n	800409a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004094:	f7fe fbd8 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 8004098:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009a      	lsls	r2, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	4a22      	ldr	r2, [pc, #136]	; (800413c <UART_SetConfig+0x118>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	0119      	lsls	r1, r3, #4
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	009a      	lsls	r2, r3, #2
 80040c4:	441a      	add	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d0:	4b1a      	ldr	r3, [pc, #104]	; (800413c <UART_SetConfig+0x118>)
 80040d2:	fba3 0302 	umull	r0, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	2064      	movs	r0, #100	; 0x64
 80040da:	fb00 f303 	mul.w	r3, r0, r3
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	3332      	adds	r3, #50	; 0x32
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <UART_SetConfig+0x118>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f0:	4419      	add	r1, r3
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009a      	lsls	r2, r3, #2
 80040fc:	441a      	add	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	fbb2 f2f3 	udiv	r2, r2, r3
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <UART_SetConfig+0x118>)
 800410a:	fba3 0302 	umull	r0, r3, r3, r2
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	2064      	movs	r0, #100	; 0x64
 8004112:	fb00 f303 	mul.w	r3, r0, r3
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	3332      	adds	r3, #50	; 0x32
 800411c:	4a07      	ldr	r2, [pc, #28]	; (800413c <UART_SetConfig+0x118>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	f003 020f 	and.w	r2, r3, #15
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	440a      	add	r2, r1
 800412e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40013800 	.word	0x40013800
 800413c:	51eb851f 	.word	0x51eb851f

08004140 <__errno>:
 8004140:	4b01      	ldr	r3, [pc, #4]	; (8004148 <__errno+0x8>)
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	2000007c 	.word	0x2000007c

0800414c <__libc_init_array>:
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	2600      	movs	r6, #0
 8004150:	4d0c      	ldr	r5, [pc, #48]	; (8004184 <__libc_init_array+0x38>)
 8004152:	4c0d      	ldr	r4, [pc, #52]	; (8004188 <__libc_init_array+0x3c>)
 8004154:	1b64      	subs	r4, r4, r5
 8004156:	10a4      	asrs	r4, r4, #2
 8004158:	42a6      	cmp	r6, r4
 800415a:	d109      	bne.n	8004170 <__libc_init_array+0x24>
 800415c:	f000 fc9c 	bl	8004a98 <_init>
 8004160:	2600      	movs	r6, #0
 8004162:	4d0a      	ldr	r5, [pc, #40]	; (800418c <__libc_init_array+0x40>)
 8004164:	4c0a      	ldr	r4, [pc, #40]	; (8004190 <__libc_init_array+0x44>)
 8004166:	1b64      	subs	r4, r4, r5
 8004168:	10a4      	asrs	r4, r4, #2
 800416a:	42a6      	cmp	r6, r4
 800416c:	d105      	bne.n	800417a <__libc_init_array+0x2e>
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	f855 3b04 	ldr.w	r3, [r5], #4
 8004174:	4798      	blx	r3
 8004176:	3601      	adds	r6, #1
 8004178:	e7ee      	b.n	8004158 <__libc_init_array+0xc>
 800417a:	f855 3b04 	ldr.w	r3, [r5], #4
 800417e:	4798      	blx	r3
 8004180:	3601      	adds	r6, #1
 8004182:	e7f2      	b.n	800416a <__libc_init_array+0x1e>
 8004184:	08004b8c 	.word	0x08004b8c
 8004188:	08004b8c 	.word	0x08004b8c
 800418c:	08004b8c 	.word	0x08004b8c
 8004190:	08004b90 	.word	0x08004b90

08004194 <memset>:
 8004194:	4603      	mov	r3, r0
 8004196:	4402      	add	r2, r0
 8004198:	4293      	cmp	r3, r2
 800419a:	d100      	bne.n	800419e <memset+0xa>
 800419c:	4770      	bx	lr
 800419e:	f803 1b01 	strb.w	r1, [r3], #1
 80041a2:	e7f9      	b.n	8004198 <memset+0x4>

080041a4 <siprintf>:
 80041a4:	b40e      	push	{r1, r2, r3}
 80041a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041aa:	b500      	push	{lr}
 80041ac:	b09c      	sub	sp, #112	; 0x70
 80041ae:	ab1d      	add	r3, sp, #116	; 0x74
 80041b0:	9002      	str	r0, [sp, #8]
 80041b2:	9006      	str	r0, [sp, #24]
 80041b4:	9107      	str	r1, [sp, #28]
 80041b6:	9104      	str	r1, [sp, #16]
 80041b8:	4808      	ldr	r0, [pc, #32]	; (80041dc <siprintf+0x38>)
 80041ba:	4909      	ldr	r1, [pc, #36]	; (80041e0 <siprintf+0x3c>)
 80041bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80041c0:	9105      	str	r1, [sp, #20]
 80041c2:	6800      	ldr	r0, [r0, #0]
 80041c4:	a902      	add	r1, sp, #8
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	f000 f868 	bl	800429c <_svfiprintf_r>
 80041cc:	2200      	movs	r2, #0
 80041ce:	9b02      	ldr	r3, [sp, #8]
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	b01c      	add	sp, #112	; 0x70
 80041d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041d8:	b003      	add	sp, #12
 80041da:	4770      	bx	lr
 80041dc:	2000007c 	.word	0x2000007c
 80041e0:	ffff0208 	.word	0xffff0208

080041e4 <__ssputs_r>:
 80041e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	688e      	ldr	r6, [r1, #8]
 80041ea:	4682      	mov	sl, r0
 80041ec:	429e      	cmp	r6, r3
 80041ee:	460c      	mov	r4, r1
 80041f0:	4690      	mov	r8, r2
 80041f2:	461f      	mov	r7, r3
 80041f4:	d838      	bhi.n	8004268 <__ssputs_r+0x84>
 80041f6:	898a      	ldrh	r2, [r1, #12]
 80041f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041fc:	d032      	beq.n	8004264 <__ssputs_r+0x80>
 80041fe:	6825      	ldr	r5, [r4, #0]
 8004200:	6909      	ldr	r1, [r1, #16]
 8004202:	3301      	adds	r3, #1
 8004204:	eba5 0901 	sub.w	r9, r5, r1
 8004208:	6965      	ldr	r5, [r4, #20]
 800420a:	444b      	add	r3, r9
 800420c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004210:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004214:	106d      	asrs	r5, r5, #1
 8004216:	429d      	cmp	r5, r3
 8004218:	bf38      	it	cc
 800421a:	461d      	movcc	r5, r3
 800421c:	0553      	lsls	r3, r2, #21
 800421e:	d531      	bpl.n	8004284 <__ssputs_r+0xa0>
 8004220:	4629      	mov	r1, r5
 8004222:	f000 fb6f 	bl	8004904 <_malloc_r>
 8004226:	4606      	mov	r6, r0
 8004228:	b950      	cbnz	r0, 8004240 <__ssputs_r+0x5c>
 800422a:	230c      	movs	r3, #12
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	f8ca 3000 	str.w	r3, [sl]
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423a:	81a3      	strh	r3, [r4, #12]
 800423c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004240:	464a      	mov	r2, r9
 8004242:	6921      	ldr	r1, [r4, #16]
 8004244:	f000 face 	bl	80047e4 <memcpy>
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004252:	81a3      	strh	r3, [r4, #12]
 8004254:	6126      	str	r6, [r4, #16]
 8004256:	444e      	add	r6, r9
 8004258:	6026      	str	r6, [r4, #0]
 800425a:	463e      	mov	r6, r7
 800425c:	6165      	str	r5, [r4, #20]
 800425e:	eba5 0509 	sub.w	r5, r5, r9
 8004262:	60a5      	str	r5, [r4, #8]
 8004264:	42be      	cmp	r6, r7
 8004266:	d900      	bls.n	800426a <__ssputs_r+0x86>
 8004268:	463e      	mov	r6, r7
 800426a:	4632      	mov	r2, r6
 800426c:	4641      	mov	r1, r8
 800426e:	6820      	ldr	r0, [r4, #0]
 8004270:	f000 fac6 	bl	8004800 <memmove>
 8004274:	68a3      	ldr	r3, [r4, #8]
 8004276:	2000      	movs	r0, #0
 8004278:	1b9b      	subs	r3, r3, r6
 800427a:	60a3      	str	r3, [r4, #8]
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	4433      	add	r3, r6
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	e7db      	b.n	800423c <__ssputs_r+0x58>
 8004284:	462a      	mov	r2, r5
 8004286:	f000 fbb1 	bl	80049ec <_realloc_r>
 800428a:	4606      	mov	r6, r0
 800428c:	2800      	cmp	r0, #0
 800428e:	d1e1      	bne.n	8004254 <__ssputs_r+0x70>
 8004290:	4650      	mov	r0, sl
 8004292:	6921      	ldr	r1, [r4, #16]
 8004294:	f000 face 	bl	8004834 <_free_r>
 8004298:	e7c7      	b.n	800422a <__ssputs_r+0x46>
	...

0800429c <_svfiprintf_r>:
 800429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a0:	4698      	mov	r8, r3
 80042a2:	898b      	ldrh	r3, [r1, #12]
 80042a4:	4607      	mov	r7, r0
 80042a6:	061b      	lsls	r3, r3, #24
 80042a8:	460d      	mov	r5, r1
 80042aa:	4614      	mov	r4, r2
 80042ac:	b09d      	sub	sp, #116	; 0x74
 80042ae:	d50e      	bpl.n	80042ce <_svfiprintf_r+0x32>
 80042b0:	690b      	ldr	r3, [r1, #16]
 80042b2:	b963      	cbnz	r3, 80042ce <_svfiprintf_r+0x32>
 80042b4:	2140      	movs	r1, #64	; 0x40
 80042b6:	f000 fb25 	bl	8004904 <_malloc_r>
 80042ba:	6028      	str	r0, [r5, #0]
 80042bc:	6128      	str	r0, [r5, #16]
 80042be:	b920      	cbnz	r0, 80042ca <_svfiprintf_r+0x2e>
 80042c0:	230c      	movs	r3, #12
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	f04f 30ff 	mov.w	r0, #4294967295
 80042c8:	e0d1      	b.n	800446e <_svfiprintf_r+0x1d2>
 80042ca:	2340      	movs	r3, #64	; 0x40
 80042cc:	616b      	str	r3, [r5, #20]
 80042ce:	2300      	movs	r3, #0
 80042d0:	9309      	str	r3, [sp, #36]	; 0x24
 80042d2:	2320      	movs	r3, #32
 80042d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042d8:	2330      	movs	r3, #48	; 0x30
 80042da:	f04f 0901 	mov.w	r9, #1
 80042de:	f8cd 800c 	str.w	r8, [sp, #12]
 80042e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004488 <_svfiprintf_r+0x1ec>
 80042e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042ea:	4623      	mov	r3, r4
 80042ec:	469a      	mov	sl, r3
 80042ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042f2:	b10a      	cbz	r2, 80042f8 <_svfiprintf_r+0x5c>
 80042f4:	2a25      	cmp	r2, #37	; 0x25
 80042f6:	d1f9      	bne.n	80042ec <_svfiprintf_r+0x50>
 80042f8:	ebba 0b04 	subs.w	fp, sl, r4
 80042fc:	d00b      	beq.n	8004316 <_svfiprintf_r+0x7a>
 80042fe:	465b      	mov	r3, fp
 8004300:	4622      	mov	r2, r4
 8004302:	4629      	mov	r1, r5
 8004304:	4638      	mov	r0, r7
 8004306:	f7ff ff6d 	bl	80041e4 <__ssputs_r>
 800430a:	3001      	adds	r0, #1
 800430c:	f000 80aa 	beq.w	8004464 <_svfiprintf_r+0x1c8>
 8004310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004312:	445a      	add	r2, fp
 8004314:	9209      	str	r2, [sp, #36]	; 0x24
 8004316:	f89a 3000 	ldrb.w	r3, [sl]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80a2 	beq.w	8004464 <_svfiprintf_r+0x1c8>
 8004320:	2300      	movs	r3, #0
 8004322:	f04f 32ff 	mov.w	r2, #4294967295
 8004326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800432a:	f10a 0a01 	add.w	sl, sl, #1
 800432e:	9304      	str	r3, [sp, #16]
 8004330:	9307      	str	r3, [sp, #28]
 8004332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004336:	931a      	str	r3, [sp, #104]	; 0x68
 8004338:	4654      	mov	r4, sl
 800433a:	2205      	movs	r2, #5
 800433c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004340:	4851      	ldr	r0, [pc, #324]	; (8004488 <_svfiprintf_r+0x1ec>)
 8004342:	f000 fa41 	bl	80047c8 <memchr>
 8004346:	9a04      	ldr	r2, [sp, #16]
 8004348:	b9d8      	cbnz	r0, 8004382 <_svfiprintf_r+0xe6>
 800434a:	06d0      	lsls	r0, r2, #27
 800434c:	bf44      	itt	mi
 800434e:	2320      	movmi	r3, #32
 8004350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004354:	0711      	lsls	r1, r2, #28
 8004356:	bf44      	itt	mi
 8004358:	232b      	movmi	r3, #43	; 0x2b
 800435a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800435e:	f89a 3000 	ldrb.w	r3, [sl]
 8004362:	2b2a      	cmp	r3, #42	; 0x2a
 8004364:	d015      	beq.n	8004392 <_svfiprintf_r+0xf6>
 8004366:	4654      	mov	r4, sl
 8004368:	2000      	movs	r0, #0
 800436a:	f04f 0c0a 	mov.w	ip, #10
 800436e:	9a07      	ldr	r2, [sp, #28]
 8004370:	4621      	mov	r1, r4
 8004372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004376:	3b30      	subs	r3, #48	; 0x30
 8004378:	2b09      	cmp	r3, #9
 800437a:	d94e      	bls.n	800441a <_svfiprintf_r+0x17e>
 800437c:	b1b0      	cbz	r0, 80043ac <_svfiprintf_r+0x110>
 800437e:	9207      	str	r2, [sp, #28]
 8004380:	e014      	b.n	80043ac <_svfiprintf_r+0x110>
 8004382:	eba0 0308 	sub.w	r3, r0, r8
 8004386:	fa09 f303 	lsl.w	r3, r9, r3
 800438a:	4313      	orrs	r3, r2
 800438c:	46a2      	mov	sl, r4
 800438e:	9304      	str	r3, [sp, #16]
 8004390:	e7d2      	b.n	8004338 <_svfiprintf_r+0x9c>
 8004392:	9b03      	ldr	r3, [sp, #12]
 8004394:	1d19      	adds	r1, r3, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	9103      	str	r1, [sp, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	bfbb      	ittet	lt
 800439e:	425b      	neglt	r3, r3
 80043a0:	f042 0202 	orrlt.w	r2, r2, #2
 80043a4:	9307      	strge	r3, [sp, #28]
 80043a6:	9307      	strlt	r3, [sp, #28]
 80043a8:	bfb8      	it	lt
 80043aa:	9204      	strlt	r2, [sp, #16]
 80043ac:	7823      	ldrb	r3, [r4, #0]
 80043ae:	2b2e      	cmp	r3, #46	; 0x2e
 80043b0:	d10c      	bne.n	80043cc <_svfiprintf_r+0x130>
 80043b2:	7863      	ldrb	r3, [r4, #1]
 80043b4:	2b2a      	cmp	r3, #42	; 0x2a
 80043b6:	d135      	bne.n	8004424 <_svfiprintf_r+0x188>
 80043b8:	9b03      	ldr	r3, [sp, #12]
 80043ba:	3402      	adds	r4, #2
 80043bc:	1d1a      	adds	r2, r3, #4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	9203      	str	r2, [sp, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bfb8      	it	lt
 80043c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80043ca:	9305      	str	r3, [sp, #20]
 80043cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800448c <_svfiprintf_r+0x1f0>
 80043d0:	2203      	movs	r2, #3
 80043d2:	4650      	mov	r0, sl
 80043d4:	7821      	ldrb	r1, [r4, #0]
 80043d6:	f000 f9f7 	bl	80047c8 <memchr>
 80043da:	b140      	cbz	r0, 80043ee <_svfiprintf_r+0x152>
 80043dc:	2340      	movs	r3, #64	; 0x40
 80043de:	eba0 000a 	sub.w	r0, r0, sl
 80043e2:	fa03 f000 	lsl.w	r0, r3, r0
 80043e6:	9b04      	ldr	r3, [sp, #16]
 80043e8:	3401      	adds	r4, #1
 80043ea:	4303      	orrs	r3, r0
 80043ec:	9304      	str	r3, [sp, #16]
 80043ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f2:	2206      	movs	r2, #6
 80043f4:	4826      	ldr	r0, [pc, #152]	; (8004490 <_svfiprintf_r+0x1f4>)
 80043f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043fa:	f000 f9e5 	bl	80047c8 <memchr>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d038      	beq.n	8004474 <_svfiprintf_r+0x1d8>
 8004402:	4b24      	ldr	r3, [pc, #144]	; (8004494 <_svfiprintf_r+0x1f8>)
 8004404:	bb1b      	cbnz	r3, 800444e <_svfiprintf_r+0x1b2>
 8004406:	9b03      	ldr	r3, [sp, #12]
 8004408:	3307      	adds	r3, #7
 800440a:	f023 0307 	bic.w	r3, r3, #7
 800440e:	3308      	adds	r3, #8
 8004410:	9303      	str	r3, [sp, #12]
 8004412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004414:	4433      	add	r3, r6
 8004416:	9309      	str	r3, [sp, #36]	; 0x24
 8004418:	e767      	b.n	80042ea <_svfiprintf_r+0x4e>
 800441a:	460c      	mov	r4, r1
 800441c:	2001      	movs	r0, #1
 800441e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004422:	e7a5      	b.n	8004370 <_svfiprintf_r+0xd4>
 8004424:	2300      	movs	r3, #0
 8004426:	f04f 0c0a 	mov.w	ip, #10
 800442a:	4619      	mov	r1, r3
 800442c:	3401      	adds	r4, #1
 800442e:	9305      	str	r3, [sp, #20]
 8004430:	4620      	mov	r0, r4
 8004432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004436:	3a30      	subs	r2, #48	; 0x30
 8004438:	2a09      	cmp	r2, #9
 800443a:	d903      	bls.n	8004444 <_svfiprintf_r+0x1a8>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0c5      	beq.n	80043cc <_svfiprintf_r+0x130>
 8004440:	9105      	str	r1, [sp, #20]
 8004442:	e7c3      	b.n	80043cc <_svfiprintf_r+0x130>
 8004444:	4604      	mov	r4, r0
 8004446:	2301      	movs	r3, #1
 8004448:	fb0c 2101 	mla	r1, ip, r1, r2
 800444c:	e7f0      	b.n	8004430 <_svfiprintf_r+0x194>
 800444e:	ab03      	add	r3, sp, #12
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	462a      	mov	r2, r5
 8004454:	4638      	mov	r0, r7
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <_svfiprintf_r+0x1fc>)
 8004458:	a904      	add	r1, sp, #16
 800445a:	f3af 8000 	nop.w
 800445e:	1c42      	adds	r2, r0, #1
 8004460:	4606      	mov	r6, r0
 8004462:	d1d6      	bne.n	8004412 <_svfiprintf_r+0x176>
 8004464:	89ab      	ldrh	r3, [r5, #12]
 8004466:	065b      	lsls	r3, r3, #25
 8004468:	f53f af2c 	bmi.w	80042c4 <_svfiprintf_r+0x28>
 800446c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800446e:	b01d      	add	sp, #116	; 0x74
 8004470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004474:	ab03      	add	r3, sp, #12
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	462a      	mov	r2, r5
 800447a:	4638      	mov	r0, r7
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <_svfiprintf_r+0x1fc>)
 800447e:	a904      	add	r1, sp, #16
 8004480:	f000 f87c 	bl	800457c <_printf_i>
 8004484:	e7eb      	b.n	800445e <_svfiprintf_r+0x1c2>
 8004486:	bf00      	nop
 8004488:	08004b58 	.word	0x08004b58
 800448c:	08004b5e 	.word	0x08004b5e
 8004490:	08004b62 	.word	0x08004b62
 8004494:	00000000 	.word	0x00000000
 8004498:	080041e5 	.word	0x080041e5

0800449c <_printf_common>:
 800449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	4616      	mov	r6, r2
 80044a2:	4699      	mov	r9, r3
 80044a4:	688a      	ldr	r2, [r1, #8]
 80044a6:	690b      	ldr	r3, [r1, #16]
 80044a8:	4607      	mov	r7, r0
 80044aa:	4293      	cmp	r3, r2
 80044ac:	bfb8      	it	lt
 80044ae:	4613      	movlt	r3, r2
 80044b0:	6033      	str	r3, [r6, #0]
 80044b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044b6:	460c      	mov	r4, r1
 80044b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044bc:	b10a      	cbz	r2, 80044c2 <_printf_common+0x26>
 80044be:	3301      	adds	r3, #1
 80044c0:	6033      	str	r3, [r6, #0]
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	0699      	lsls	r1, r3, #26
 80044c6:	bf42      	ittt	mi
 80044c8:	6833      	ldrmi	r3, [r6, #0]
 80044ca:	3302      	addmi	r3, #2
 80044cc:	6033      	strmi	r3, [r6, #0]
 80044ce:	6825      	ldr	r5, [r4, #0]
 80044d0:	f015 0506 	ands.w	r5, r5, #6
 80044d4:	d106      	bne.n	80044e4 <_printf_common+0x48>
 80044d6:	f104 0a19 	add.w	sl, r4, #25
 80044da:	68e3      	ldr	r3, [r4, #12]
 80044dc:	6832      	ldr	r2, [r6, #0]
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	42ab      	cmp	r3, r5
 80044e2:	dc28      	bgt.n	8004536 <_printf_common+0x9a>
 80044e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044e8:	1e13      	subs	r3, r2, #0
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	bf18      	it	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	0692      	lsls	r2, r2, #26
 80044f2:	d42d      	bmi.n	8004550 <_printf_common+0xb4>
 80044f4:	4649      	mov	r1, r9
 80044f6:	4638      	mov	r0, r7
 80044f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044fc:	47c0      	blx	r8
 80044fe:	3001      	adds	r0, #1
 8004500:	d020      	beq.n	8004544 <_printf_common+0xa8>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	68e5      	ldr	r5, [r4, #12]
 8004506:	f003 0306 	and.w	r3, r3, #6
 800450a:	2b04      	cmp	r3, #4
 800450c:	bf18      	it	ne
 800450e:	2500      	movne	r5, #0
 8004510:	6832      	ldr	r2, [r6, #0]
 8004512:	f04f 0600 	mov.w	r6, #0
 8004516:	68a3      	ldr	r3, [r4, #8]
 8004518:	bf08      	it	eq
 800451a:	1aad      	subeq	r5, r5, r2
 800451c:	6922      	ldr	r2, [r4, #16]
 800451e:	bf08      	it	eq
 8004520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004524:	4293      	cmp	r3, r2
 8004526:	bfc4      	itt	gt
 8004528:	1a9b      	subgt	r3, r3, r2
 800452a:	18ed      	addgt	r5, r5, r3
 800452c:	341a      	adds	r4, #26
 800452e:	42b5      	cmp	r5, r6
 8004530:	d11a      	bne.n	8004568 <_printf_common+0xcc>
 8004532:	2000      	movs	r0, #0
 8004534:	e008      	b.n	8004548 <_printf_common+0xac>
 8004536:	2301      	movs	r3, #1
 8004538:	4652      	mov	r2, sl
 800453a:	4649      	mov	r1, r9
 800453c:	4638      	mov	r0, r7
 800453e:	47c0      	blx	r8
 8004540:	3001      	adds	r0, #1
 8004542:	d103      	bne.n	800454c <_printf_common+0xb0>
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454c:	3501      	adds	r5, #1
 800454e:	e7c4      	b.n	80044da <_printf_common+0x3e>
 8004550:	2030      	movs	r0, #48	; 0x30
 8004552:	18e1      	adds	r1, r4, r3
 8004554:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800455e:	4422      	add	r2, r4
 8004560:	3302      	adds	r3, #2
 8004562:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004566:	e7c5      	b.n	80044f4 <_printf_common+0x58>
 8004568:	2301      	movs	r3, #1
 800456a:	4622      	mov	r2, r4
 800456c:	4649      	mov	r1, r9
 800456e:	4638      	mov	r0, r7
 8004570:	47c0      	blx	r8
 8004572:	3001      	adds	r0, #1
 8004574:	d0e6      	beq.n	8004544 <_printf_common+0xa8>
 8004576:	3601      	adds	r6, #1
 8004578:	e7d9      	b.n	800452e <_printf_common+0x92>
	...

0800457c <_printf_i>:
 800457c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004580:	7e0f      	ldrb	r7, [r1, #24]
 8004582:	4691      	mov	r9, r2
 8004584:	2f78      	cmp	r7, #120	; 0x78
 8004586:	4680      	mov	r8, r0
 8004588:	460c      	mov	r4, r1
 800458a:	469a      	mov	sl, r3
 800458c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800458e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004592:	d807      	bhi.n	80045a4 <_printf_i+0x28>
 8004594:	2f62      	cmp	r7, #98	; 0x62
 8004596:	d80a      	bhi.n	80045ae <_printf_i+0x32>
 8004598:	2f00      	cmp	r7, #0
 800459a:	f000 80d9 	beq.w	8004750 <_printf_i+0x1d4>
 800459e:	2f58      	cmp	r7, #88	; 0x58
 80045a0:	f000 80a4 	beq.w	80046ec <_printf_i+0x170>
 80045a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045ac:	e03a      	b.n	8004624 <_printf_i+0xa8>
 80045ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045b2:	2b15      	cmp	r3, #21
 80045b4:	d8f6      	bhi.n	80045a4 <_printf_i+0x28>
 80045b6:	a101      	add	r1, pc, #4	; (adr r1, 80045bc <_printf_i+0x40>)
 80045b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045bc:	08004615 	.word	0x08004615
 80045c0:	08004629 	.word	0x08004629
 80045c4:	080045a5 	.word	0x080045a5
 80045c8:	080045a5 	.word	0x080045a5
 80045cc:	080045a5 	.word	0x080045a5
 80045d0:	080045a5 	.word	0x080045a5
 80045d4:	08004629 	.word	0x08004629
 80045d8:	080045a5 	.word	0x080045a5
 80045dc:	080045a5 	.word	0x080045a5
 80045e0:	080045a5 	.word	0x080045a5
 80045e4:	080045a5 	.word	0x080045a5
 80045e8:	08004737 	.word	0x08004737
 80045ec:	08004659 	.word	0x08004659
 80045f0:	08004719 	.word	0x08004719
 80045f4:	080045a5 	.word	0x080045a5
 80045f8:	080045a5 	.word	0x080045a5
 80045fc:	08004759 	.word	0x08004759
 8004600:	080045a5 	.word	0x080045a5
 8004604:	08004659 	.word	0x08004659
 8004608:	080045a5 	.word	0x080045a5
 800460c:	080045a5 	.word	0x080045a5
 8004610:	08004721 	.word	0x08004721
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	1d1a      	adds	r2, r3, #4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	602a      	str	r2, [r5, #0]
 800461c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004624:	2301      	movs	r3, #1
 8004626:	e0a4      	b.n	8004772 <_printf_i+0x1f6>
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	6829      	ldr	r1, [r5, #0]
 800462c:	0606      	lsls	r6, r0, #24
 800462e:	f101 0304 	add.w	r3, r1, #4
 8004632:	d50a      	bpl.n	800464a <_printf_i+0xce>
 8004634:	680e      	ldr	r6, [r1, #0]
 8004636:	602b      	str	r3, [r5, #0]
 8004638:	2e00      	cmp	r6, #0
 800463a:	da03      	bge.n	8004644 <_printf_i+0xc8>
 800463c:	232d      	movs	r3, #45	; 0x2d
 800463e:	4276      	negs	r6, r6
 8004640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004644:	230a      	movs	r3, #10
 8004646:	485e      	ldr	r0, [pc, #376]	; (80047c0 <_printf_i+0x244>)
 8004648:	e019      	b.n	800467e <_printf_i+0x102>
 800464a:	680e      	ldr	r6, [r1, #0]
 800464c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004650:	602b      	str	r3, [r5, #0]
 8004652:	bf18      	it	ne
 8004654:	b236      	sxthne	r6, r6
 8004656:	e7ef      	b.n	8004638 <_printf_i+0xbc>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	1d19      	adds	r1, r3, #4
 800465e:	6029      	str	r1, [r5, #0]
 8004660:	0601      	lsls	r1, r0, #24
 8004662:	d501      	bpl.n	8004668 <_printf_i+0xec>
 8004664:	681e      	ldr	r6, [r3, #0]
 8004666:	e002      	b.n	800466e <_printf_i+0xf2>
 8004668:	0646      	lsls	r6, r0, #25
 800466a:	d5fb      	bpl.n	8004664 <_printf_i+0xe8>
 800466c:	881e      	ldrh	r6, [r3, #0]
 800466e:	2f6f      	cmp	r7, #111	; 0x6f
 8004670:	bf0c      	ite	eq
 8004672:	2308      	moveq	r3, #8
 8004674:	230a      	movne	r3, #10
 8004676:	4852      	ldr	r0, [pc, #328]	; (80047c0 <_printf_i+0x244>)
 8004678:	2100      	movs	r1, #0
 800467a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800467e:	6865      	ldr	r5, [r4, #4]
 8004680:	2d00      	cmp	r5, #0
 8004682:	bfa8      	it	ge
 8004684:	6821      	ldrge	r1, [r4, #0]
 8004686:	60a5      	str	r5, [r4, #8]
 8004688:	bfa4      	itt	ge
 800468a:	f021 0104 	bicge.w	r1, r1, #4
 800468e:	6021      	strge	r1, [r4, #0]
 8004690:	b90e      	cbnz	r6, 8004696 <_printf_i+0x11a>
 8004692:	2d00      	cmp	r5, #0
 8004694:	d04d      	beq.n	8004732 <_printf_i+0x1b6>
 8004696:	4615      	mov	r5, r2
 8004698:	fbb6 f1f3 	udiv	r1, r6, r3
 800469c:	fb03 6711 	mls	r7, r3, r1, r6
 80046a0:	5dc7      	ldrb	r7, [r0, r7]
 80046a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046a6:	4637      	mov	r7, r6
 80046a8:	42bb      	cmp	r3, r7
 80046aa:	460e      	mov	r6, r1
 80046ac:	d9f4      	bls.n	8004698 <_printf_i+0x11c>
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d10b      	bne.n	80046ca <_printf_i+0x14e>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	07de      	lsls	r6, r3, #31
 80046b6:	d508      	bpl.n	80046ca <_printf_i+0x14e>
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	6861      	ldr	r1, [r4, #4]
 80046bc:	4299      	cmp	r1, r3
 80046be:	bfde      	ittt	le
 80046c0:	2330      	movle	r3, #48	; 0x30
 80046c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046ca:	1b52      	subs	r2, r2, r5
 80046cc:	6122      	str	r2, [r4, #16]
 80046ce:	464b      	mov	r3, r9
 80046d0:	4621      	mov	r1, r4
 80046d2:	4640      	mov	r0, r8
 80046d4:	f8cd a000 	str.w	sl, [sp]
 80046d8:	aa03      	add	r2, sp, #12
 80046da:	f7ff fedf 	bl	800449c <_printf_common>
 80046de:	3001      	adds	r0, #1
 80046e0:	d14c      	bne.n	800477c <_printf_i+0x200>
 80046e2:	f04f 30ff 	mov.w	r0, #4294967295
 80046e6:	b004      	add	sp, #16
 80046e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ec:	4834      	ldr	r0, [pc, #208]	; (80047c0 <_printf_i+0x244>)
 80046ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046f2:	6829      	ldr	r1, [r5, #0]
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80046fa:	6029      	str	r1, [r5, #0]
 80046fc:	061d      	lsls	r5, r3, #24
 80046fe:	d514      	bpl.n	800472a <_printf_i+0x1ae>
 8004700:	07df      	lsls	r7, r3, #31
 8004702:	bf44      	itt	mi
 8004704:	f043 0320 	orrmi.w	r3, r3, #32
 8004708:	6023      	strmi	r3, [r4, #0]
 800470a:	b91e      	cbnz	r6, 8004714 <_printf_i+0x198>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	f023 0320 	bic.w	r3, r3, #32
 8004712:	6023      	str	r3, [r4, #0]
 8004714:	2310      	movs	r3, #16
 8004716:	e7af      	b.n	8004678 <_printf_i+0xfc>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	f043 0320 	orr.w	r3, r3, #32
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	2378      	movs	r3, #120	; 0x78
 8004722:	4828      	ldr	r0, [pc, #160]	; (80047c4 <_printf_i+0x248>)
 8004724:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004728:	e7e3      	b.n	80046f2 <_printf_i+0x176>
 800472a:	0659      	lsls	r1, r3, #25
 800472c:	bf48      	it	mi
 800472e:	b2b6      	uxthmi	r6, r6
 8004730:	e7e6      	b.n	8004700 <_printf_i+0x184>
 8004732:	4615      	mov	r5, r2
 8004734:	e7bb      	b.n	80046ae <_printf_i+0x132>
 8004736:	682b      	ldr	r3, [r5, #0]
 8004738:	6826      	ldr	r6, [r4, #0]
 800473a:	1d18      	adds	r0, r3, #4
 800473c:	6961      	ldr	r1, [r4, #20]
 800473e:	6028      	str	r0, [r5, #0]
 8004740:	0635      	lsls	r5, r6, #24
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	d501      	bpl.n	800474a <_printf_i+0x1ce>
 8004746:	6019      	str	r1, [r3, #0]
 8004748:	e002      	b.n	8004750 <_printf_i+0x1d4>
 800474a:	0670      	lsls	r0, r6, #25
 800474c:	d5fb      	bpl.n	8004746 <_printf_i+0x1ca>
 800474e:	8019      	strh	r1, [r3, #0]
 8004750:	2300      	movs	r3, #0
 8004752:	4615      	mov	r5, r2
 8004754:	6123      	str	r3, [r4, #16]
 8004756:	e7ba      	b.n	80046ce <_printf_i+0x152>
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	2100      	movs	r1, #0
 800475c:	1d1a      	adds	r2, r3, #4
 800475e:	602a      	str	r2, [r5, #0]
 8004760:	681d      	ldr	r5, [r3, #0]
 8004762:	6862      	ldr	r2, [r4, #4]
 8004764:	4628      	mov	r0, r5
 8004766:	f000 f82f 	bl	80047c8 <memchr>
 800476a:	b108      	cbz	r0, 8004770 <_printf_i+0x1f4>
 800476c:	1b40      	subs	r0, r0, r5
 800476e:	6060      	str	r0, [r4, #4]
 8004770:	6863      	ldr	r3, [r4, #4]
 8004772:	6123      	str	r3, [r4, #16]
 8004774:	2300      	movs	r3, #0
 8004776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800477a:	e7a8      	b.n	80046ce <_printf_i+0x152>
 800477c:	462a      	mov	r2, r5
 800477e:	4649      	mov	r1, r9
 8004780:	4640      	mov	r0, r8
 8004782:	6923      	ldr	r3, [r4, #16]
 8004784:	47d0      	blx	sl
 8004786:	3001      	adds	r0, #1
 8004788:	d0ab      	beq.n	80046e2 <_printf_i+0x166>
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	079b      	lsls	r3, r3, #30
 800478e:	d413      	bmi.n	80047b8 <_printf_i+0x23c>
 8004790:	68e0      	ldr	r0, [r4, #12]
 8004792:	9b03      	ldr	r3, [sp, #12]
 8004794:	4298      	cmp	r0, r3
 8004796:	bfb8      	it	lt
 8004798:	4618      	movlt	r0, r3
 800479a:	e7a4      	b.n	80046e6 <_printf_i+0x16a>
 800479c:	2301      	movs	r3, #1
 800479e:	4632      	mov	r2, r6
 80047a0:	4649      	mov	r1, r9
 80047a2:	4640      	mov	r0, r8
 80047a4:	47d0      	blx	sl
 80047a6:	3001      	adds	r0, #1
 80047a8:	d09b      	beq.n	80046e2 <_printf_i+0x166>
 80047aa:	3501      	adds	r5, #1
 80047ac:	68e3      	ldr	r3, [r4, #12]
 80047ae:	9903      	ldr	r1, [sp, #12]
 80047b0:	1a5b      	subs	r3, r3, r1
 80047b2:	42ab      	cmp	r3, r5
 80047b4:	dcf2      	bgt.n	800479c <_printf_i+0x220>
 80047b6:	e7eb      	b.n	8004790 <_printf_i+0x214>
 80047b8:	2500      	movs	r5, #0
 80047ba:	f104 0619 	add.w	r6, r4, #25
 80047be:	e7f5      	b.n	80047ac <_printf_i+0x230>
 80047c0:	08004b69 	.word	0x08004b69
 80047c4:	08004b7a 	.word	0x08004b7a

080047c8 <memchr>:
 80047c8:	4603      	mov	r3, r0
 80047ca:	b510      	push	{r4, lr}
 80047cc:	b2c9      	uxtb	r1, r1
 80047ce:	4402      	add	r2, r0
 80047d0:	4293      	cmp	r3, r2
 80047d2:	4618      	mov	r0, r3
 80047d4:	d101      	bne.n	80047da <memchr+0x12>
 80047d6:	2000      	movs	r0, #0
 80047d8:	e003      	b.n	80047e2 <memchr+0x1a>
 80047da:	7804      	ldrb	r4, [r0, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	428c      	cmp	r4, r1
 80047e0:	d1f6      	bne.n	80047d0 <memchr+0x8>
 80047e2:	bd10      	pop	{r4, pc}

080047e4 <memcpy>:
 80047e4:	440a      	add	r2, r1
 80047e6:	4291      	cmp	r1, r2
 80047e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80047ec:	d100      	bne.n	80047f0 <memcpy+0xc>
 80047ee:	4770      	bx	lr
 80047f0:	b510      	push	{r4, lr}
 80047f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047f6:	4291      	cmp	r1, r2
 80047f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047fc:	d1f9      	bne.n	80047f2 <memcpy+0xe>
 80047fe:	bd10      	pop	{r4, pc}

08004800 <memmove>:
 8004800:	4288      	cmp	r0, r1
 8004802:	b510      	push	{r4, lr}
 8004804:	eb01 0402 	add.w	r4, r1, r2
 8004808:	d902      	bls.n	8004810 <memmove+0x10>
 800480a:	4284      	cmp	r4, r0
 800480c:	4623      	mov	r3, r4
 800480e:	d807      	bhi.n	8004820 <memmove+0x20>
 8004810:	1e43      	subs	r3, r0, #1
 8004812:	42a1      	cmp	r1, r4
 8004814:	d008      	beq.n	8004828 <memmove+0x28>
 8004816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800481a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800481e:	e7f8      	b.n	8004812 <memmove+0x12>
 8004820:	4601      	mov	r1, r0
 8004822:	4402      	add	r2, r0
 8004824:	428a      	cmp	r2, r1
 8004826:	d100      	bne.n	800482a <memmove+0x2a>
 8004828:	bd10      	pop	{r4, pc}
 800482a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800482e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004832:	e7f7      	b.n	8004824 <memmove+0x24>

08004834 <_free_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4605      	mov	r5, r0
 8004838:	2900      	cmp	r1, #0
 800483a:	d040      	beq.n	80048be <_free_r+0x8a>
 800483c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004840:	1f0c      	subs	r4, r1, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfb8      	it	lt
 8004846:	18e4      	addlt	r4, r4, r3
 8004848:	f000 f910 	bl	8004a6c <__malloc_lock>
 800484c:	4a1c      	ldr	r2, [pc, #112]	; (80048c0 <_free_r+0x8c>)
 800484e:	6813      	ldr	r3, [r2, #0]
 8004850:	b933      	cbnz	r3, 8004860 <_free_r+0x2c>
 8004852:	6063      	str	r3, [r4, #4]
 8004854:	6014      	str	r4, [r2, #0]
 8004856:	4628      	mov	r0, r5
 8004858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800485c:	f000 b90c 	b.w	8004a78 <__malloc_unlock>
 8004860:	42a3      	cmp	r3, r4
 8004862:	d908      	bls.n	8004876 <_free_r+0x42>
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	1821      	adds	r1, r4, r0
 8004868:	428b      	cmp	r3, r1
 800486a:	bf01      	itttt	eq
 800486c:	6819      	ldreq	r1, [r3, #0]
 800486e:	685b      	ldreq	r3, [r3, #4]
 8004870:	1809      	addeq	r1, r1, r0
 8004872:	6021      	streq	r1, [r4, #0]
 8004874:	e7ed      	b.n	8004852 <_free_r+0x1e>
 8004876:	461a      	mov	r2, r3
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	b10b      	cbz	r3, 8004880 <_free_r+0x4c>
 800487c:	42a3      	cmp	r3, r4
 800487e:	d9fa      	bls.n	8004876 <_free_r+0x42>
 8004880:	6811      	ldr	r1, [r2, #0]
 8004882:	1850      	adds	r0, r2, r1
 8004884:	42a0      	cmp	r0, r4
 8004886:	d10b      	bne.n	80048a0 <_free_r+0x6c>
 8004888:	6820      	ldr	r0, [r4, #0]
 800488a:	4401      	add	r1, r0
 800488c:	1850      	adds	r0, r2, r1
 800488e:	4283      	cmp	r3, r0
 8004890:	6011      	str	r1, [r2, #0]
 8004892:	d1e0      	bne.n	8004856 <_free_r+0x22>
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4401      	add	r1, r0
 800489a:	6011      	str	r1, [r2, #0]
 800489c:	6053      	str	r3, [r2, #4]
 800489e:	e7da      	b.n	8004856 <_free_r+0x22>
 80048a0:	d902      	bls.n	80048a8 <_free_r+0x74>
 80048a2:	230c      	movs	r3, #12
 80048a4:	602b      	str	r3, [r5, #0]
 80048a6:	e7d6      	b.n	8004856 <_free_r+0x22>
 80048a8:	6820      	ldr	r0, [r4, #0]
 80048aa:	1821      	adds	r1, r4, r0
 80048ac:	428b      	cmp	r3, r1
 80048ae:	bf01      	itttt	eq
 80048b0:	6819      	ldreq	r1, [r3, #0]
 80048b2:	685b      	ldreq	r3, [r3, #4]
 80048b4:	1809      	addeq	r1, r1, r0
 80048b6:	6021      	streq	r1, [r4, #0]
 80048b8:	6063      	str	r3, [r4, #4]
 80048ba:	6054      	str	r4, [r2, #4]
 80048bc:	e7cb      	b.n	8004856 <_free_r+0x22>
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	20000288 	.word	0x20000288

080048c4 <sbrk_aligned>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	4e0e      	ldr	r6, [pc, #56]	; (8004900 <sbrk_aligned+0x3c>)
 80048c8:	460c      	mov	r4, r1
 80048ca:	6831      	ldr	r1, [r6, #0]
 80048cc:	4605      	mov	r5, r0
 80048ce:	b911      	cbnz	r1, 80048d6 <sbrk_aligned+0x12>
 80048d0:	f000 f8bc 	bl	8004a4c <_sbrk_r>
 80048d4:	6030      	str	r0, [r6, #0]
 80048d6:	4621      	mov	r1, r4
 80048d8:	4628      	mov	r0, r5
 80048da:	f000 f8b7 	bl	8004a4c <_sbrk_r>
 80048de:	1c43      	adds	r3, r0, #1
 80048e0:	d00a      	beq.n	80048f8 <sbrk_aligned+0x34>
 80048e2:	1cc4      	adds	r4, r0, #3
 80048e4:	f024 0403 	bic.w	r4, r4, #3
 80048e8:	42a0      	cmp	r0, r4
 80048ea:	d007      	beq.n	80048fc <sbrk_aligned+0x38>
 80048ec:	1a21      	subs	r1, r4, r0
 80048ee:	4628      	mov	r0, r5
 80048f0:	f000 f8ac 	bl	8004a4c <_sbrk_r>
 80048f4:	3001      	adds	r0, #1
 80048f6:	d101      	bne.n	80048fc <sbrk_aligned+0x38>
 80048f8:	f04f 34ff 	mov.w	r4, #4294967295
 80048fc:	4620      	mov	r0, r4
 80048fe:	bd70      	pop	{r4, r5, r6, pc}
 8004900:	2000028c 	.word	0x2000028c

08004904 <_malloc_r>:
 8004904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004908:	1ccd      	adds	r5, r1, #3
 800490a:	f025 0503 	bic.w	r5, r5, #3
 800490e:	3508      	adds	r5, #8
 8004910:	2d0c      	cmp	r5, #12
 8004912:	bf38      	it	cc
 8004914:	250c      	movcc	r5, #12
 8004916:	2d00      	cmp	r5, #0
 8004918:	4607      	mov	r7, r0
 800491a:	db01      	blt.n	8004920 <_malloc_r+0x1c>
 800491c:	42a9      	cmp	r1, r5
 800491e:	d905      	bls.n	800492c <_malloc_r+0x28>
 8004920:	230c      	movs	r3, #12
 8004922:	2600      	movs	r6, #0
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	4630      	mov	r0, r6
 8004928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800492c:	4e2e      	ldr	r6, [pc, #184]	; (80049e8 <_malloc_r+0xe4>)
 800492e:	f000 f89d 	bl	8004a6c <__malloc_lock>
 8004932:	6833      	ldr	r3, [r6, #0]
 8004934:	461c      	mov	r4, r3
 8004936:	bb34      	cbnz	r4, 8004986 <_malloc_r+0x82>
 8004938:	4629      	mov	r1, r5
 800493a:	4638      	mov	r0, r7
 800493c:	f7ff ffc2 	bl	80048c4 <sbrk_aligned>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	4604      	mov	r4, r0
 8004944:	d14d      	bne.n	80049e2 <_malloc_r+0xde>
 8004946:	6834      	ldr	r4, [r6, #0]
 8004948:	4626      	mov	r6, r4
 800494a:	2e00      	cmp	r6, #0
 800494c:	d140      	bne.n	80049d0 <_malloc_r+0xcc>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	4631      	mov	r1, r6
 8004952:	4638      	mov	r0, r7
 8004954:	eb04 0803 	add.w	r8, r4, r3
 8004958:	f000 f878 	bl	8004a4c <_sbrk_r>
 800495c:	4580      	cmp	r8, r0
 800495e:	d13a      	bne.n	80049d6 <_malloc_r+0xd2>
 8004960:	6821      	ldr	r1, [r4, #0]
 8004962:	3503      	adds	r5, #3
 8004964:	1a6d      	subs	r5, r5, r1
 8004966:	f025 0503 	bic.w	r5, r5, #3
 800496a:	3508      	adds	r5, #8
 800496c:	2d0c      	cmp	r5, #12
 800496e:	bf38      	it	cc
 8004970:	250c      	movcc	r5, #12
 8004972:	4638      	mov	r0, r7
 8004974:	4629      	mov	r1, r5
 8004976:	f7ff ffa5 	bl	80048c4 <sbrk_aligned>
 800497a:	3001      	adds	r0, #1
 800497c:	d02b      	beq.n	80049d6 <_malloc_r+0xd2>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	442b      	add	r3, r5
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	e00e      	b.n	80049a4 <_malloc_r+0xa0>
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	1b52      	subs	r2, r2, r5
 800498a:	d41e      	bmi.n	80049ca <_malloc_r+0xc6>
 800498c:	2a0b      	cmp	r2, #11
 800498e:	d916      	bls.n	80049be <_malloc_r+0xba>
 8004990:	1961      	adds	r1, r4, r5
 8004992:	42a3      	cmp	r3, r4
 8004994:	6025      	str	r5, [r4, #0]
 8004996:	bf18      	it	ne
 8004998:	6059      	strne	r1, [r3, #4]
 800499a:	6863      	ldr	r3, [r4, #4]
 800499c:	bf08      	it	eq
 800499e:	6031      	streq	r1, [r6, #0]
 80049a0:	5162      	str	r2, [r4, r5]
 80049a2:	604b      	str	r3, [r1, #4]
 80049a4:	4638      	mov	r0, r7
 80049a6:	f104 060b 	add.w	r6, r4, #11
 80049aa:	f000 f865 	bl	8004a78 <__malloc_unlock>
 80049ae:	f026 0607 	bic.w	r6, r6, #7
 80049b2:	1d23      	adds	r3, r4, #4
 80049b4:	1af2      	subs	r2, r6, r3
 80049b6:	d0b6      	beq.n	8004926 <_malloc_r+0x22>
 80049b8:	1b9b      	subs	r3, r3, r6
 80049ba:	50a3      	str	r3, [r4, r2]
 80049bc:	e7b3      	b.n	8004926 <_malloc_r+0x22>
 80049be:	6862      	ldr	r2, [r4, #4]
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	bf0c      	ite	eq
 80049c4:	6032      	streq	r2, [r6, #0]
 80049c6:	605a      	strne	r2, [r3, #4]
 80049c8:	e7ec      	b.n	80049a4 <_malloc_r+0xa0>
 80049ca:	4623      	mov	r3, r4
 80049cc:	6864      	ldr	r4, [r4, #4]
 80049ce:	e7b2      	b.n	8004936 <_malloc_r+0x32>
 80049d0:	4634      	mov	r4, r6
 80049d2:	6876      	ldr	r6, [r6, #4]
 80049d4:	e7b9      	b.n	800494a <_malloc_r+0x46>
 80049d6:	230c      	movs	r3, #12
 80049d8:	4638      	mov	r0, r7
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	f000 f84c 	bl	8004a78 <__malloc_unlock>
 80049e0:	e7a1      	b.n	8004926 <_malloc_r+0x22>
 80049e2:	6025      	str	r5, [r4, #0]
 80049e4:	e7de      	b.n	80049a4 <_malloc_r+0xa0>
 80049e6:	bf00      	nop
 80049e8:	20000288 	.word	0x20000288

080049ec <_realloc_r>:
 80049ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f0:	4680      	mov	r8, r0
 80049f2:	4614      	mov	r4, r2
 80049f4:	460e      	mov	r6, r1
 80049f6:	b921      	cbnz	r1, 8004a02 <_realloc_r+0x16>
 80049f8:	4611      	mov	r1, r2
 80049fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049fe:	f7ff bf81 	b.w	8004904 <_malloc_r>
 8004a02:	b92a      	cbnz	r2, 8004a10 <_realloc_r+0x24>
 8004a04:	f7ff ff16 	bl	8004834 <_free_r>
 8004a08:	4625      	mov	r5, r4
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a10:	f000 f838 	bl	8004a84 <_malloc_usable_size_r>
 8004a14:	4284      	cmp	r4, r0
 8004a16:	4607      	mov	r7, r0
 8004a18:	d802      	bhi.n	8004a20 <_realloc_r+0x34>
 8004a1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a1e:	d812      	bhi.n	8004a46 <_realloc_r+0x5a>
 8004a20:	4621      	mov	r1, r4
 8004a22:	4640      	mov	r0, r8
 8004a24:	f7ff ff6e 	bl	8004904 <_malloc_r>
 8004a28:	4605      	mov	r5, r0
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d0ed      	beq.n	8004a0a <_realloc_r+0x1e>
 8004a2e:	42bc      	cmp	r4, r7
 8004a30:	4622      	mov	r2, r4
 8004a32:	4631      	mov	r1, r6
 8004a34:	bf28      	it	cs
 8004a36:	463a      	movcs	r2, r7
 8004a38:	f7ff fed4 	bl	80047e4 <memcpy>
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4640      	mov	r0, r8
 8004a40:	f7ff fef8 	bl	8004834 <_free_r>
 8004a44:	e7e1      	b.n	8004a0a <_realloc_r+0x1e>
 8004a46:	4635      	mov	r5, r6
 8004a48:	e7df      	b.n	8004a0a <_realloc_r+0x1e>
	...

08004a4c <_sbrk_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	2300      	movs	r3, #0
 8004a50:	4d05      	ldr	r5, [pc, #20]	; (8004a68 <_sbrk_r+0x1c>)
 8004a52:	4604      	mov	r4, r0
 8004a54:	4608      	mov	r0, r1
 8004a56:	602b      	str	r3, [r5, #0]
 8004a58:	f7fc fdd8 	bl	800160c <_sbrk>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d102      	bne.n	8004a66 <_sbrk_r+0x1a>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	b103      	cbz	r3, 8004a66 <_sbrk_r+0x1a>
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
 8004a68:	20000290 	.word	0x20000290

08004a6c <__malloc_lock>:
 8004a6c:	4801      	ldr	r0, [pc, #4]	; (8004a74 <__malloc_lock+0x8>)
 8004a6e:	f000 b811 	b.w	8004a94 <__retarget_lock_acquire_recursive>
 8004a72:	bf00      	nop
 8004a74:	20000294 	.word	0x20000294

08004a78 <__malloc_unlock>:
 8004a78:	4801      	ldr	r0, [pc, #4]	; (8004a80 <__malloc_unlock+0x8>)
 8004a7a:	f000 b80c 	b.w	8004a96 <__retarget_lock_release_recursive>
 8004a7e:	bf00      	nop
 8004a80:	20000294 	.word	0x20000294

08004a84 <_malloc_usable_size_r>:
 8004a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a88:	1f18      	subs	r0, r3, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bfbc      	itt	lt
 8004a8e:	580b      	ldrlt	r3, [r1, r0]
 8004a90:	18c0      	addlt	r0, r0, r3
 8004a92:	4770      	bx	lr

08004a94 <__retarget_lock_acquire_recursive>:
 8004a94:	4770      	bx	lr

08004a96 <__retarget_lock_release_recursive>:
 8004a96:	4770      	bx	lr

08004a98 <_init>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr

08004aa4 <_fini>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr
