
AssignRB02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b50  08004b50  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08004b50  08004b50  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b50  08004b50  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b50  08004b50  00014b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b54  08004b54  00014b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08004b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  200000d8  08004c30  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004c30  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c67e  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021bb  00000000  00000000  0002c77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0002e940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  0002f700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a02  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f604  00000000  00000000  00048db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1a5  00000000  00000000  000583b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e355b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b40  00000000  00000000  000e35ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d8 	.word	0x200000d8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a5c 	.word	0x08004a5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000dc 	.word	0x200000dc
 8000148:	08004a5c 	.word	0x08004a5c

0800014c <LED1_OFF>:
////////////////////////



// GROUP LED1;
void LED1_OFF(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <LED1_OFF+0x20>)
 8000158:	f001 ff49 	bl	8001fee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, RESET);
 800015c:	2200      	movs	r2, #0
 800015e:	2108      	movs	r1, #8
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <LED1_OFF+0x24>)
 8000162:	f001 ff44 	bl	8001fee <HAL_GPIO_WritePin>
}
 8000166:	bf00      	nop
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	40010800 	.word	0x40010800
 8000170:	40010c00 	.word	0x40010c00

08000174 <RED1_TOGGLE>:

void RED1_TOGGLE(){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	if (RED1 == 0){
 8000178:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <RED1_TOGGLE+0x38>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d10e      	bne.n	800019e <RED1_TOGGLE+0x2a>
		HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000186:	480a      	ldr	r0, [pc, #40]	; (80001b0 <RED1_TOGGLE+0x3c>)
 8000188:	f001 ff31 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2108      	movs	r1, #8
 8000190:	4808      	ldr	r0, [pc, #32]	; (80001b4 <RED1_TOGGLE+0x40>)
 8000192:	f001 ff2c 	bl	8001fee <HAL_GPIO_WritePin>
		RED1 = 1;
 8000196:	4b05      	ldr	r3, [pc, #20]	; (80001ac <RED1_TOGGLE+0x38>)
 8000198:	2201      	movs	r2, #1
 800019a:	601a      	str	r2, [r3, #0]
	}
	else{
		LED1_OFF();
		RED1 = 0;
	}
}
 800019c:	e004      	b.n	80001a8 <RED1_TOGGLE+0x34>
		LED1_OFF();
 800019e:	f7ff ffd5 	bl	800014c <LED1_OFF>
		RED1 = 0;
 80001a2:	4b02      	ldr	r3, [pc, #8]	; (80001ac <RED1_TOGGLE+0x38>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
}
 80001a8:	bf00      	nop
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	200000f4 	.word	0x200000f4
 80001b0:	40010800 	.word	0x40010800
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <YELLOW1_TOGGLE>:
void YELLOW1_TOGGLE(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	if (YELLOW1 == 0){
 80001bc:	4b0c      	ldr	r3, [pc, #48]	; (80001f0 <YELLOW1_TOGGLE+0x38>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d10e      	bne.n	80001e2 <YELLOW1_TOGGLE+0x2a>
		HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ca:	480a      	ldr	r0, [pc, #40]	; (80001f4 <YELLOW1_TOGGLE+0x3c>)
 80001cc:	f001 ff0f 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2108      	movs	r1, #8
 80001d4:	4808      	ldr	r0, [pc, #32]	; (80001f8 <YELLOW1_TOGGLE+0x40>)
 80001d6:	f001 ff0a 	bl	8001fee <HAL_GPIO_WritePin>
		YELLOW1 = 1;
 80001da:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <YELLOW1_TOGGLE+0x38>)
 80001dc:	2201      	movs	r2, #1
 80001de:	601a      	str	r2, [r3, #0]
	}
	else{
		LED1_OFF();
		YELLOW1 = 0;
	}
}
 80001e0:	e004      	b.n	80001ec <YELLOW1_TOGGLE+0x34>
		LED1_OFF();
 80001e2:	f7ff ffb3 	bl	800014c <LED1_OFF>
		YELLOW1 = 0;
 80001e6:	4b02      	ldr	r3, [pc, #8]	; (80001f0 <YELLOW1_TOGGLE+0x38>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	200000f8 	.word	0x200000f8
 80001f4:	40010800 	.word	0x40010800
 80001f8:	40010c00 	.word	0x40010c00

080001fc <GREEN1_TOGGLE>:
void GREEN1_TOGGLE(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	if (GREEN1 == 0){
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <GREEN1_TOGGLE+0x38>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d10e      	bne.n	8000226 <GREEN1_TOGGLE+0x2a>
		HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800020e:	480a      	ldr	r0, [pc, #40]	; (8000238 <GREEN1_TOGGLE+0x3c>)
 8000210:	f001 feed 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, SET);
 8000214:	2201      	movs	r2, #1
 8000216:	2108      	movs	r1, #8
 8000218:	4808      	ldr	r0, [pc, #32]	; (800023c <GREEN1_TOGGLE+0x40>)
 800021a:	f001 fee8 	bl	8001fee <HAL_GPIO_WritePin>
		GREEN1 = 1;
 800021e:	4b05      	ldr	r3, [pc, #20]	; (8000234 <GREEN1_TOGGLE+0x38>)
 8000220:	2201      	movs	r2, #1
 8000222:	601a      	str	r2, [r3, #0]
	}
	else{
		LED1_OFF();
		GREEN1 = 0;
	}
}
 8000224:	e004      	b.n	8000230 <GREEN1_TOGGLE+0x34>
		LED1_OFF();
 8000226:	f7ff ff91 	bl	800014c <LED1_OFF>
		GREEN1 = 0;
 800022a:	4b02      	ldr	r3, [pc, #8]	; (8000234 <GREEN1_TOGGLE+0x38>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	200000fc 	.word	0x200000fc
 8000238:	40010800 	.word	0x40010800
 800023c:	40010c00 	.word	0x40010c00

08000240 <LED2_OFF>:


//GROUP LED2
void LED2_OFF(){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2120      	movs	r1, #32
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <LED2_OFF+0x1c>)
 800024a:	f001 fed0 	bl	8001fee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2110      	movs	r1, #16
 8000252:	4802      	ldr	r0, [pc, #8]	; (800025c <LED2_OFF+0x1c>)
 8000254:	f001 fecb 	bl	8001fee <HAL_GPIO_WritePin>
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40010c00 	.word	0x40010c00

08000260 <RED2_TOGGLE>:

void RED2_TOGGLE(){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	if (RED2 == 0){
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <RED2_TOGGLE+0x38>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d10d      	bne.n	8000288 <RED2_TOGGLE+0x28>
		HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, SET);
 800026c:	2201      	movs	r2, #1
 800026e:	2120      	movs	r1, #32
 8000270:	480a      	ldr	r0, [pc, #40]	; (800029c <RED2_TOGGLE+0x3c>)
 8000272:	f001 febc 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	4808      	ldr	r0, [pc, #32]	; (800029c <RED2_TOGGLE+0x3c>)
 800027c:	f001 feb7 	bl	8001fee <HAL_GPIO_WritePin>
		RED2 = 1;
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <RED2_TOGGLE+0x38>)
 8000282:	2201      	movs	r2, #1
 8000284:	601a      	str	r2, [r3, #0]
	}
	else{
		LED2_OFF();
		RED2 = 0;
	}
}
 8000286:	e004      	b.n	8000292 <RED2_TOGGLE+0x32>
		LED2_OFF();
 8000288:	f7ff ffda 	bl	8000240 <LED2_OFF>
		RED2 = 0;
 800028c:	4b02      	ldr	r3, [pc, #8]	; (8000298 <RED2_TOGGLE+0x38>)
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000100 	.word	0x20000100
 800029c:	40010c00 	.word	0x40010c00

080002a0 <YELLOW2_TOGGLE>:
void YELLOW2_TOGGLE(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	if (YELLOW2 == 0){
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <YELLOW2_TOGGLE+0x38>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d10d      	bne.n	80002c8 <YELLOW2_TOGGLE+0x28>
		HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2120      	movs	r1, #32
 80002b0:	480a      	ldr	r0, [pc, #40]	; (80002dc <YELLOW2_TOGGLE+0x3c>)
 80002b2:	f001 fe9c 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2110      	movs	r1, #16
 80002ba:	4808      	ldr	r0, [pc, #32]	; (80002dc <YELLOW2_TOGGLE+0x3c>)
 80002bc:	f001 fe97 	bl	8001fee <HAL_GPIO_WritePin>
		YELLOW2 = 1;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <YELLOW2_TOGGLE+0x38>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
	}
	else{
		LED2_OFF();
		YELLOW2 = 0;
	}
}
 80002c6:	e004      	b.n	80002d2 <YELLOW2_TOGGLE+0x32>
		LED2_OFF();
 80002c8:	f7ff ffba 	bl	8000240 <LED2_OFF>
		YELLOW2 = 0;
 80002cc:	4b02      	ldr	r3, [pc, #8]	; (80002d8 <YELLOW2_TOGGLE+0x38>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000104 	.word	0x20000104
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <GREEN2_TOGGLE>:
void GREEN2_TOGGLE(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (GREEN2 == 0){
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <GREEN2_TOGGLE+0x38>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d10d      	bne.n	8000308 <GREEN2_TOGGLE+0x28>
		HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2120      	movs	r1, #32
 80002f0:	480a      	ldr	r0, [pc, #40]	; (800031c <GREEN2_TOGGLE+0x3c>)
 80002f2:	f001 fe7c 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	2110      	movs	r1, #16
 80002fa:	4808      	ldr	r0, [pc, #32]	; (800031c <GREEN2_TOGGLE+0x3c>)
 80002fc:	f001 fe77 	bl	8001fee <HAL_GPIO_WritePin>
		GREEN2 = 1;
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <GREEN2_TOGGLE+0x38>)
 8000302:	2201      	movs	r2, #1
 8000304:	601a      	str	r2, [r3, #0]
	}
	else{
		LED2_OFF();
		GREEN2 = 0;
	}
}
 8000306:	e004      	b.n	8000312 <GREEN2_TOGGLE+0x32>
		LED2_OFF();
 8000308:	f7ff ff9a 	bl	8000240 <LED2_OFF>
		GREEN2 = 0;
 800030c:	4b02      	ldr	r3, [pc, #8]	; (8000318 <GREEN2_TOGGLE+0x38>)
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000108 	.word	0x20000108
 800031c:	40010c00 	.word	0x40010c00

08000320 <LED3_OFF>:


//GROUP LED3
void LED3_OFF(){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3A_GPIO_Port, LED3A_Pin, RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <LED3_OFF+0x20>)
 800032c:	f001 fe5f 	bl	8001fee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3B_GPIO_Port, LED3B_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000336:	4803      	ldr	r0, [pc, #12]	; (8000344 <LED3_OFF+0x24>)
 8000338:	f001 fe59 	bl	8001fee <HAL_GPIO_WritePin>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40010c00 	.word	0x40010c00
 8000344:	40010800 	.word	0x40010800

08000348 <RED3_TOGGLE>:

void RED3_TOGGLE(){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	if (RED3 == 0){
 800034c:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <RED3_TOGGLE+0x3c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d10f      	bne.n	8000374 <RED3_TOGGLE+0x2c>
		HAL_GPIO_WritePin(LED3A_GPIO_Port, LED3A_Pin, SET);
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800035a:	480b      	ldr	r0, [pc, #44]	; (8000388 <RED3_TOGGLE+0x40>)
 800035c:	f001 fe47 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3B_GPIO_Port, LED3B_Pin, RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000366:	4809      	ldr	r0, [pc, #36]	; (800038c <RED3_TOGGLE+0x44>)
 8000368:	f001 fe41 	bl	8001fee <HAL_GPIO_WritePin>
		RED3 = 1;
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <RED3_TOGGLE+0x3c>)
 800036e:	2201      	movs	r2, #1
 8000370:	601a      	str	r2, [r3, #0]
	}
	else{
		LED3_OFF();
		RED3 = 0;
	}
}
 8000372:	e004      	b.n	800037e <RED3_TOGGLE+0x36>
		LED3_OFF();
 8000374:	f7ff ffd4 	bl	8000320 <LED3_OFF>
		RED3 = 0;
 8000378:	4b02      	ldr	r3, [pc, #8]	; (8000384 <RED3_TOGGLE+0x3c>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	2000010c 	.word	0x2000010c
 8000388:	40010c00 	.word	0x40010c00
 800038c:	40010800 	.word	0x40010800

08000390 <YELLOW3_TOGGLE>:
void YELLOW3_TOGGLE(){
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	if (YELLOW3 == 0){
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <YELLOW3_TOGGLE+0x3c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d10f      	bne.n	80003bc <YELLOW3_TOGGLE+0x2c>
		HAL_GPIO_WritePin(LED3A_GPIO_Port, LED3A_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a2:	480b      	ldr	r0, [pc, #44]	; (80003d0 <YELLOW3_TOGGLE+0x40>)
 80003a4:	f001 fe23 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3B_GPIO_Port, LED3B_Pin, SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ae:	4809      	ldr	r0, [pc, #36]	; (80003d4 <YELLOW3_TOGGLE+0x44>)
 80003b0:	f001 fe1d 	bl	8001fee <HAL_GPIO_WritePin>
		YELLOW3 = 1;
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <YELLOW3_TOGGLE+0x3c>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	601a      	str	r2, [r3, #0]
	}
	else{
		LED3_OFF();
		YELLOW3 = 0;
	}
}
 80003ba:	e004      	b.n	80003c6 <YELLOW3_TOGGLE+0x36>
		LED3_OFF();
 80003bc:	f7ff ffb0 	bl	8000320 <LED3_OFF>
		YELLOW3 = 0;
 80003c0:	4b02      	ldr	r3, [pc, #8]	; (80003cc <YELLOW3_TOGGLE+0x3c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000110 	.word	0x20000110
 80003d0:	40010c00 	.word	0x40010c00
 80003d4:	40010800 	.word	0x40010800

080003d8 <GREEN3_TOGGLE>:
void GREEN3_TOGGLE(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	if (GREEN3 == 0){
 80003dc:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <GREEN3_TOGGLE+0x3c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d10f      	bne.n	8000404 <GREEN3_TOGGLE+0x2c>
		HAL_GPIO_WritePin(LED3A_GPIO_Port, LED3A_Pin, RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ea:	480b      	ldr	r0, [pc, #44]	; (8000418 <GREEN3_TOGGLE+0x40>)
 80003ec:	f001 fdff 	bl	8001fee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3B_GPIO_Port, LED3B_Pin, SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f6:	4809      	ldr	r0, [pc, #36]	; (800041c <GREEN3_TOGGLE+0x44>)
 80003f8:	f001 fdf9 	bl	8001fee <HAL_GPIO_WritePin>
		GREEN3 = 1;
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <GREEN3_TOGGLE+0x3c>)
 80003fe:	2201      	movs	r2, #1
 8000400:	601a      	str	r2, [r3, #0]
	}
	else{
		LED3_OFF();
		GREEN3 = 0;
	}
}
 8000402:	e004      	b.n	800040e <GREEN3_TOGGLE+0x36>
		LED3_OFF();
 8000404:	f7ff ff8c 	bl	8000320 <LED3_OFF>
		GREEN3 = 0;
 8000408:	4b02      	ldr	r3, [pc, #8]	; (8000414 <GREEN3_TOGGLE+0x3c>)
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000114 	.word	0x20000114
 8000418:	40010c00 	.word	0x40010c00
 800041c:	40010800 	.word	0x40010800

08000420 <setTimer1>:
int timer10_flag = 0;
///


//*******
void setTimer1(int duration){
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/CLOCK_TIMER;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a08      	ldr	r2, [pc, #32]	; (800044c <setTimer1+0x2c>)
 800042c:	fb82 1203 	smull	r1, r2, r2, r3
 8000430:	1092      	asrs	r2, r2, #2
 8000432:	17db      	asrs	r3, r3, #31
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	4a06      	ldr	r2, [pc, #24]	; (8000450 <setTimer1+0x30>)
 8000438:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <setTimer1+0x34>)
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	66666667 	.word	0x66666667
 8000450:	20000118 	.word	0x20000118
 8000454:	20000140 	.word	0x20000140

08000458 <setTimer2>:

void setTimer2(int duration){
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/CLOCK_TIMER;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a08      	ldr	r2, [pc, #32]	; (8000484 <setTimer2+0x2c>)
 8000464:	fb82 1203 	smull	r1, r2, r2, r3
 8000468:	1092      	asrs	r2, r2, #2
 800046a:	17db      	asrs	r3, r3, #31
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	4a06      	ldr	r2, [pc, #24]	; (8000488 <setTimer2+0x30>)
 8000470:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <setTimer2+0x34>)
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	66666667 	.word	0x66666667
 8000488:	2000011c 	.word	0x2000011c
 800048c:	20000144 	.word	0x20000144

08000490 <setTimer3>:

void setTimer3(int duration){
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/CLOCK_TIMER;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a08      	ldr	r2, [pc, #32]	; (80004bc <setTimer3+0x2c>)
 800049c:	fb82 1203 	smull	r1, r2, r2, r3
 80004a0:	1092      	asrs	r2, r2, #2
 80004a2:	17db      	asrs	r3, r3, #31
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <setTimer3+0x30>)
 80004a8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <setTimer3+0x34>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	66666667 	.word	0x66666667
 80004c0:	20000120 	.word	0x20000120
 80004c4:	20000148 	.word	0x20000148

080004c8 <setTimer5>:
void setTimer4(int duration){
	timer4_counter = duration/CLOCK_TIMER;
	timer4_flag = 0;
}

void setTimer5(int duration){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/CLOCK_TIMER;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <setTimer5+0x2c>)
 80004d4:	fb82 1203 	smull	r1, r2, r2, r3
 80004d8:	1092      	asrs	r2, r2, #2
 80004da:	17db      	asrs	r3, r3, #31
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <setTimer5+0x30>)
 80004e0:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <setTimer5+0x34>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	66666667 	.word	0x66666667
 80004f8:	20000128 	.word	0x20000128
 80004fc:	20000150 	.word	0x20000150

08000500 <timerRun>:
}
//**********



void timerRun(){
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	if (timer1_counter == 1 ){
 8000504:	4b42      	ldr	r3, [pc, #264]	; (8000610 <timerRun+0x110>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d103      	bne.n	8000514 <timerRun+0x14>
		//BEGIN-TODO
		timer1_flag = 1;
 800050c:	4b41      	ldr	r3, [pc, #260]	; (8000614 <timerRun+0x114>)
 800050e:	2201      	movs	r2, #1
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	e004      	b.n	800051e <timerRun+0x1e>
		//END-TODO
	}
	else timer1_counter--;
 8000514:	4b3e      	ldr	r3, [pc, #248]	; (8000610 <timerRun+0x110>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3b01      	subs	r3, #1
 800051a:	4a3d      	ldr	r2, [pc, #244]	; (8000610 <timerRun+0x110>)
 800051c:	6013      	str	r3, [r2, #0]

	if (timer2_counter == 1 ) timer2_flag = 1;
 800051e:	4b3e      	ldr	r3, [pc, #248]	; (8000618 <timerRun+0x118>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d103      	bne.n	800052e <timerRun+0x2e>
 8000526:	4b3d      	ldr	r3, [pc, #244]	; (800061c <timerRun+0x11c>)
 8000528:	2201      	movs	r2, #1
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	e004      	b.n	8000538 <timerRun+0x38>
	else timer2_counter--;
 800052e:	4b3a      	ldr	r3, [pc, #232]	; (8000618 <timerRun+0x118>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3b01      	subs	r3, #1
 8000534:	4a38      	ldr	r2, [pc, #224]	; (8000618 <timerRun+0x118>)
 8000536:	6013      	str	r3, [r2, #0]

	if (timer3_counter == 1 ) timer3_flag = 1;
 8000538:	4b39      	ldr	r3, [pc, #228]	; (8000620 <timerRun+0x120>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d103      	bne.n	8000548 <timerRun+0x48>
 8000540:	4b38      	ldr	r3, [pc, #224]	; (8000624 <timerRun+0x124>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	e004      	b.n	8000552 <timerRun+0x52>
	else timer3_counter--;
 8000548:	4b35      	ldr	r3, [pc, #212]	; (8000620 <timerRun+0x120>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3b01      	subs	r3, #1
 800054e:	4a34      	ldr	r2, [pc, #208]	; (8000620 <timerRun+0x120>)
 8000550:	6013      	str	r3, [r2, #0]

	if (timer4_counter == 1 ) timer4_flag = 1;
 8000552:	4b35      	ldr	r3, [pc, #212]	; (8000628 <timerRun+0x128>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d103      	bne.n	8000562 <timerRun+0x62>
 800055a:	4b34      	ldr	r3, [pc, #208]	; (800062c <timerRun+0x12c>)
 800055c:	2201      	movs	r2, #1
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	e004      	b.n	800056c <timerRun+0x6c>
	else timer4_counter--;
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <timerRun+0x128>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3b01      	subs	r3, #1
 8000568:	4a2f      	ldr	r2, [pc, #188]	; (8000628 <timerRun+0x128>)
 800056a:	6013      	str	r3, [r2, #0]

	if (timer5_counter == 1 ) timer5_flag = 1;
 800056c:	4b30      	ldr	r3, [pc, #192]	; (8000630 <timerRun+0x130>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d103      	bne.n	800057c <timerRun+0x7c>
 8000574:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <timerRun+0x134>)
 8000576:	2201      	movs	r2, #1
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	e004      	b.n	8000586 <timerRun+0x86>
	else timer5_counter--;
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <timerRun+0x130>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3b01      	subs	r3, #1
 8000582:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <timerRun+0x130>)
 8000584:	6013      	str	r3, [r2, #0]

	if (timer6_counter == 1 ) timer6_flag = 1;
 8000586:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <timerRun+0x138>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d103      	bne.n	8000596 <timerRun+0x96>
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <timerRun+0x13c>)
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	e004      	b.n	80005a0 <timerRun+0xa0>
	else timer6_counter--;
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <timerRun+0x138>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3b01      	subs	r3, #1
 800059c:	4a26      	ldr	r2, [pc, #152]	; (8000638 <timerRun+0x138>)
 800059e:	6013      	str	r3, [r2, #0]


	if (timer7_counter == 1 ) timer7_flag = 1;
 80005a0:	4b27      	ldr	r3, [pc, #156]	; (8000640 <timerRun+0x140>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d103      	bne.n	80005b0 <timerRun+0xb0>
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <timerRun+0x144>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	e004      	b.n	80005ba <timerRun+0xba>
	else timer7_counter--;
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <timerRun+0x140>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	4a22      	ldr	r2, [pc, #136]	; (8000640 <timerRun+0x140>)
 80005b8:	6013      	str	r3, [r2, #0]

	if (timer8_counter == 1 ) timer8_flag = 1;
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <timerRun+0x148>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d103      	bne.n	80005ca <timerRun+0xca>
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <timerRun+0x14c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	e004      	b.n	80005d4 <timerRun+0xd4>
	else timer8_counter--;
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <timerRun+0x148>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4a1d      	ldr	r2, [pc, #116]	; (8000648 <timerRun+0x148>)
 80005d2:	6013      	str	r3, [r2, #0]

	if (timer9_counter == 1 ) timer9_flag = 1;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <timerRun+0x150>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d103      	bne.n	80005e4 <timerRun+0xe4>
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <timerRun+0x154>)
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	e004      	b.n	80005ee <timerRun+0xee>
	else timer9_counter--;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <timerRun+0x150>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a19      	ldr	r2, [pc, #100]	; (8000650 <timerRun+0x150>)
 80005ec:	6013      	str	r3, [r2, #0]

	if (timer10_counter == 1 ) timer10_flag = 1;
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <timerRun+0x158>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d103      	bne.n	80005fe <timerRun+0xfe>
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <timerRun+0x15c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
	else timer10_counter--;


}
 80005fc:	e004      	b.n	8000608 <timerRun+0x108>
	else timer10_counter--;
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <timerRun+0x158>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3b01      	subs	r3, #1
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <timerRun+0x158>)
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	20000118 	.word	0x20000118
 8000614:	20000140 	.word	0x20000140
 8000618:	2000011c 	.word	0x2000011c
 800061c:	20000144 	.word	0x20000144
 8000620:	20000120 	.word	0x20000120
 8000624:	20000148 	.word	0x20000148
 8000628:	20000124 	.word	0x20000124
 800062c:	2000014c 	.word	0x2000014c
 8000630:	20000128 	.word	0x20000128
 8000634:	20000150 	.word	0x20000150
 8000638:	2000012c 	.word	0x2000012c
 800063c:	20000154 	.word	0x20000154
 8000640:	20000130 	.word	0x20000130
 8000644:	20000158 	.word	0x20000158
 8000648:	20000134 	.word	0x20000134
 800064c:	2000015c 	.word	0x2000015c
 8000650:	20000138 	.word	0x20000138
 8000654:	20000160 	.word	0x20000160
 8000658:	2000013c 	.word	0x2000013c
 800065c:	20000164 	.word	0x20000164

08000660 <isButton1Pressed>:


//Thoi gian cua nhan de'
int TimerforKeyPRESS1 = 200;

int isButton1Pressed(){
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <isButton1Pressed+0x20>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d104      	bne.n	8000676 <isButton1Pressed+0x16>
		button1_flag = 0;
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <isButton1Pressed+0x20>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
		return 1;
 8000672:	2301      	movs	r3, #1
 8000674:	e000      	b.n	8000678 <isButton1Pressed+0x18>
	}
	else return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000168 	.word	0x20000168

08000684 <getKeyInput1>:
//
void getKeyInput1(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	KeyReg0_1 = KeyReg1_1;
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <getKeyInput1+0x98>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a24      	ldr	r2, [pc, #144]	; (8000720 <getKeyInput1+0x9c>)
 800068e:	6013      	str	r3, [r2, #0]
	KeyReg1_1 = KeyReg2_1;
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <getKeyInput1+0xa0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <getKeyInput1+0x98>)
 8000696:	6013      	str	r3, [r2, #0]
	KeyReg2_1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000698:	2102      	movs	r1, #2
 800069a:	4823      	ldr	r0, [pc, #140]	; (8000728 <getKeyInput1+0xa4>)
 800069c:	f001 fc90 	bl	8001fc0 <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <getKeyInput1+0xa0>)
 80006a6:	601a      	str	r2, [r3, #0]

	if (KeyReg0_1 == KeyReg1_1 && KeyReg1_1 == KeyReg2_1){
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <getKeyInput1+0x9c>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <getKeyInput1+0x98>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d131      	bne.n	8000718 <getKeyInput1+0x94>
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <getKeyInput1+0x98>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <getKeyInput1+0xa0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d12b      	bne.n	8000718 <getKeyInput1+0x94>

		if (KeyReg2_1 != KeyReg3_1){					//Nhan doi trang thai
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <getKeyInput1+0xa0>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <getKeyInput1+0xa8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d012      	beq.n	80006f2 <getKeyInput1+0x6e>
			KeyReg3_1 = KeyReg2_1;
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <getKeyInput1+0xa0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a16      	ldr	r2, [pc, #88]	; (800072c <getKeyInput1+0xa8>)
 80006d2:	6013      	str	r3, [r2, #0]
			if (KeyReg2_1 == PRESSED_STATE){			//Neu dang nhan
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <getKeyInput1+0xa0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d103      	bne.n	80006e4 <getKeyInput1+0x60>
				button1_flag = 1;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <getKeyInput1+0xac>)
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
		}


	}

}
 80006e2:	e019      	b.n	8000718 <getKeyInput1+0x94>
				button1_flag = 0;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <getKeyInput1+0xac>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS1 = 200;				//khi release thi RESET nhan de 1 giay
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <getKeyInput1+0xb0>)
 80006ec:	22c8      	movs	r2, #200	; 0xc8
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	e012      	b.n	8000718 <getKeyInput1+0x94>
			if(KeyReg2_1 == PRESSED_STATE){			// Neu dang nhan de
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <getKeyInput1+0xa0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10e      	bne.n	8000718 <getKeyInput1+0x94>
				TimerforKeyPRESS1--;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <getKeyInput1+0xb0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <getKeyInput1+0xb0>)
 8000702:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS1 == 0){			// Nhan de thanh cong
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <getKeyInput1+0xb0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d105      	bne.n	8000718 <getKeyInput1+0x94>
					TimerforKeyPRESS1 = 100;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <getKeyInput1+0xb0>)
 800070e:	2264      	movs	r2, #100	; 0x64
 8000710:	601a      	str	r2, [r3, #0]
					button1_flag = 1;
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <getKeyInput1+0xac>)
 8000714:	2201      	movs	r2, #1
 8000716:	601a      	str	r2, [r3, #0]
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000004 	.word	0x20000004
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008
 8000728:	40010800 	.word	0x40010800
 800072c:	2000000c 	.word	0x2000000c
 8000730:	20000168 	.word	0x20000168
 8000734:	20000010 	.word	0x20000010

08000738 <isButton2Pressed>:

//Thoi gian cua nhan de'
int TimerforKeyPRESS2 = 200;


int isButton2Pressed(){
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <isButton2Pressed+0x20>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d104      	bne.n	800074e <isButton2Pressed+0x16>
		button2_flag = 0;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <isButton2Pressed+0x20>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
		return 1;
 800074a:	2301      	movs	r3, #1
 800074c:	e000      	b.n	8000750 <isButton2Pressed+0x18>
	}
	else return 0;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	2000016c 	.word	0x2000016c

0800075c <getKeyInput2>:
//
void getKeyInput2(){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	KeyReg0_2 = KeyReg1_2;
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <getKeyInput2+0x98>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a24      	ldr	r2, [pc, #144]	; (80007f8 <getKeyInput2+0x9c>)
 8000766:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = KeyReg2_2;
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <getKeyInput2+0xa0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <getKeyInput2+0x98>)
 800076e:	6013      	str	r3, [r2, #0]
	KeyReg2_2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000770:	2110      	movs	r1, #16
 8000772:	4823      	ldr	r0, [pc, #140]	; (8000800 <getKeyInput2+0xa4>)
 8000774:	f001 fc24 	bl	8001fc0 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <getKeyInput2+0xa0>)
 800077e:	601a      	str	r2, [r3, #0]


	if (KeyReg0_2 == KeyReg1_2 && KeyReg1_2 == KeyReg2_2){
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <getKeyInput2+0x9c>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <getKeyInput2+0x98>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	429a      	cmp	r2, r3
 800078a:	d131      	bne.n	80007f0 <getKeyInput2+0x94>
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <getKeyInput2+0x98>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <getKeyInput2+0xa0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	429a      	cmp	r2, r3
 8000796:	d12b      	bne.n	80007f0 <getKeyInput2+0x94>

		if (KeyReg2_2 != KeyReg3_2){					//Nhan doi trang thai
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <getKeyInput2+0xa0>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <getKeyInput2+0xa8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d012      	beq.n	80007ca <getKeyInput2+0x6e>
			KeyReg3_2 = KeyReg2_2;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <getKeyInput2+0xa0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a16      	ldr	r2, [pc, #88]	; (8000804 <getKeyInput2+0xa8>)
 80007aa:	6013      	str	r3, [r2, #0]
			if (KeyReg2_2 == PRESSED_STATE){			//Neu dang nhan
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <getKeyInput2+0xa0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d103      	bne.n	80007bc <getKeyInput2+0x60>
				button2_flag = 1;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <getKeyInput2+0xac>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
		}


	}

}
 80007ba:	e019      	b.n	80007f0 <getKeyInput2+0x94>
				button2_flag = 0;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <getKeyInput2+0xac>)
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS2 = 100;				//khi release thi RESET nhan de 1 giay
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <getKeyInput2+0xb0>)
 80007c4:	2264      	movs	r2, #100	; 0x64
 80007c6:	601a      	str	r2, [r3, #0]
}
 80007c8:	e012      	b.n	80007f0 <getKeyInput2+0x94>
			if(KeyReg2_2 == PRESSED_STATE){			// Neu dang nhan de
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <getKeyInput2+0xa0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10e      	bne.n	80007f0 <getKeyInput2+0x94>
				TimerforKeyPRESS2--;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <getKeyInput2+0xb0>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <getKeyInput2+0xb0>)
 80007da:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS2 == 0){			// Nhan de thanh cong
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <getKeyInput2+0xb0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d105      	bne.n	80007f0 <getKeyInput2+0x94>
					TimerforKeyPRESS2 = 50;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <getKeyInput2+0xb0>)
 80007e6:	2232      	movs	r2, #50	; 0x32
 80007e8:	601a      	str	r2, [r3, #0]
					button2_flag = 1;
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <getKeyInput2+0xac>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000018 	.word	0x20000018
 80007f8:	20000014 	.word	0x20000014
 80007fc:	2000001c 	.word	0x2000001c
 8000800:	40010800 	.word	0x40010800
 8000804:	20000020 	.word	0x20000020
 8000808:	2000016c 	.word	0x2000016c
 800080c:	20000024 	.word	0x20000024

08000810 <isButton3Pressed>:
//Thoi gian cua nhan de'
int TimerforKeyPRESS3 = 200;
int TimerforDBClick4 = 0;


int isButton3Pressed(){
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <isButton3Pressed+0x20>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d104      	bne.n	8000826 <isButton3Pressed+0x16>
		button3_flag = 0;
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <isButton3Pressed+0x20>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
		return 1;
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <isButton3Pressed+0x18>
	}
	else return 0;
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000170 	.word	0x20000170

08000834 <isButton3DoubleClick>:


int isButton3DoubleClick(){
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	if (button3_dbclick == 1){
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <isButton3DoubleClick+0x20>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d104      	bne.n	800084a <isButton3DoubleClick+0x16>
		button3_dbclick = 0;
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <isButton3DoubleClick+0x20>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
		return 1;
 8000846:	2301      	movs	r3, #1
 8000848:	e000      	b.n	800084c <isButton3DoubleClick+0x18>
	}
	else return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000174 	.word	0x20000174

08000858 <getKeyInput3>:


//
void getKeyInput3(){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	KeyReg0_3 = KeyReg1_3;
 800085c:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <getKeyInput3+0xb8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a2c      	ldr	r2, [pc, #176]	; (8000914 <getKeyInput3+0xbc>)
 8000862:	6013      	str	r3, [r2, #0]
	KeyReg1_3 = KeyReg2_3;
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <getKeyInput3+0xc0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a29      	ldr	r2, [pc, #164]	; (8000910 <getKeyInput3+0xb8>)
 800086a:	6013      	str	r3, [r2, #0]
	KeyReg2_3 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 800086c:	2101      	movs	r1, #1
 800086e:	482b      	ldr	r0, [pc, #172]	; (800091c <getKeyInput3+0xc4>)
 8000870:	f001 fba6 	bl	8001fc0 <HAL_GPIO_ReadPin>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <getKeyInput3+0xc0>)
 800087a:	601a      	str	r2, [r3, #0]


	if (KeyReg0_3 == KeyReg1_3 && KeyReg1_3 == KeyReg2_3){
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <getKeyInput3+0xbc>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <getKeyInput3+0xb8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	429a      	cmp	r2, r3
 8000886:	d141      	bne.n	800090c <getKeyInput3+0xb4>
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <getKeyInput3+0xb8>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <getKeyInput3+0xc0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	429a      	cmp	r2, r3
 8000892:	d13b      	bne.n	800090c <getKeyInput3+0xb4>

		if (KeyReg2_3 != KeyReg3_3){					//Nhan doi trang thai
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <getKeyInput3+0xc0>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b21      	ldr	r3, [pc, #132]	; (8000920 <getKeyInput3+0xc8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	429a      	cmp	r2, r3
 800089e:	d01c      	beq.n	80008da <getKeyInput3+0x82>
			KeyReg3_3 = KeyReg2_3;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <getKeyInput3+0xc0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a1e      	ldr	r2, [pc, #120]	; (8000920 <getKeyInput3+0xc8>)
 80008a6:	6013      	str	r3, [r2, #0]
			if (KeyReg2_3 == PRESSED_STATE){			//Neu dang nhan
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <getKeyInput3+0xc0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10a      	bne.n	80008c6 <getKeyInput3+0x6e>
				button3_flag = 1;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <getKeyInput3+0xcc>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	601a      	str	r2, [r3, #0]
				if (TimerforDBClick4 > 0){
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <getKeyInput3+0xd0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	dd26      	ble.n	800090c <getKeyInput3+0xb4>
					button3_dbclick = 1;
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <getKeyInput3+0xd4>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	601a      	str	r2, [r3, #0]
		}


	}

}
 80008c4:	e022      	b.n	800090c <getKeyInput3+0xb4>
				button3_flag = 0;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <getKeyInput3+0xcc>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS3 = 100;				//khi release thi RESET nhan de 1 giay, neu nhan lai trong 1 giay thi tinh la nhan de
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <getKeyInput3+0xd8>)
 80008ce:	2264      	movs	r2, #100	; 0x64
 80008d0:	601a      	str	r2, [r3, #0]
				TimerforDBClick4 = 40;					// settimer double click 400ms.
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <getKeyInput3+0xd0>)
 80008d4:	2228      	movs	r2, #40	; 0x28
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	e018      	b.n	800090c <getKeyInput3+0xb4>
			if(KeyReg2_3 == PRESSED_STATE){			// Neu dang nhan de
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <getKeyInput3+0xc0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d10f      	bne.n	8000902 <getKeyInput3+0xaa>
				TimerforKeyPRESS3--;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <getKeyInput3+0xd8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	4a11      	ldr	r2, [pc, #68]	; (8000930 <getKeyInput3+0xd8>)
 80008ea:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS3 == 0){			// Nhan de thanh cong
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <getKeyInput3+0xd8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10b      	bne.n	800090c <getKeyInput3+0xb4>
					TimerforKeyPRESS3 = 50;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <getKeyInput3+0xd8>)
 80008f6:	2232      	movs	r2, #50	; 0x32
 80008f8:	601a      	str	r2, [r3, #0]
					button3_flag = 1;
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <getKeyInput3+0xcc>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	e004      	b.n	800090c <getKeyInput3+0xb4>
			else TimerforDBClick4--;				//Releasing , khong lam gi ca
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <getKeyInput3+0xd0>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3b01      	subs	r3, #1
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <getKeyInput3+0xd0>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000002c 	.word	0x2000002c
 8000914:	20000028 	.word	0x20000028
 8000918:	20000030 	.word	0x20000030
 800091c:	40010c00 	.word	0x40010c00
 8000920:	20000034 	.word	0x20000034
 8000924:	20000170 	.word	0x20000170
 8000928:	2000017c 	.word	0x2000017c
 800092c:	20000174 	.word	0x20000174
 8000930:	20000038 	.word	0x20000038

08000934 <isButton4Pressed>:
int KeyReg3_4 = NORMAL_STATE;

//Thoi gian cua nhan de'
int TimerforKeyPRESS4 = 200;

int isButton4Pressed(){
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	if (button4_flag == 1){
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <isButton4Pressed+0x20>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d104      	bne.n	800094a <isButton4Pressed+0x16>
		button4_flag = 0;
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <isButton4Pressed+0x20>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
		return 1;
 8000946:	2301      	movs	r3, #1
 8000948:	e000      	b.n	800094c <isButton4Pressed+0x18>
	}
	else return 0;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000178 	.word	0x20000178

08000958 <getKeyInput4>:


//
void getKeyInput4(){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	KeyReg0_4 = KeyReg1_4;
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <getKeyInput4+0x98>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <getKeyInput4+0x9c>)
 8000962:	6013      	str	r3, [r2, #0]
	KeyReg1_4 = KeyReg2_4;
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <getKeyInput4+0xa0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <getKeyInput4+0x98>)
 800096a:	6013      	str	r3, [r2, #0]
	//KeyReg2_4 = HAL_GPIO_ReadPin(BUTTONUSER_GPIO_Port,BUTTONUSER_Pin);
	KeyReg2_4 = HAL_GPIO_ReadPin(BUTTONUSER_GPIO_Port,BUTTONUSER_Pin);
 800096c:	2101      	movs	r1, #1
 800096e:	4823      	ldr	r0, [pc, #140]	; (80009fc <getKeyInput4+0xa4>)
 8000970:	f001 fb26 	bl	8001fc0 <HAL_GPIO_ReadPin>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <getKeyInput4+0xa0>)
 800097a:	601a      	str	r2, [r3, #0]


	if (KeyReg0_4 == KeyReg1_4 && KeyReg1_4 == KeyReg2_4){
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <getKeyInput4+0x9c>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <getKeyInput4+0x98>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	429a      	cmp	r2, r3
 8000986:	d131      	bne.n	80009ec <getKeyInput4+0x94>
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <getKeyInput4+0x98>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <getKeyInput4+0xa0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	429a      	cmp	r2, r3
 8000992:	d12b      	bne.n	80009ec <getKeyInput4+0x94>

		if (KeyReg2_4 != KeyReg3_4){					//Nhan doi trang thai
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <getKeyInput4+0xa0>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <getKeyInput4+0xa8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	429a      	cmp	r2, r3
 800099e:	d012      	beq.n	80009c6 <getKeyInput4+0x6e>
			KeyReg3_4 = KeyReg2_4;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <getKeyInput4+0xa0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <getKeyInput4+0xa8>)
 80009a6:	6013      	str	r3, [r2, #0]
			if (KeyReg2_4 == PRESSED_STATE){			//Neu dang nhan
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <getKeyInput4+0xa0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d103      	bne.n	80009b8 <getKeyInput4+0x60>
				button4_flag = 1;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <getKeyInput4+0xac>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
		}


	}

}
 80009b6:	e019      	b.n	80009ec <getKeyInput4+0x94>
				button4_flag = 0;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <getKeyInput4+0xac>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS4 = 100;				//khi release thi RESET nhan de 1 giay
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <getKeyInput4+0xb0>)
 80009c0:	2264      	movs	r2, #100	; 0x64
 80009c2:	601a      	str	r2, [r3, #0]
}
 80009c4:	e012      	b.n	80009ec <getKeyInput4+0x94>
			if(KeyReg2_4 == PRESSED_STATE){			// Neu dang nhan de
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <getKeyInput4+0xa0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10e      	bne.n	80009ec <getKeyInput4+0x94>
				TimerforKeyPRESS4--;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <getKeyInput4+0xb0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	4a0c      	ldr	r2, [pc, #48]	; (8000a08 <getKeyInput4+0xb0>)
 80009d6:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS4 == 0){			// Nhan de thanh cong
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <getKeyInput4+0xb0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d105      	bne.n	80009ec <getKeyInput4+0x94>
					TimerforKeyPRESS4 = 50;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <getKeyInput4+0xb0>)
 80009e2:	2232      	movs	r2, #50	; 0x32
 80009e4:	601a      	str	r2, [r3, #0]
					button4_flag = 1;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <getKeyInput4+0xac>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000040 	.word	0x20000040
 80009f4:	2000003c 	.word	0x2000003c
 80009f8:	20000044 	.word	0x20000044
 80009fc:	40010800 	.word	0x40010800
 8000a00:	20000048 	.word	0x20000048
 8000a04:	20000178 	.word	0x20000178
 8000a08:	2000004c 	.word	0x2000004c

08000a0c <printstatus>:

int status_man = INIT;
int temp_timer = 0;
int reset = 0;

void printstatus(){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09a      	sub	sp, #104	; 0x68
 8000a10:	af00      	add	r7, sp, #0

	switch(status_man){
 8000a12:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <printstatus+0xcc>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3b65      	subs	r3, #101	; 0x65
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d854      	bhi.n	8000ac6 <printstatus+0xba>
 8000a1c:	a201      	add	r2, pc, #4	; (adr r2, 8000a24 <printstatus+0x18>)
 8000a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a22:	bf00      	nop
 8000a24:	08000a35 	.word	0x08000a35
 8000a28:	08000a73 	.word	0x08000a73
 8000a2c:	08000aab 	.word	0x08000aab
 8000a30:	08000a8f 	.word	0x08000a8f
	case INIT:
	{
		char str2[100];
		if (reset) HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!RESET ALL----#\r\n"), 1000);
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <printstatus+0xd0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00c      	beq.n	8000a56 <printstatus+0x4a>
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4928      	ldr	r1, [pc, #160]	; (8000ae0 <printstatus+0xd4>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 fb91 	bl	8004168 <siprintf>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	1d39      	adds	r1, r7, #4
 8000a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a50:	4824      	ldr	r0, [pc, #144]	; (8000ae4 <printstatus+0xd8>)
 8000a52:	f002 fecc 	bl	80037ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!AUTO MODE----#\r\n"), 1000);
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	4923      	ldr	r1, [pc, #140]	; (8000ae8 <printstatus+0xdc>)
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 fb84 	bl	8004168 <siprintf>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	1d39      	adds	r1, r7, #4
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	481e      	ldr	r0, [pc, #120]	; (8000ae4 <printstatus+0xd8>)
 8000a6c:	f002 febf 	bl	80037ee <HAL_UART_Transmit>
	}
		break;
 8000a70:	e02a      	b.n	8000ac8 <printstatus+0xbc>

	case MAN_RED:
	{
		char str2[100];
		HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!RED MODE----#\r\n"), 1000);
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	491d      	ldr	r1, [pc, #116]	; (8000aec <printstatus+0xe0>)
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 fb76 	bl	8004168 <siprintf>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	1d39      	adds	r1, r7, #4
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <printstatus+0xd8>)
 8000a88:	f002 feb1 	bl	80037ee <HAL_UART_Transmit>
	}
		break;
 8000a8c:	e01c      	b.n	8000ac8 <printstatus+0xbc>

	case MAN_YELLOW:
	{
		char str2[100];
		HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!YELLOW MODE----#\r\n"), 1000);
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4917      	ldr	r1, [pc, #92]	; (8000af0 <printstatus+0xe4>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 fb68 	bl	8004168 <siprintf>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	4810      	ldr	r0, [pc, #64]	; (8000ae4 <printstatus+0xd8>)
 8000aa4:	f002 fea3 	bl	80037ee <HAL_UART_Transmit>
	}
		break;
 8000aa8:	e00e      	b.n	8000ac8 <printstatus+0xbc>

	case MAN_GREEN:
	{
		char str2[100];
		HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!GREEN MODE----#\r\n"), 1000);
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4911      	ldr	r1, [pc, #68]	; (8000af4 <printstatus+0xe8>)
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 fb5a 	bl	8004168 <siprintf>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	1d39      	adds	r1, r7, #4
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <printstatus+0xd8>)
 8000ac0:	f002 fe95 	bl	80037ee <HAL_UART_Transmit>
	}
		break;
 8000ac4:	e000      	b.n	8000ac8 <printstatus+0xbc>

	default:
		break;
 8000ac6:	bf00      	nop
	}

	reset = 0;
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <printstatus+0xd0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]

}
 8000ace:	bf00      	nop
 8000ad0:	3768      	adds	r7, #104	; 0x68
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000050 	.word	0x20000050
 8000adc:	20000184 	.word	0x20000184
 8000ae0:	08004a74 	.word	0x08004a74
 8000ae4:	20000188 	.word	0x20000188
 8000ae8:	08004a88 	.word	0x08004a88
 8000aec:	08004a9c 	.word	0x08004a9c
 8000af0:	08004ab0 	.word	0x08004ab0
 8000af4:	08004ac4 	.word	0x08004ac4

08000af8 <fsm_manual_run>:


void fsm_manual_run(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09a      	sub	sp, #104	; 0x68
 8000afc:	af00      	add	r7, sp, #0

	switch(status_man){
 8000afe:	4b93      	ldr	r3, [pc, #588]	; (8000d4c <fsm_manual_run+0x254>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3b65      	subs	r3, #101	; 0x65
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	f200 8114 	bhi.w	8000d32 <fsm_manual_run+0x23a>
 8000b0a:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <fsm_manual_run+0x18>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000b21 	.word	0x08000b21
 8000b14:	08000b7d 	.word	0x08000b7d
 8000b18:	08000ca7 	.word	0x08000ca7
 8000b1c:	08000c1b 	.word	0x08000c1b

	case INIT:
		if (isButton1Pressed()){
 8000b20:	f7ff fd9e 	bl	8000660 <isButton1Pressed>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <fsm_manual_run+0x42>
			status_man = MAN_RED;
 8000b2a:	4b88      	ldr	r3, [pc, #544]	; (8000d4c <fsm_manual_run+0x254>)
 8000b2c:	2266      	movs	r2, #102	; 0x66
 8000b2e:	601a      	str	r2, [r3, #0]
			temp_timer = 0;
 8000b30:	4b87      	ldr	r3, [pc, #540]	; (8000d50 <fsm_manual_run+0x258>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
			printstatus();
 8000b36:	f7ff ff69 	bl	8000a0c <printstatus>
		}
		if (isButton3DoubleClick()){
 8000b3a:	f7ff fe7b 	bl	8000834 <isButton3DoubleClick>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	f000 80f8 	beq.w	8000d36 <fsm_manual_run+0x23e>
			timer_red = RED_TIME;
 8000b46:	4b83      	ldr	r3, [pc, #524]	; (8000d54 <fsm_manual_run+0x25c>)
 8000b48:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b4c:	601a      	str	r2, [r3, #0]
			timer_green = GREEN_TIME;
 8000b4e:	4b82      	ldr	r3, [pc, #520]	; (8000d58 <fsm_manual_run+0x260>)
 8000b50:	f241 7270 	movw	r2, #6000	; 0x1770
 8000b54:	601a      	str	r2, [r3, #0]
			timer_yellow = YELLOW_TIME;
 8000b56:	4b81      	ldr	r3, [pc, #516]	; (8000d5c <fsm_manual_run+0x264>)
 8000b58:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000b5c:	601a      	str	r2, [r3, #0]
			status_light1 = INIT1;
 8000b5e:	4b80      	ldr	r3, [pc, #512]	; (8000d60 <fsm_manual_run+0x268>)
 8000b60:	2213      	movs	r2, #19
 8000b62:	601a      	str	r2, [r3, #0]
			status_light2 = INIT2;
 8000b64:	4b7f      	ldr	r3, [pc, #508]	; (8000d64 <fsm_manual_run+0x26c>)
 8000b66:	2217      	movs	r2, #23
 8000b68:	601a      	str	r2, [r3, #0]
			status_man = INIT;
 8000b6a:	4b78      	ldr	r3, [pc, #480]	; (8000d4c <fsm_manual_run+0x254>)
 8000b6c:	2265      	movs	r2, #101	; 0x65
 8000b6e:	601a      	str	r2, [r3, #0]
			reset = 1;
 8000b70:	4b7d      	ldr	r3, [pc, #500]	; (8000d68 <fsm_manual_run+0x270>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
			printstatus();
 8000b76:	f7ff ff49 	bl	8000a0c <printstatus>
		}
		break;
 8000b7a:	e0dc      	b.n	8000d36 <fsm_manual_run+0x23e>



	case MAN_RED:

		if (isButton1Pressed()){
 8000b7c:	f7ff fd70 	bl	8000660 <isButton1Pressed>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d007      	beq.n	8000b96 <fsm_manual_run+0x9e>
			status_man = MAN_YELLOW;
 8000b86:	4b71      	ldr	r3, [pc, #452]	; (8000d4c <fsm_manual_run+0x254>)
 8000b88:	2268      	movs	r2, #104	; 0x68
 8000b8a:	601a      	str	r2, [r3, #0]
			temp_timer = 0;
 8000b8c:	4b70      	ldr	r3, [pc, #448]	; (8000d50 <fsm_manual_run+0x258>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
			printstatus();
 8000b92:	f7ff ff3b 	bl	8000a0c <printstatus>
		}
		if (isButton2Pressed()){
 8000b96:	f7ff fdcf 	bl	8000738 <isButton2Pressed>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d014      	beq.n	8000bca <fsm_manual_run+0xd2>
			temp_timer = temp_timer + 1000;
 8000ba0:	4b6b      	ldr	r3, [pc, #428]	; (8000d50 <fsm_manual_run+0x258>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ba8:	4a69      	ldr	r2, [pc, #420]	; (8000d50 <fsm_manual_run+0x258>)
 8000baa:	6013      	str	r3, [r2, #0]
			char str[100];
			HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!INC: %d#\r\n",temp_timer), 1000);
 8000bac:	4b68      	ldr	r3, [pc, #416]	; (8000d50 <fsm_manual_run+0x258>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	496e      	ldr	r1, [pc, #440]	; (8000d6c <fsm_manual_run+0x274>)
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 fad7 	bl	8004168 <siprintf>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	1d39      	adds	r1, r7, #4
 8000bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc4:	486a      	ldr	r0, [pc, #424]	; (8000d70 <fsm_manual_run+0x278>)
 8000bc6:	f002 fe12 	bl	80037ee <HAL_UART_Transmit>
		}
		if (isButton3Pressed()){
 8000bca:	f7ff fe21 	bl	8000810 <isButton3Pressed>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 80b2 	beq.w	8000d3a <fsm_manual_run+0x242>
			timer_red = temp_timer;
 8000bd6:	4b5e      	ldr	r3, [pc, #376]	; (8000d50 <fsm_manual_run+0x258>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a5e      	ldr	r2, [pc, #376]	; (8000d54 <fsm_manual_run+0x25c>)
 8000bdc:	6013      	str	r3, [r2, #0]
			if (timer_red < timer_green + timer_yellow) timer_red = timer_green + timer_yellow;
 8000bde:	4b5e      	ldr	r3, [pc, #376]	; (8000d58 <fsm_manual_run+0x260>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4b5e      	ldr	r3, [pc, #376]	; (8000d5c <fsm_manual_run+0x264>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	441a      	add	r2, r3
 8000be8:	4b5a      	ldr	r3, [pc, #360]	; (8000d54 <fsm_manual_run+0x25c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dd07      	ble.n	8000c00 <fsm_manual_run+0x108>
 8000bf0:	4b59      	ldr	r3, [pc, #356]	; (8000d58 <fsm_manual_run+0x260>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b59      	ldr	r3, [pc, #356]	; (8000d5c <fsm_manual_run+0x264>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a56      	ldr	r2, [pc, #344]	; (8000d54 <fsm_manual_run+0x25c>)
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e006      	b.n	8000c0e <fsm_manual_run+0x116>
			else timer_green = timer_red - timer_yellow;
 8000c00:	4b54      	ldr	r3, [pc, #336]	; (8000d54 <fsm_manual_run+0x25c>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b55      	ldr	r3, [pc, #340]	; (8000d5c <fsm_manual_run+0x264>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	4a53      	ldr	r2, [pc, #332]	; (8000d58 <fsm_manual_run+0x260>)
 8000c0c:	6013      	str	r3, [r2, #0]
			status_man = INIT;
 8000c0e:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <fsm_manual_run+0x254>)
 8000c10:	2265      	movs	r2, #101	; 0x65
 8000c12:	601a      	str	r2, [r3, #0]
			printstatus();
 8000c14:	f7ff fefa 	bl	8000a0c <printstatus>
		}
		break;
 8000c18:	e08f      	b.n	8000d3a <fsm_manual_run+0x242>


	case MAN_YELLOW:
		if (isButton1Pressed()){
 8000c1a:	f7ff fd21 	bl	8000660 <isButton1Pressed>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d007      	beq.n	8000c34 <fsm_manual_run+0x13c>
			temp_timer = 0;
 8000c24:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <fsm_manual_run+0x258>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
			status_man = MAN_GREEN;
 8000c2a:	4b48      	ldr	r3, [pc, #288]	; (8000d4c <fsm_manual_run+0x254>)
 8000c2c:	2267      	movs	r2, #103	; 0x67
 8000c2e:	601a      	str	r2, [r3, #0]
			printstatus();
 8000c30:	f7ff feec 	bl	8000a0c <printstatus>
		}
		if (isButton2Pressed()){
 8000c34:	f7ff fd80 	bl	8000738 <isButton2Pressed>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d014      	beq.n	8000c68 <fsm_manual_run+0x170>
			temp_timer = temp_timer + 1000;
 8000c3e:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <fsm_manual_run+0x258>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000c46:	4a42      	ldr	r2, [pc, #264]	; (8000d50 <fsm_manual_run+0x258>)
 8000c48:	6013      	str	r3, [r2, #0]
			char str[100];
			HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!INC: %d#\r\n",temp_timer), 1000);
 8000c4a:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <fsm_manual_run+0x258>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4946      	ldr	r1, [pc, #280]	; (8000d6c <fsm_manual_run+0x274>)
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 fa88 	bl	8004168 <siprintf>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	1d39      	adds	r1, r7, #4
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	4843      	ldr	r0, [pc, #268]	; (8000d70 <fsm_manual_run+0x278>)
 8000c64:	f002 fdc3 	bl	80037ee <HAL_UART_Transmit>
		}
		if (isButton3Pressed()){
 8000c68:	f7ff fdd2 	bl	8000810 <isButton3Pressed>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d065      	beq.n	8000d3e <fsm_manual_run+0x246>
			timer_yellow = temp_timer;
 8000c72:	4b37      	ldr	r3, [pc, #220]	; (8000d50 <fsm_manual_run+0x258>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a39      	ldr	r2, [pc, #228]	; (8000d5c <fsm_manual_run+0x264>)
 8000c78:	6013      	str	r3, [r2, #0]
			if (timer_red != timer_green + timer_yellow) timer_red = timer_green + timer_yellow;
 8000c7a:	4b37      	ldr	r3, [pc, #220]	; (8000d58 <fsm_manual_run+0x260>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b37      	ldr	r3, [pc, #220]	; (8000d5c <fsm_manual_run+0x264>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	441a      	add	r2, r3
 8000c84:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <fsm_manual_run+0x25c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d006      	beq.n	8000c9a <fsm_manual_run+0x1a2>
 8000c8c:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <fsm_manual_run+0x260>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <fsm_manual_run+0x264>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a2f      	ldr	r2, [pc, #188]	; (8000d54 <fsm_manual_run+0x25c>)
 8000c98:	6013      	str	r3, [r2, #0]
			status_man = INIT;
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <fsm_manual_run+0x254>)
 8000c9c:	2265      	movs	r2, #101	; 0x65
 8000c9e:	601a      	str	r2, [r3, #0]
			printstatus();
 8000ca0:	f7ff feb4 	bl	8000a0c <printstatus>
		}
		break;
 8000ca4:	e04b      	b.n	8000d3e <fsm_manual_run+0x246>


	case MAN_GREEN:

		if (isButton1Pressed()){
 8000ca6:	f7ff fcdb 	bl	8000660 <isButton1Pressed>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d007      	beq.n	8000cc0 <fsm_manual_run+0x1c8>
			temp_timer = 0;
 8000cb0:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <fsm_manual_run+0x258>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
			status_man = INIT;
 8000cb6:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <fsm_manual_run+0x254>)
 8000cb8:	2265      	movs	r2, #101	; 0x65
 8000cba:	601a      	str	r2, [r3, #0]
			printstatus();
 8000cbc:	f7ff fea6 	bl	8000a0c <printstatus>
		}
		if (isButton2Pressed()){
 8000cc0:	f7ff fd3a 	bl	8000738 <isButton2Pressed>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d014      	beq.n	8000cf4 <fsm_manual_run+0x1fc>
			temp_timer = temp_timer + 1000;
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <fsm_manual_run+0x258>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000cd2:	4a1f      	ldr	r2, [pc, #124]	; (8000d50 <fsm_manual_run+0x258>)
 8000cd4:	6013      	str	r3, [r2, #0]
			char str[100];
			HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!INC: %d#\r\n",temp_timer), 1000);
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <fsm_manual_run+0x258>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4923      	ldr	r1, [pc, #140]	; (8000d6c <fsm_manual_run+0x274>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 fa42 	bl	8004168 <siprintf>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	1d39      	adds	r1, r7, #4
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	4820      	ldr	r0, [pc, #128]	; (8000d70 <fsm_manual_run+0x278>)
 8000cf0:	f002 fd7d 	bl	80037ee <HAL_UART_Transmit>
		}
		if (isButton3Pressed()){
 8000cf4:	f7ff fd8c 	bl	8000810 <isButton3Pressed>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d021      	beq.n	8000d42 <fsm_manual_run+0x24a>
			timer_green = temp_timer;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <fsm_manual_run+0x258>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <fsm_manual_run+0x260>)
 8000d04:	6013      	str	r3, [r2, #0]
			if (timer_red != timer_green + timer_yellow) timer_red = timer_green + timer_yellow;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <fsm_manual_run+0x260>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <fsm_manual_run+0x264>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	441a      	add	r2, r3
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <fsm_manual_run+0x25c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d006      	beq.n	8000d26 <fsm_manual_run+0x22e>
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <fsm_manual_run+0x260>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <fsm_manual_run+0x264>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <fsm_manual_run+0x25c>)
 8000d24:	6013      	str	r3, [r2, #0]
			status_man = INIT;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <fsm_manual_run+0x254>)
 8000d28:	2265      	movs	r2, #101	; 0x65
 8000d2a:	601a      	str	r2, [r3, #0]
			printstatus();
 8000d2c:	f7ff fe6e 	bl	8000a0c <printstatus>
		}
		break;
 8000d30:	e007      	b.n	8000d42 <fsm_manual_run+0x24a>

	default:
		break;
 8000d32:	bf00      	nop
 8000d34:	e006      	b.n	8000d44 <fsm_manual_run+0x24c>
		break;
 8000d36:	bf00      	nop
 8000d38:	e004      	b.n	8000d44 <fsm_manual_run+0x24c>
		break;
 8000d3a:	bf00      	nop
 8000d3c:	e002      	b.n	8000d44 <fsm_manual_run+0x24c>
		break;
 8000d3e:	bf00      	nop
 8000d40:	e000      	b.n	8000d44 <fsm_manual_run+0x24c>
		break;
 8000d42:	bf00      	nop
	}

}
 8000d44:	bf00      	nop
 8000d46:	3768      	adds	r7, #104	; 0x68
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000050 	.word	0x20000050
 8000d50:	20000180 	.word	0x20000180
 8000d54:	20000054 	.word	0x20000054
 8000d58:	20000058 	.word	0x20000058
 8000d5c:	2000005c 	.word	0x2000005c
 8000d60:	20000064 	.word	0x20000064
 8000d64:	20000068 	.word	0x20000068
 8000d68:	20000184 	.word	0x20000184
 8000d6c:	08004ad8 	.word	0x08004ad8
 8000d70:	20000188 	.word	0x20000188

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09e      	sub	sp, #120	; 0x78
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7a:	f000 fd59 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7e:	f000 f8e5 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d82:	f000 fa11 	bl	80011a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d86:	f000 f9e5 	bl	8001154 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d8a:	f000 f921 	bl	8000fd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d8e:	f000 f96b 	bl	8001068 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 8000d92:	485f      	ldr	r0, [pc, #380]	; (8000f10 <main+0x19c>)
 8000d94:	f001 fdd0 	bl	8002938 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	485e      	ldr	r0, [pc, #376]	; (8000f14 <main+0x1a0>)
 8000d9c:	f001 fe76 	bl	8002a8c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Set up for Pedestrian
  int userButton = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	677b      	str	r3, [r7, #116]	; 0x74
  LED3_OFF();
 8000da4:	f7ff fabc 	bl	8000320 <LED3_OFF>

  //Set up for start
  setTimer1(250);
 8000da8:	20fa      	movs	r0, #250	; 0xfa
 8000daa:	f7ff fb39 	bl	8000420 <setTimer1>
  int one_sec= 3;
 8000dae:	2303      	movs	r3, #3
 8000db0:	673b      	str	r3, [r7, #112]	; 0x70
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //All about FSM
	  fsm_manual_run();		//manual fsm
 8000db2:	f7ff fea1 	bl	8000af8 <fsm_manual_run>
	  light_control_1();	//fsm for traffic light 1
 8000db6:	f000 fc23 	bl	8001600 <light_control_1>
	  light_control_2();	//fsm for traffic light 2
 8000dba:	f000 fc97 	bl	80016ec <light_control_2>


	  if (isButton4Pressed()){		// Pedestrian pressed
 8000dbe:	f7ff fdb9 	bl	8000934 <isButton4Pressed>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d005      	beq.n	8000dd4 <main+0x60>
		  userButton = 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	677b      	str	r3, [r7, #116]	; 0x74
		  setTimer5(20000);
 8000dcc:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000dd0:	f7ff fb7a 	bl	80004c8 <setTimer5>
	  }
	  if (timer5_flag == 1){		// Time out
 8000dd4:	4b50      	ldr	r3, [pc, #320]	; (8000f18 <main+0x1a4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d103      	bne.n	8000de4 <main+0x70>
		  userButton = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	677b      	str	r3, [r7, #116]	; 0x74
		  LED3_OFF();
 8000de0:	f7ff fa9e 	bl	8000320 <LED3_OFF>
	  }



	  if (timer1_flag == 1){		// One duration blinky 250ms
 8000de4:	4b4d      	ldr	r3, [pc, #308]	; (8000f1c <main+0x1a8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d1e2      	bne.n	8000db2 <main+0x3e>
		  setTimer1(250);
 8000dec:	20fa      	movs	r0, #250	; 0xfa
 8000dee:	f7ff fb17 	bl	8000420 <setTimer1>

		  one_sec++;				// Count down, print to terminal
 8000df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000df4:	3301      	adds	r3, #1
 8000df6:	673b      	str	r3, [r7, #112]	; 0x70
		  if (one_sec == 4){
 8000df8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	d118      	bne.n	8000e30 <main+0xbc>
			  one_sec = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	673b      	str	r3, [r7, #112]	; 0x70
			  int time = timer3_counter/100;
 8000e02:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <main+0x1ac>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a47      	ldr	r2, [pc, #284]	; (8000f24 <main+0x1b0>)
 8000e08:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0c:	1152      	asrs	r2, r2, #5
 8000e0e:	17db      	asrs	r3, r3, #31
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	66fb      	str	r3, [r7, #108]	; 0x6c
			  char str[100];
			  HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!7SEG: %d#\r\n",time), 1000);
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e18:	4943      	ldr	r1, [pc, #268]	; (8000f28 <main+0x1b4>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 f9a4 	bl	8004168 <siprintf>
 8000e20:	4603      	mov	r3, r0
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	1d39      	adds	r1, r7, #4
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	4840      	ldr	r0, [pc, #256]	; (8000f2c <main+0x1b8>)
 8000e2c:	f002 fcdf 	bl	80037ee <HAL_UART_Transmit>
		  }

	  		  //Cum den 1
		  if (RED1_flag){
 8000e30:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <main+0x1bc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <main+0xca>
			  RED1_TOGGLE();
 8000e38:	f7ff f99c 	bl	8000174 <RED1_TOGGLE>
 8000e3c:	e00c      	b.n	8000e58 <main+0xe4>
		  }
		  else if(YELLOW1_flag){
 8000e3e:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <main+0x1c0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <main+0xd8>
			  YELLOW1_TOGGLE();
 8000e46:	f7ff f9b7 	bl	80001b8 <YELLOW1_TOGGLE>
 8000e4a:	e005      	b.n	8000e58 <main+0xe4>
		  }
		  else if(GREEN1_flag){
 8000e4c:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <main+0x1c4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <main+0xe4>
	  		  GREEN1_TOGGLE();
 8000e54:	f7ff f9d2 	bl	80001fc <GREEN1_TOGGLE>
	  	  }

	  		  //Cum den 2
		  if(RED2_flag){
 8000e58:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <main+0x1c8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00b      	beq.n	8000e78 <main+0x104>
	  		  RED2_TOGGLE();
 8000e60:	f7ff f9fe 	bl	8000260 <RED2_TOGGLE>
	  		  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
 8000e64:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <main+0x1a0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
	 		  if (userButton) RED3_TOGGLE();
 8000e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d09f      	beq.n	8000db2 <main+0x3e>
 8000e72:	f7ff fa69 	bl	8000348 <RED3_TOGGLE>
 8000e76:	e79c      	b.n	8000db2 <main+0x3e>
		  }
		  else if(YELLOW2_flag){
 8000e78:	4b31      	ldr	r3, [pc, #196]	; (8000f40 <main+0x1cc>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d039      	beq.n	8000ef4 <main+0x180>
			  YELLOW2_TOGGLE();
 8000e80:	f7ff fa0e 	bl	80002a0 <YELLOW2_TOGGLE>
			  if (userButton) {
 8000e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d02f      	beq.n	8000eea <main+0x176>
				  YELLOW3_TOGGLE();
 8000e8a:	f7ff fa81 	bl	8000390 <YELLOW3_TOGGLE>
				  int feq = 100 - 100*(10*timer3_counter/timer_yellow);
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <main+0x1ac>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <main+0x1d0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ea4:	f1c3 0301 	rsb	r3, r3, #1
 8000ea8:	2264      	movs	r2, #100	; 0x64
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	66bb      	str	r3, [r7, #104]	; 0x68
				  __HAL_TIM_SET_AUTORELOAD(&htim3,feq*5/2);
 8000eb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	0fda      	lsrs	r2, r3, #31
 8000eba:	4413      	add	r3, r2
 8000ebc:	105b      	asrs	r3, r3, #1
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <main+0x1a0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ec6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	0fda      	lsrs	r2, r3, #31
 8000ed0:	4413      	add	r3, r2
 8000ed2:	105b      	asrs	r3, r3, #1
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <main+0x1a0>)
 8000ed8:	60da      	str	r2, [r3, #12]
				  __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,feq);
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <main+0x1a0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_Delay(100);
 8000ee2:	2064      	movs	r0, #100	; 0x64
 8000ee4:	f000 fd06 	bl	80018f4 <HAL_Delay>
 8000ee8:	e763      	b.n	8000db2 <main+0x3e>
			  }
			  else __HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1,0);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <main+0x1a0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef2:	e75e      	b.n	8000db2 <main+0x3e>
		  }
	  	  else if(GREEN2_flag){
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <main+0x1d4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f43f af5a 	beq.w	8000db2 <main+0x3e>
	  		  GREEN2_TOGGLE();
 8000efe:	f7ff f9ef 	bl	80002e0 <GREEN2_TOGGLE>
	  		  if (userButton) GREEN3_TOGGLE();
 8000f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f43f af54 	beq.w	8000db2 <main+0x3e>
 8000f0a:	f7ff fa65 	bl	80003d8 <GREEN3_TOGGLE>
	  fsm_manual_run();		//manual fsm
 8000f0e:	e750      	b.n	8000db2 <main+0x3e>
 8000f10:	200001cc 	.word	0x200001cc
 8000f14:	20000214 	.word	0x20000214
 8000f18:	20000150 	.word	0x20000150
 8000f1c:	20000140 	.word	0x20000140
 8000f20:	20000120 	.word	0x20000120
 8000f24:	51eb851f 	.word	0x51eb851f
 8000f28:	08004ae4 	.word	0x08004ae4
 8000f2c:	20000188 	.word	0x20000188
 8000f30:	20000260 	.word	0x20000260
 8000f34:	20000268 	.word	0x20000268
 8000f38:	20000270 	.word	0x20000270
 8000f3c:	20000264 	.word	0x20000264
 8000f40:	2000026c 	.word	0x2000026c
 8000f44:	2000005c 	.word	0x2000005c
 8000f48:	20000274 	.word	0x20000274

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b090      	sub	sp, #64	; 0x40
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0318 	add.w	r3, r7, #24
 8000f56:	2228      	movs	r2, #40	; 0x28
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 f8fc 	bl	8004158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f72:	2301      	movs	r3, #1
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f76:	2310      	movs	r3, #16
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f82:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 f869 	bl	8002064 <HAL_RCC_OscConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f98:	f000 f9b8 	bl	800130c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fad6 	bl	8002568 <HAL_RCC_ClockConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fc2:	f000 f9a3 	bl	800130c <Error_Handler>
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3740      	adds	r7, #64	; 0x40
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_TIM2_Init+0x94>)
 8000fee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_TIM2_Init+0x94>)
 8000ff6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ffa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_TIM2_Init+0x94>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_TIM2_Init+0x94>)
 8001004:	224f      	movs	r2, #79	; 0x4f
 8001006:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_TIM2_Init+0x94>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_TIM2_Init+0x94>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001014:	4813      	ldr	r0, [pc, #76]	; (8001064 <MX_TIM2_Init+0x94>)
 8001016:	f001 fc3f 	bl	8002898 <HAL_TIM_Base_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001020:	f000 f974 	bl	800130c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	4619      	mov	r1, r3
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_TIM2_Init+0x94>)
 8001032:	f001 ff93 	bl	8002f5c <HAL_TIM_ConfigClockSource>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800103c:	f000 f966 	bl	800130c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_TIM2_Init+0x94>)
 800104e:	f002 fb11 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001058:	f000 f958 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200001cc 	.word	0x200001cc

08001068 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	; 0x38
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	615a      	str	r2, [r3, #20]
 8001096:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001098:	4b2c      	ldr	r3, [pc, #176]	; (800114c <MX_TIM3_Init+0xe4>)
 800109a:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <MX_TIM3_Init+0xe8>)
 800109c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <MX_TIM3_Init+0xe4>)
 80010a0:	223f      	movs	r2, #63	; 0x3f
 80010a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a4:	4b29      	ldr	r3, [pc, #164]	; (800114c <MX_TIM3_Init+0xe4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80010aa:	4b28      	ldr	r3, [pc, #160]	; (800114c <MX_TIM3_Init+0xe4>)
 80010ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b2:	4b26      	ldr	r3, [pc, #152]	; (800114c <MX_TIM3_Init+0xe4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <MX_TIM3_Init+0xe4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010be:	4823      	ldr	r0, [pc, #140]	; (800114c <MX_TIM3_Init+0xe4>)
 80010c0:	f001 fbea 	bl	8002898 <HAL_TIM_Base_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80010ca:	f000 f91f 	bl	800130c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d8:	4619      	mov	r1, r3
 80010da:	481c      	ldr	r0, [pc, #112]	; (800114c <MX_TIM3_Init+0xe4>)
 80010dc:	f001 ff3e 	bl	8002f5c <HAL_TIM_ConfigClockSource>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80010e6:	f000 f911 	bl	800130c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010ea:	4818      	ldr	r0, [pc, #96]	; (800114c <MX_TIM3_Init+0xe4>)
 80010ec:	f001 fc76 	bl	80029dc <HAL_TIM_PWM_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010f6:	f000 f909 	bl	800130c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	4619      	mov	r1, r3
 8001108:	4810      	ldr	r0, [pc, #64]	; (800114c <MX_TIM3_Init+0xe4>)
 800110a:	f002 fab3 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001114:	f000 f8fa 	bl	800130c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001118:	2360      	movs	r3, #96	; 0x60
 800111a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	4807      	ldr	r0, [pc, #28]	; (800114c <MX_TIM3_Init+0xe4>)
 8001130:	f001 fe56 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800113a:	f000 f8e7 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800113e:	4803      	ldr	r0, [pc, #12]	; (800114c <MX_TIM3_Init+0xe4>)
 8001140:	f000 f95c 	bl	80013fc <HAL_TIM_MspPostInit>

}
 8001144:	bf00      	nop
 8001146:	3738      	adds	r7, #56	; 0x38
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000214 	.word	0x20000214
 8001150:	40000400 	.word	0x40000400

08001154 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <MX_USART2_UART_Init+0x50>)
 800115c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800118c:	f002 fae2 	bl	8003754 <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001196:	f000 f8b9 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000188 	.word	0x20000188
 80011a4:	40004400 	.word	0x40004400

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011bc:	4b45      	ldr	r3, [pc, #276]	; (80012d4 <MX_GPIO_Init+0x12c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a44      	ldr	r2, [pc, #272]	; (80012d4 <MX_GPIO_Init+0x12c>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b42      	ldr	r3, [pc, #264]	; (80012d4 <MX_GPIO_Init+0x12c>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d4:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <MX_GPIO_Init+0x12c>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a3e      	ldr	r2, [pc, #248]	; (80012d4 <MX_GPIO_Init+0x12c>)
 80011da:	f043 0320 	orr.w	r3, r3, #32
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <MX_GPIO_Init+0x12c>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <MX_GPIO_Init+0x12c>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a38      	ldr	r2, [pc, #224]	; (80012d4 <MX_GPIO_Init+0x12c>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <MX_GPIO_Init+0x12c>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b33      	ldr	r3, [pc, #204]	; (80012d4 <MX_GPIO_Init+0x12c>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a32      	ldr	r2, [pc, #200]	; (80012d4 <MX_GPIO_Init+0x12c>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <MX_GPIO_Init+0x12c>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED3B_Pin|LED1A_Pin, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8001222:	482d      	ldr	r0, [pc, #180]	; (80012d8 <MX_GPIO_Init+0x130>)
 8001224:	f000 fee3 	bl	8001fee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED1_Pin|LED3A_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin
 8001228:	2200      	movs	r2, #0
 800122a:	f64f 71bc 	movw	r1, #65468	; 0xffbc
 800122e:	482b      	ldr	r0, [pc, #172]	; (80012dc <MX_GPIO_Init+0x134>)
 8001230:	f000 fedd 	bl	8001fee <HAL_GPIO_WritePin>
                          |LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|LED1B_Pin
                          |LED2B_Pin|LED2A_Pin|LED_RED3_Pin|LED_YELLOW3_Pin
                          |LED_GREEN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001238:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123a:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <MX_GPIO_Init+0x138>)
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123e:	2301      	movs	r3, #1
 8001240:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4619      	mov	r1, r3
 8001248:	4826      	ldr	r0, [pc, #152]	; (80012e4 <MX_GPIO_Init+0x13c>)
 800124a:	f000 fd35 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTONUSER_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTONUSER_Pin|BUTTON1_Pin|BUTTON2_Pin;
 800124e:	2313      	movs	r3, #19
 8001250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001256:	2301      	movs	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	4619      	mov	r1, r3
 8001260:	481d      	ldr	r0, [pc, #116]	; (80012d8 <MX_GPIO_Init+0x130>)
 8001262:	f000 fd29 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED3B_Pin LED1A_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED3B_Pin|LED1A_Pin;
 8001266:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800126a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2302      	movs	r3, #2
 8001276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4619      	mov	r1, r3
 800127e:	4816      	ldr	r0, [pc, #88]	; (80012d8 <MX_GPIO_Init+0x130>)
 8001280:	f000 fd1a 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8001284:	2301      	movs	r3, #1
 8001286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128c:	2301      	movs	r3, #1
 800128e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	4811      	ldr	r0, [pc, #68]	; (80012dc <MX_GPIO_Init+0x134>)
 8001298:	f000 fd0e 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED3A_Pin LED_YELLOW1_Pin LED_GREEN1_Pin
                           LED_RED2_Pin LED_YELLOW2_Pin LED_GREEN2_Pin LED1B_Pin
                           LED2B_Pin LED2A_Pin LED_RED3_Pin LED_YELLOW3_Pin
                           LED_GREEN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED3A_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin
 800129c:	f64f 73bc 	movw	r3, #65468	; 0xffbc
 80012a0:	613b      	str	r3, [r7, #16]
                          |LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|LED1B_Pin
                          |LED2B_Pin|LED2A_Pin|LED_RED3_Pin|LED_YELLOW3_Pin
                          |LED_GREEN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4619      	mov	r1, r3
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <MX_GPIO_Init+0x134>)
 80012b6:	f000 fcff 	bl	8001cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2028      	movs	r0, #40	; 0x28
 80012c0:	f000 fc13 	bl	8001aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012c4:	2028      	movs	r0, #40	; 0x28
 80012c6:	f000 fc2c 	bl	8001b22 <HAL_NVIC_EnableIRQ>

}
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010800 	.word	0x40010800
 80012dc:	40010c00 	.word	0x40010c00
 80012e0:	10110000 	.word	0x10110000
 80012e4:	40011000 	.word	0x40011000

080012e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	timerRun();
 80012f0:	f7ff f906 	bl	8000500 <timerRun>
	getKeyInput1();
 80012f4:	f7ff f9c6 	bl	8000684 <getKeyInput1>
	getKeyInput2();
 80012f8:	f7ff fa30 	bl	800075c <getKeyInput2>
	getKeyInput3();
 80012fc:	f7ff faac 	bl	8000858 <getKeyInput3>
	getKeyInput4();
 8001300:	f7ff fb2a 	bl	8000958 <getKeyInput4>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001310:	b672      	cpsid	i
}
 8001312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001314:	e7fe      	b.n	8001314 <Error_Handler+0x8>
	...

08001318 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_MspInit+0x5c>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4a14      	ldr	r2, [pc, #80]	; (8001374 <HAL_MspInit+0x5c>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6193      	str	r3, [r2, #24]
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_MspInit+0x5c>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_MspInit+0x5c>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_MspInit+0x5c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_MspInit+0x5c>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_MspInit+0x60>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_MspInit+0x60>)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000

0800137c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800138c:	d114      	bne.n	80013b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_TIM_Base_MspInit+0x78>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_TIM_Base_MspInit+0x78>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_TIM_Base_MspInit+0x78>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	201c      	movs	r0, #28
 80013ac:	f000 fb9d 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b0:	201c      	movs	r0, #28
 80013b2:	f000 fbb6 	bl	8001b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013b6:	e018      	b.n	80013ea <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <HAL_TIM_Base_MspInit+0x7c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d113      	bne.n	80013ea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_TIM_Base_MspInit+0x78>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_TIM_Base_MspInit+0x78>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_TIM_Base_MspInit+0x78>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	201d      	movs	r0, #29
 80013e0:	f000 fb83 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013e4:	201d      	movs	r0, #29
 80013e6:	f000 fb9c 	bl	8001b22 <HAL_NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40000400 	.word	0x40000400

080013fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <HAL_TIM_MspPostInit+0x58>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d117      	bne.n	800144c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_TIM_MspPostInit+0x5c>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <HAL_TIM_MspPostInit+0x5c>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_TIM_MspPostInit+0x5c>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001434:	2340      	movs	r3, #64	; 0x40
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2302      	movs	r3, #2
 800143e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4619      	mov	r1, r3
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <HAL_TIM_MspPostInit+0x60>)
 8001448:	f000 fc36 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40000400 	.word	0x40000400
 8001458:	40021000 	.word	0x40021000
 800145c:	40010800 	.word	0x40010800

08001460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_UART_MspInit+0x80>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d12b      	bne.n	80014d8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_UART_MspInit+0x84>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_UART_MspInit+0x84>)
 8001486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148a:	61d3      	str	r3, [r2, #28]
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_UART_MspInit+0x84>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_UART_MspInit+0x84>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_UART_MspInit+0x84>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_UART_MspInit+0x84>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014b0:	230c      	movs	r3, #12
 80014b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4619      	mov	r1, r3
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <HAL_UART_MspInit+0x88>)
 80014c4:	f000 fbf8 	bl	8001cb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	2026      	movs	r0, #38	; 0x26
 80014ce:	f000 fb0c 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014d2:	2026      	movs	r0, #38	; 0x26
 80014d4:	f000 fb25 	bl	8001b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40004400 	.word	0x40004400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010800 	.word	0x40010800

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <NMI_Handler+0x4>

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <MemManage_Handler+0x4>

080014fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <UsageFault_Handler+0x4>

0800150a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001532:	f000 f9c3 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <TIM2_IRQHandler+0x10>)
 8001542:	f001 fb45 	bl	8002bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200001cc 	.word	0x200001cc

08001550 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM3_IRQHandler+0x10>)
 8001556:	f001 fb3b 	bl	8002bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000214 	.word	0x20000214

08001564 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <USART2_IRQHandler+0x10>)
 800156a:	f002 f9d3 	bl	8003914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000188 	.word	0x20000188

08001578 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800157c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001580:	f000 fd4e 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f002 fda4 	bl	8004104 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20005000 	.word	0x20005000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	2000025c 	.word	0x2000025c
 80015f0:	20000290 	.word	0x20000290

080015f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <light_control_1>:

int status_light1 = INIT1;
int status_light2 = INIT2;


void light_control_1(){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

	switch(status_light1){
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <light_control_1+0xcc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3b13      	subs	r3, #19
 800160a:	2b03      	cmp	r3, #3
 800160c:	d854      	bhi.n	80016b8 <light_control_1+0xb8>
 800160e:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <light_control_1+0x14>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	08001625 	.word	0x08001625
 8001618:	0800163b 	.word	0x0800163b
 800161c:	0800168f 	.word	0x0800168f
 8001620:	08001665 	.word	0x08001665

		case INIT1:
			setTimer2(timer_red);
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <light_control_1+0xd0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff15 	bl	8000458 <setTimer2>
			LED1_OFF();
 800162e:	f7fe fd8d 	bl	800014c <LED1_OFF>
			status_light1 = AUTO_RED1;
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <light_control_1+0xcc>)
 8001634:	2214      	movs	r2, #20
 8001636:	601a      	str	r2, [r3, #0]
			break;
 8001638:	e045      	b.n	80016c6 <light_control_1+0xc6>

		case AUTO_RED1:
			RED1_flag = 1;
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <light_control_1+0xd4>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <light_control_1+0xd8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d139      	bne.n	80016bc <light_control_1+0xbc>
				setTimer2(timer_green);
 8001648:	4b24      	ldr	r3, [pc, #144]	; (80016dc <light_control_1+0xdc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff03 	bl	8000458 <setTimer2>
				LED1_OFF();
 8001652:	f7fe fd7b 	bl	800014c <LED1_OFF>
				RED1_flag = 0;
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <light_control_1+0xd4>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_GREEN1;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <light_control_1+0xcc>)
 800165e:	2216      	movs	r2, #22
 8001660:	601a      	str	r2, [r3, #0]
			}
			break;
 8001662:	e02b      	b.n	80016bc <light_control_1+0xbc>

		case AUTO_GREEN1:
			GREEN1_flag = 1;
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <light_control_1+0xe0>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <light_control_1+0xd8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d126      	bne.n	80016c0 <light_control_1+0xc0>
				setTimer2(timer_yellow);
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <light_control_1+0xe4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe feee 	bl	8000458 <setTimer2>
				LED1_OFF();
 800167c:	f7fe fd66 	bl	800014c <LED1_OFF>
				GREEN1_flag = 0;
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <light_control_1+0xe0>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_YELLOW1;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <light_control_1+0xcc>)
 8001688:	2215      	movs	r2, #21
 800168a:	601a      	str	r2, [r3, #0]
			}
			break;
 800168c:	e018      	b.n	80016c0 <light_control_1+0xc0>

		case AUTO_YELLOW1:
			YELLOW1_flag = 1;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <light_control_1+0xe8>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <light_control_1+0xd8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d113      	bne.n	80016c4 <light_control_1+0xc4>
				setTimer2(timer_red);
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <light_control_1+0xd0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fed9 	bl	8000458 <setTimer2>
				LED1_OFF();
 80016a6:	f7fe fd51 	bl	800014c <LED1_OFF>
				YELLOW1_flag = 0;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <light_control_1+0xe8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_RED1;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <light_control_1+0xcc>)
 80016b2:	2214      	movs	r2, #20
 80016b4:	601a      	str	r2, [r3, #0]
			}
			break;
 80016b6:	e005      	b.n	80016c4 <light_control_1+0xc4>
		default:
			break;
 80016b8:	bf00      	nop
 80016ba:	e004      	b.n	80016c6 <light_control_1+0xc6>
			break;
 80016bc:	bf00      	nop
 80016be:	e002      	b.n	80016c6 <light_control_1+0xc6>
			break;
 80016c0:	bf00      	nop
 80016c2:	e000      	b.n	80016c6 <light_control_1+0xc6>
			break;
 80016c4:	bf00      	nop
		}

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000064 	.word	0x20000064
 80016d0:	20000054 	.word	0x20000054
 80016d4:	20000260 	.word	0x20000260
 80016d8:	20000144 	.word	0x20000144
 80016dc:	20000058 	.word	0x20000058
 80016e0:	20000270 	.word	0x20000270
 80016e4:	2000005c 	.word	0x2000005c
 80016e8:	20000268 	.word	0x20000268

080016ec <light_control_2>:




void light_control_2(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

	switch(status_light2){
 80016f0:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <light_control_2+0xd8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3b17      	subs	r3, #23
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d85a      	bhi.n	80017b0 <light_control_2+0xc4>
 80016fa:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <light_control_2+0x14>)
 80016fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001700:	08001711 	.word	0x08001711
 8001704:	08001733 	.word	0x08001733
 8001708:	0800175d 	.word	0x0800175d
 800170c:	08001787 	.word	0x08001787

		case INIT2:
			setTimer3(timer_green);
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <light_control_2+0xdc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe febb 	bl	8000490 <setTimer3>
			LED2_OFF();
 800171a:	f7fe fd91 	bl	8000240 <LED2_OFF>
			RED2_flag = 0;
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <light_control_2+0xe0>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
			YELLOW2_flag = 0;
 8001724:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <light_control_2+0xe4>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
			status_light2 = AUTO_GREEN2;
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <light_control_2+0xd8>)
 800172c:	221a      	movs	r2, #26
 800172e:	601a      	str	r2, [r3, #0]
			break;
 8001730:	e045      	b.n	80017be <light_control_2+0xd2>

		case AUTO_RED2:
			RED2_flag = 1;
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <light_control_2+0xe0>)
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 8001738:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <light_control_2+0xe8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d139      	bne.n	80017b4 <light_control_2+0xc8>
				setTimer3(timer_green);
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <light_control_2+0xdc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fea3 	bl	8000490 <setTimer3>
				LED2_OFF();
 800174a:	f7fe fd79 	bl	8000240 <LED2_OFF>
				RED2_flag = 0;
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <light_control_2+0xe0>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_GREEN2;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <light_control_2+0xd8>)
 8001756:	221a      	movs	r2, #26
 8001758:	601a      	str	r2, [r3, #0]
			}
			break;
 800175a:	e02b      	b.n	80017b4 <light_control_2+0xc8>

		case AUTO_YELLOW2:
			YELLOW2_flag = 1;
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <light_control_2+0xe4>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <light_control_2+0xe8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d126      	bne.n	80017b8 <light_control_2+0xcc>
				setTimer3(timer_red);
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <light_control_2+0xec>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fe8e 	bl	8000490 <setTimer3>
				LED2_OFF();
 8001774:	f7fe fd64 	bl	8000240 <LED2_OFF>
				YELLOW2_flag = 0;
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <light_control_2+0xe4>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_RED2;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <light_control_2+0xd8>)
 8001780:	2218      	movs	r2, #24
 8001782:	601a      	str	r2, [r3, #0]
			}
			break;
 8001784:	e018      	b.n	80017b8 <light_control_2+0xcc>

		case AUTO_GREEN2:
			GREEN2_flag = 1;
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <light_control_2+0xf0>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <light_control_2+0xe8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d113      	bne.n	80017bc <light_control_2+0xd0>
				setTimer3(timer_yellow);
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <light_control_2+0xf4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fe79 	bl	8000490 <setTimer3>
				LED2_OFF();
 800179e:	f7fe fd4f 	bl	8000240 <LED2_OFF>
				GREEN2_flag = 0;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <light_control_2+0xf0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_YELLOW2;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <light_control_2+0xd8>)
 80017aa:	2219      	movs	r2, #25
 80017ac:	601a      	str	r2, [r3, #0]
			}
			break;
 80017ae:	e005      	b.n	80017bc <light_control_2+0xd0>
		default:
			break;
 80017b0:	bf00      	nop
 80017b2:	e004      	b.n	80017be <light_control_2+0xd2>
			break;
 80017b4:	bf00      	nop
 80017b6:	e002      	b.n	80017be <light_control_2+0xd2>
			break;
 80017b8:	bf00      	nop
 80017ba:	e000      	b.n	80017be <light_control_2+0xd2>
			break;
 80017bc:	bf00      	nop
		}

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000068 	.word	0x20000068
 80017c8:	20000058 	.word	0x20000058
 80017cc:	20000264 	.word	0x20000264
 80017d0:	2000026c 	.word	0x2000026c
 80017d4:	20000148 	.word	0x20000148
 80017d8:	20000054 	.word	0x20000054
 80017dc:	20000274 	.word	0x20000274
 80017e0:	2000005c 	.word	0x2000005c

080017e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e6:	490d      	ldr	r1, [pc, #52]	; (800181c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017fc:	4c0a      	ldr	r4, [pc, #40]	; (8001828 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800180a:	f7ff fef3 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f002 fc7f 	bl	8004110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001812:	f7ff faaf 	bl	8000d74 <main>
  bx lr
 8001816:	4770      	bx	lr
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001820:	08004b58 	.word	0x08004b58
  ldr r2, =_sbss
 8001824:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001828:	2000028c 	.word	0x2000028c

0800182c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC1_2_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_Init+0x28>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_Init+0x28>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f947 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f808 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff fd64 	bl	8001318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40022000 	.word	0x40022000

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x54>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x58>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f95f 	bl	8001b3e <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d80a      	bhi.n	80018a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f000 f927 	bl	8001aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <HAL_InitTick+0x5c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000060 	.word	0x20000060
 80018b4:	20000070 	.word	0x20000070
 80018b8:	2000006c 	.word	0x2000006c

080018bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_IncTick+0x1c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x20>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a03      	ldr	r2, [pc, #12]	; (80018dc <HAL_IncTick+0x20>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000070 	.word	0x20000070
 80018dc:	20000278 	.word	0x20000278

080018e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_GetTick+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000278 	.word	0x20000278

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff fff0 	bl	80018e0 <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffe0 	bl	80018e0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000070 	.word	0x20000070

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4906      	ldr	r1, [pc, #24]	; (80019d4 <__NVIC_EnableIRQ+0x34>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	; (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f7ff ff90 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff2d 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff42 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff90 	bl	8001a2c <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5f 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff35 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffa2 	bl	8001a90 <SysTick_Config>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d008      	beq.n	8001b7e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2204      	movs	r2, #4
 8001b70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e020      	b.n	8001bc0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 020e 	bic.w	r2, r2, #14
 8001b8c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d005      	beq.n	8001bee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2204      	movs	r2, #4
 8001be6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e051      	b.n	8001c92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 020e 	bic.w	r2, r2, #14
 8001bfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <HAL_DMA_Abort_IT+0xd0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d029      	beq.n	8001c6c <HAL_DMA_Abort_IT+0xa0>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a20      	ldr	r2, [pc, #128]	; (8001ca0 <HAL_DMA_Abort_IT+0xd4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d022      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x9c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <HAL_DMA_Abort_IT+0xd8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d01a      	beq.n	8001c62 <HAL_DMA_Abort_IT+0x96>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_DMA_Abort_IT+0xdc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d012      	beq.n	8001c5c <HAL_DMA_Abort_IT+0x90>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_DMA_Abort_IT+0xe0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00a      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x8a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1a      	ldr	r2, [pc, #104]	; (8001cb0 <HAL_DMA_Abort_IT+0xe4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d102      	bne.n	8001c50 <HAL_DMA_Abort_IT+0x84>
 8001c4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c4e:	e00e      	b.n	8001c6e <HAL_DMA_Abort_IT+0xa2>
 8001c50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c54:	e00b      	b.n	8001c6e <HAL_DMA_Abort_IT+0xa2>
 8001c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c5a:	e008      	b.n	8001c6e <HAL_DMA_Abort_IT+0xa2>
 8001c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c60:	e005      	b.n	8001c6e <HAL_DMA_Abort_IT+0xa2>
 8001c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c66:	e002      	b.n	8001c6e <HAL_DMA_Abort_IT+0xa2>
 8001c68:	2310      	movs	r3, #16
 8001c6a:	e000      	b.n	8001c6e <HAL_DMA_Abort_IT+0xa2>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <HAL_DMA_Abort_IT+0xe8>)
 8001c70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
    } 
  }
  return status;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020008 	.word	0x40020008
 8001ca0:	4002001c 	.word	0x4002001c
 8001ca4:	40020030 	.word	0x40020030
 8001ca8:	40020044 	.word	0x40020044
 8001cac:	40020058 	.word	0x40020058
 8001cb0:	4002006c 	.word	0x4002006c
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b08b      	sub	sp, #44	; 0x2c
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cca:	e169      	b.n	8001fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f040 8158 	bne.w	8001f9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4a9a      	ldr	r2, [pc, #616]	; (8001f58 <HAL_GPIO_Init+0x2a0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d05e      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a98      	ldr	r2, [pc, #608]	; (8001f58 <HAL_GPIO_Init+0x2a0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d875      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001cfa:	4a98      	ldr	r2, [pc, #608]	; (8001f5c <HAL_GPIO_Init+0x2a4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d058      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001d00:	4a96      	ldr	r2, [pc, #600]	; (8001f5c <HAL_GPIO_Init+0x2a4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d86f      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d06:	4a96      	ldr	r2, [pc, #600]	; (8001f60 <HAL_GPIO_Init+0x2a8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d052      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001d0c:	4a94      	ldr	r2, [pc, #592]	; (8001f60 <HAL_GPIO_Init+0x2a8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d869      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d12:	4a94      	ldr	r2, [pc, #592]	; (8001f64 <HAL_GPIO_Init+0x2ac>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d04c      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001d18:	4a92      	ldr	r2, [pc, #584]	; (8001f64 <HAL_GPIO_Init+0x2ac>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d863      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d1e:	4a92      	ldr	r2, [pc, #584]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d046      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
 8001d24:	4a90      	ldr	r2, [pc, #576]	; (8001f68 <HAL_GPIO_Init+0x2b0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d85d      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d2a:	2b12      	cmp	r3, #18
 8001d2c:	d82a      	bhi.n	8001d84 <HAL_GPIO_Init+0xcc>
 8001d2e:	2b12      	cmp	r3, #18
 8001d30:	d859      	bhi.n	8001de6 <HAL_GPIO_Init+0x12e>
 8001d32:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <HAL_GPIO_Init+0x80>)
 8001d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d38:	08001db3 	.word	0x08001db3
 8001d3c:	08001d8d 	.word	0x08001d8d
 8001d40:	08001d9f 	.word	0x08001d9f
 8001d44:	08001de1 	.word	0x08001de1
 8001d48:	08001de7 	.word	0x08001de7
 8001d4c:	08001de7 	.word	0x08001de7
 8001d50:	08001de7 	.word	0x08001de7
 8001d54:	08001de7 	.word	0x08001de7
 8001d58:	08001de7 	.word	0x08001de7
 8001d5c:	08001de7 	.word	0x08001de7
 8001d60:	08001de7 	.word	0x08001de7
 8001d64:	08001de7 	.word	0x08001de7
 8001d68:	08001de7 	.word	0x08001de7
 8001d6c:	08001de7 	.word	0x08001de7
 8001d70:	08001de7 	.word	0x08001de7
 8001d74:	08001de7 	.word	0x08001de7
 8001d78:	08001de7 	.word	0x08001de7
 8001d7c:	08001d95 	.word	0x08001d95
 8001d80:	08001da9 	.word	0x08001da9
 8001d84:	4a79      	ldr	r2, [pc, #484]	; (8001f6c <HAL_GPIO_Init+0x2b4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d8a:	e02c      	b.n	8001de6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	623b      	str	r3, [r7, #32]
          break;
 8001d92:	e029      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e024      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	3308      	adds	r3, #8
 8001da4:	623b      	str	r3, [r7, #32]
          break;
 8001da6:	e01f      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	330c      	adds	r3, #12
 8001dae:	623b      	str	r3, [r7, #32]
          break;
 8001db0:	e01a      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dba:	2304      	movs	r3, #4
 8001dbc:	623b      	str	r3, [r7, #32]
          break;
 8001dbe:	e013      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	611a      	str	r2, [r3, #16]
          break;
 8001dd2:	e009      	b.n	8001de8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	615a      	str	r2, [r3, #20]
          break;
 8001dde:	e003      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
          break;
 8001de4:	e000      	b.n	8001de8 <HAL_GPIO_Init+0x130>
          break;
 8001de6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2bff      	cmp	r3, #255	; 0xff
 8001dec:	d801      	bhi.n	8001df2 <HAL_GPIO_Init+0x13a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	e001      	b.n	8001df6 <HAL_GPIO_Init+0x13e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3304      	adds	r3, #4
 8001df6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2bff      	cmp	r3, #255	; 0xff
 8001dfc:	d802      	bhi.n	8001e04 <HAL_GPIO_Init+0x14c>
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	e002      	b.n	8001e0a <HAL_GPIO_Init+0x152>
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	3b08      	subs	r3, #8
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	210f      	movs	r1, #15
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	6a39      	ldr	r1, [r7, #32]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	431a      	orrs	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80b1 	beq.w	8001f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e38:	4b4d      	ldr	r3, [pc, #308]	; (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a4c      	ldr	r2, [pc, #304]	; (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e50:	4a48      	ldr	r2, [pc, #288]	; (8001f74 <HAL_GPIO_Init+0x2bc>)
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	3302      	adds	r3, #2
 8001e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a40      	ldr	r2, [pc, #256]	; (8001f78 <HAL_GPIO_Init+0x2c0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <HAL_GPIO_Init+0x1ec>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a3f      	ldr	r2, [pc, #252]	; (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00d      	beq.n	8001ea0 <HAL_GPIO_Init+0x1e8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a3e      	ldr	r2, [pc, #248]	; (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <HAL_GPIO_Init+0x1e4>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a3d      	ldr	r2, [pc, #244]	; (8001f84 <HAL_GPIO_Init+0x2cc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d101      	bne.n	8001e98 <HAL_GPIO_Init+0x1e0>
 8001e94:	2303      	movs	r3, #3
 8001e96:	e006      	b.n	8001ea6 <HAL_GPIO_Init+0x1ee>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	e004      	b.n	8001ea6 <HAL_GPIO_Init+0x1ee>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e002      	b.n	8001ea6 <HAL_GPIO_Init+0x1ee>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_GPIO_Init+0x1ee>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea8:	f002 0203 	and.w	r2, r2, #3
 8001eac:	0092      	lsls	r2, r2, #2
 8001eae:	4093      	lsls	r3, r2
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eb6:	492f      	ldr	r1, [pc, #188]	; (8001f74 <HAL_GPIO_Init+0x2bc>)
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	492c      	ldr	r1, [pc, #176]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ede:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4928      	ldr	r1, [pc, #160]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4922      	ldr	r1, [pc, #136]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	491e      	ldr	r1, [pc, #120]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	4918      	ldr	r1, [pc, #96]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4914      	ldr	r1, [pc, #80]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d021      	beq.n	8001f8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	490e      	ldr	r1, [pc, #56]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60cb      	str	r3, [r1, #12]
 8001f54:	e021      	b.n	8001f9a <HAL_GPIO_Init+0x2e2>
 8001f56:	bf00      	nop
 8001f58:	10320000 	.word	0x10320000
 8001f5c:	10310000 	.word	0x10310000
 8001f60:	10220000 	.word	0x10220000
 8001f64:	10210000 	.word	0x10210000
 8001f68:	10120000 	.word	0x10120000
 8001f6c:	10110000 	.word	0x10110000
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40010800 	.word	0x40010800
 8001f7c:	40010c00 	.word	0x40010c00
 8001f80:	40011000 	.word	0x40011000
 8001f84:	40011400 	.word	0x40011400
 8001f88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	4909      	ldr	r1, [pc, #36]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f47f ae8e 	bne.w	8001ccc <HAL_GPIO_Init+0x14>
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	372c      	adds	r7, #44	; 0x2c
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	40010400 	.word	0x40010400

08001fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	e001      	b.n	8001fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	807b      	strh	r3, [r7, #2]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffe:	787b      	ldrb	r3, [r7, #1]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002004:	887a      	ldrh	r2, [r7, #2]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800200a:	e003      	b.n	8002014 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	041a      	lsls	r2, r3, #16
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	611a      	str	r2, [r3, #16]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
	...

08002020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d006      	beq.n	8002044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f806 	bl	8002050 <HAL_GPIO_EXTI_Callback>
  }
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40010400 	.word	0x40010400

08002050 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e272      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8087 	beq.w	8002192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002084:	4b92      	ldr	r3, [pc, #584]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b04      	cmp	r3, #4
 800208e:	d00c      	beq.n	80020aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002090:	4b8f      	ldr	r3, [pc, #572]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d112      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5e>
 800209c:	4b8c      	ldr	r3, [pc, #560]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	d10b      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020aa:	4b89      	ldr	r3, [pc, #548]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d06c      	beq.n	8002190 <HAL_RCC_OscConfig+0x12c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d168      	bne.n	8002190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e24c      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x76>
 80020cc:	4b80      	ldr	r3, [pc, #512]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a7f      	ldr	r2, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	e02e      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x98>
 80020e2:	4b7b      	ldr	r3, [pc, #492]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a7a      	ldr	r2, [pc, #488]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b78      	ldr	r3, [pc, #480]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a77      	ldr	r2, [pc, #476]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e01d      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0xbc>
 8002106:	4b72      	ldr	r3, [pc, #456]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a71      	ldr	r2, [pc, #452]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b6f      	ldr	r3, [pc, #444]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6e      	ldr	r2, [pc, #440]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 8002120:	4b6b      	ldr	r3, [pc, #428]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a6a      	ldr	r2, [pc, #424]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a67      	ldr	r2, [pc, #412]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fbce 	bl	80018e0 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff fbca 	bl	80018e0 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e200      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0xe4>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff fbba 	bl	80018e0 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff fbb6 	bl	80018e0 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1ec      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x10c>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d063      	beq.n	8002266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800219e:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021aa:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d11c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x18c>
 80021b6:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_RCC_OscConfig+0x176>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e1c0      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4939      	ldr	r1, [pc, #228]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	e03a      	b.n	8002266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fb6f 	bl	80018e0 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002206:	f7ff fb6b 	bl	80018e0 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1a1      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4927      	ldr	r1, [pc, #156]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fb4e 	bl	80018e0 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002248:	f7ff fb4a 	bl	80018e0 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e180      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d03a      	beq.n	80022e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d019      	beq.n	80022ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7ff fb2e 	bl	80018e0 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002288:	f7ff fb2a 	bl	80018e0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e160      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f000 fad8 	bl	800285c <RCC_Delay>
 80022ac:	e01c      	b.n	80022e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b4:	f7ff fb14 	bl	80018e0 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ba:	e00f      	b.n	80022dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022bc:	f7ff fb10 	bl	80018e0 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d908      	bls.n	80022dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e146      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	42420000 	.word	0x42420000
 80022d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	4b92      	ldr	r3, [pc, #584]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1e9      	bne.n	80022bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a6 	beq.w	8002442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fa:	4b8b      	ldr	r3, [pc, #556]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10d      	bne.n	8002322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b88      	ldr	r3, [pc, #544]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4a87      	ldr	r2, [pc, #540]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	61d3      	str	r3, [r2, #28]
 8002312:	4b85      	ldr	r3, [pc, #532]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231e:	2301      	movs	r3, #1
 8002320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b82      	ldr	r3, [pc, #520]	; (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232e:	4b7f      	ldr	r3, [pc, #508]	; (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7e      	ldr	r2, [pc, #504]	; (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233a:	f7ff fad1 	bl	80018e0 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002342:	f7ff facd 	bl	80018e0 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	; 0x64
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e103      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	4b75      	ldr	r3, [pc, #468]	; (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x312>
 8002368:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a6e      	ldr	r2, [pc, #440]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e02d      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x334>
 800237e:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a69      	ldr	r2, [pc, #420]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a66      	ldr	r2, [pc, #408]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	6213      	str	r3, [r2, #32]
 8002396:	e01c      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d10c      	bne.n	80023ba <HAL_RCC_OscConfig+0x356>
 80023a0:	4b61      	ldr	r3, [pc, #388]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a60      	ldr	r2, [pc, #384]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	4b5e      	ldr	r3, [pc, #376]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a5d      	ldr	r2, [pc, #372]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	e00b      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 80023ba:	4b5b      	ldr	r3, [pc, #364]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a5a      	ldr	r2, [pc, #360]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b58      	ldr	r3, [pc, #352]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a57      	ldr	r2, [pc, #348]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d015      	beq.n	8002406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023da:	f7ff fa81 	bl	80018e0 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7ff fa7d 	bl	80018e0 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0b1      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	4b4b      	ldr	r3, [pc, #300]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ee      	beq.n	80023e2 <HAL_RCC_OscConfig+0x37e>
 8002404:	e014      	b.n	8002430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7ff fa6b 	bl	80018e0 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7ff fa67 	bl	80018e0 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e09b      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	4b40      	ldr	r3, [pc, #256]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ee      	bne.n	800240e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d105      	bne.n	8002442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002436:	4b3c      	ldr	r3, [pc, #240]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4a3b      	ldr	r2, [pc, #236]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8087 	beq.w	800255a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244c:	4b36      	ldr	r3, [pc, #216]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b08      	cmp	r3, #8
 8002456:	d061      	beq.n	800251c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d146      	bne.n	80024ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002460:	4b33      	ldr	r3, [pc, #204]	; (8002530 <HAL_RCC_OscConfig+0x4cc>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7ff fa3b 	bl	80018e0 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246e:	f7ff fa37 	bl	80018e0 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e06d      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002480:	4b29      	ldr	r3, [pc, #164]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d108      	bne.n	80024a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4921      	ldr	r1, [pc, #132]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a8:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a19      	ldr	r1, [r3, #32]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	430b      	orrs	r3, r1
 80024ba:	491b      	ldr	r1, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_RCC_OscConfig+0x4cc>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7ff fa0b 	bl	80018e0 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ce:	f7ff fa07 	bl	80018e0 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e03d      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x46a>
 80024ec:	e035      	b.n	800255a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_RCC_OscConfig+0x4cc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff f9f4 	bl	80018e0 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7ff f9f0 	bl	80018e0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e026      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x498>
 800251a:	e01e      	b.n	800255a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d107      	bne.n	8002534 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e019      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
 8002530:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_OscConfig+0x500>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	429a      	cmp	r2, r3
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0d0      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d910      	bls.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0207 	bic.w	r2, r3, #7
 8002592:	4965      	ldr	r1, [pc, #404]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b63      	ldr	r3, [pc, #396]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0b8      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c4:	4b59      	ldr	r3, [pc, #356]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025dc:	4b53      	ldr	r3, [pc, #332]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a52      	ldr	r2, [pc, #328]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	494d      	ldr	r1, [pc, #308]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d040      	beq.n	8002688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d115      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e07f      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002626:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e073      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	4b3d      	ldr	r3, [pc, #244]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e06b      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002646:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f023 0203 	bic.w	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4936      	ldr	r1, [pc, #216]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002658:	f7ff f942 	bl	80018e0 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	e00a      	b.n	8002676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002660:	f7ff f93e 	bl	80018e0 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	; 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e053      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 020c 	and.w	r2, r3, #12
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	429a      	cmp	r2, r3
 8002686:	d1eb      	bne.n	8002660 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d210      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 0207 	bic.w	r2, r3, #7
 800269e:	4922      	ldr	r1, [pc, #136]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e032      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4916      	ldr	r1, [pc, #88]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	490e      	ldr	r1, [pc, #56]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026f6:	f000 f821 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	490a      	ldr	r1, [pc, #40]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	5ccb      	ldrb	r3, [r1, r3]
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <HAL_RCC_ClockConfig+0x1cc>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1d0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f8a0 	bl	800185c <HAL_InitTick>

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
 8002730:	08004b04 	.word	0x08004b04
 8002734:	20000060 	.word	0x20000060
 8002738:	2000006c 	.word	0x2000006c

0800273c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	b490      	push	{r4, r7}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002742:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002744:	1d3c      	adds	r4, r7, #4
 8002746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800274c:	f240 2301 	movw	r3, #513	; 0x201
 8002750:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b04      	cmp	r3, #4
 8002774:	d002      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x40>
 8002776:	2b08      	cmp	r3, #8
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x46>
 800277a:	e02b      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800277c:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800277e:	623b      	str	r3, [r7, #32]
      break;
 8002780:	e02b      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	0c9b      	lsrs	r3, r3, #18
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	3328      	adds	r3, #40	; 0x28
 800278c:	443b      	add	r3, r7
 800278e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002792:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d012      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	0c5b      	lsrs	r3, r3, #17
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	3328      	adds	r3, #40	; 0x28
 80027aa:	443b      	add	r3, r7
 80027ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027b6:	fb03 f202 	mul.w	r2, r3, r2
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	e004      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	623b      	str	r3, [r7, #32]
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027d6:	623b      	str	r3, [r7, #32]
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	6a3b      	ldr	r3, [r7, #32]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3728      	adds	r7, #40	; 0x28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc90      	pop	{r4, r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	08004af4 	.word	0x08004af4
 80027ec:	40021000 	.word	0x40021000
 80027f0:	007a1200 	.word	0x007a1200
 80027f4:	003d0900 	.word	0x003d0900

080027f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <HAL_RCC_GetHCLKFreq+0x10>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	20000060 	.word	0x20000060

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff2 	bl	80027f8 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	08004b14 	.word	0x08004b14

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002838:	f7ff ffde 	bl	80027f8 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0adb      	lsrs	r3, r3, #11
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	08004b14 	.word	0x08004b14

0800285c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <RCC_Delay+0x34>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <RCC_Delay+0x38>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002878:	bf00      	nop
  }
  while (Delay --);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1e5a      	subs	r2, r3, #1
 800287e:	60fa      	str	r2, [r7, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f9      	bne.n	8002878 <RCC_Delay+0x1c>
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	20000060 	.word	0x20000060
 8002894:	10624dd3 	.word	0x10624dd3

08002898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e041      	b.n	800292e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fd5c 	bl	800137c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f000 fc28 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d001      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e03a      	b.n	80029c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <HAL_TIM_Base_Start_IT+0x98>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00e      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0x58>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297a:	d009      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0x58>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d004      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0x58>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d010      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b2:	e007      	b.n	80029c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40000400 	.word	0x40000400
 80029d8:	40000800 	.word	0x40000800

080029dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e041      	b.n	8002a72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f839 	bl	8002a7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f000 fb86 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <HAL_TIM_PWM_Start+0x24>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	bf14      	ite	ne
 8002aa8:	2301      	movne	r3, #1
 8002aaa:	2300      	moveq	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e022      	b.n	8002af6 <HAL_TIM_PWM_Start+0x6a>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d109      	bne.n	8002aca <HAL_TIM_PWM_Start+0x3e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	bf14      	ite	ne
 8002ac2:	2301      	movne	r3, #1
 8002ac4:	2300      	moveq	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	e015      	b.n	8002af6 <HAL_TIM_PWM_Start+0x6a>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d109      	bne.n	8002ae4 <HAL_TIM_PWM_Start+0x58>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e008      	b.n	8002af6 <HAL_TIM_PWM_Start+0x6a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	bf14      	ite	ne
 8002af0:	2301      	movne	r3, #1
 8002af2:	2300      	moveq	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e05e      	b.n	8002bbc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d104      	bne.n	8002b0e <HAL_TIM_PWM_Start+0x82>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b0c:	e013      	b.n	8002b36 <HAL_TIM_PWM_Start+0xaa>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d104      	bne.n	8002b1e <HAL_TIM_PWM_Start+0x92>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b1c:	e00b      	b.n	8002b36 <HAL_TIM_PWM_Start+0xaa>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d104      	bne.n	8002b2e <HAL_TIM_PWM_Start+0xa2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b2c:	e003      	b.n	8002b36 <HAL_TIM_PWM_Start+0xaa>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fd74 	bl	800362c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <HAL_TIM_PWM_Start+0x138>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d107      	bne.n	8002b5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a18      	ldr	r2, [pc, #96]	; (8002bc4 <HAL_TIM_PWM_Start+0x138>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_TIM_PWM_Start+0xfa>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b70:	d009      	beq.n	8002b86 <HAL_TIM_PWM_Start+0xfa>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a14      	ldr	r2, [pc, #80]	; (8002bc8 <HAL_TIM_PWM_Start+0x13c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_TIM_PWM_Start+0xfa>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <HAL_TIM_PWM_Start+0x140>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d111      	bne.n	8002baa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d010      	beq.n	8002bba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba8:	e007      	b.n	8002bba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40000800 	.word	0x40000800

08002bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d122      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d11b      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0202 	mvn.w	r2, #2
 8002bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa6f 	bl	80030f6 <HAL_TIM_IC_CaptureCallback>
 8002c18:	e005      	b.n	8002c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fa62 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fa71 	bl	8003108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d122      	bne.n	8002c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d11b      	bne.n	8002c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0204 	mvn.w	r2, #4
 8002c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa45 	bl	80030f6 <HAL_TIM_IC_CaptureCallback>
 8002c6c:	e005      	b.n	8002c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa38 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fa47 	bl	8003108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d122      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d11b      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0208 	mvn.w	r2, #8
 8002ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2204      	movs	r2, #4
 8002caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fa1b 	bl	80030f6 <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e005      	b.n	8002cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fa0e 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fa1d 	bl	8003108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d122      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d11b      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0210 	mvn.w	r2, #16
 8002cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f9f1 	bl	80030f6 <HAL_TIM_IC_CaptureCallback>
 8002d14:	e005      	b.n	8002d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f9e4 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f9f3 	bl	8003108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d10e      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0201 	mvn.w	r2, #1
 8002d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fe faca 	bl	80012e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5e:	2b80      	cmp	r3, #128	; 0x80
 8002d60:	d10e      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6c:	2b80      	cmp	r3, #128	; 0x80
 8002d6e:	d107      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fce1 	bl	8003742 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	d10e      	bne.n	8002dac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d98:	2b40      	cmp	r3, #64	; 0x40
 8002d9a:	d107      	bne.n	8002dac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f9b7 	bl	800311a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d10e      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d107      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0220 	mvn.w	r2, #32
 8002dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fcac 	bl	8003730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e0ac      	b.n	8002f54 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	f200 809f 	bhi.w	8002f48 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e0a:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e45 	.word	0x08002e45
 8002e14:	08002f49 	.word	0x08002f49
 8002e18:	08002f49 	.word	0x08002f49
 8002e1c:	08002f49 	.word	0x08002f49
 8002e20:	08002e85 	.word	0x08002e85
 8002e24:	08002f49 	.word	0x08002f49
 8002e28:	08002f49 	.word	0x08002f49
 8002e2c:	08002f49 	.word	0x08002f49
 8002e30:	08002ec7 	.word	0x08002ec7
 8002e34:	08002f49 	.word	0x08002f49
 8002e38:	08002f49 	.word	0x08002f49
 8002e3c:	08002f49 	.word	0x08002f49
 8002e40:	08002f07 	.word	0x08002f07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f9d0 	bl	80031f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0208 	orr.w	r2, r2, #8
 8002e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0204 	bic.w	r2, r2, #4
 8002e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6999      	ldr	r1, [r3, #24]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	619a      	str	r2, [r3, #24]
      break;
 8002e82:	e062      	b.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fa16 	bl	80032bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6999      	ldr	r1, [r3, #24]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	021a      	lsls	r2, r3, #8
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	619a      	str	r2, [r3, #24]
      break;
 8002ec4:	e041      	b.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fa5f 	bl	8003390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0208 	orr.w	r2, r2, #8
 8002ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0204 	bic.w	r2, r2, #4
 8002ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69d9      	ldr	r1, [r3, #28]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	61da      	str	r2, [r3, #28]
      break;
 8002f04:	e021      	b.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 faa9 	bl	8003464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69d9      	ldr	r1, [r3, #28]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	021a      	lsls	r2, r3, #8
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	61da      	str	r2, [r3, #28]
      break;
 8002f46:	e000      	b.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_TIM_ConfigClockSource+0x18>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e0b3      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x180>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fac:	d03e      	beq.n	800302c <HAL_TIM_ConfigClockSource+0xd0>
 8002fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb2:	f200 8087 	bhi.w	80030c4 <HAL_TIM_ConfigClockSource+0x168>
 8002fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fba:	f000 8085 	beq.w	80030c8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc2:	d87f      	bhi.n	80030c4 <HAL_TIM_ConfigClockSource+0x168>
 8002fc4:	2b70      	cmp	r3, #112	; 0x70
 8002fc6:	d01a      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0xa2>
 8002fc8:	2b70      	cmp	r3, #112	; 0x70
 8002fca:	d87b      	bhi.n	80030c4 <HAL_TIM_ConfigClockSource+0x168>
 8002fcc:	2b60      	cmp	r3, #96	; 0x60
 8002fce:	d050      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x116>
 8002fd0:	2b60      	cmp	r3, #96	; 0x60
 8002fd2:	d877      	bhi.n	80030c4 <HAL_TIM_ConfigClockSource+0x168>
 8002fd4:	2b50      	cmp	r3, #80	; 0x50
 8002fd6:	d03c      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0xf6>
 8002fd8:	2b50      	cmp	r3, #80	; 0x50
 8002fda:	d873      	bhi.n	80030c4 <HAL_TIM_ConfigClockSource+0x168>
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d058      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x136>
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d86f      	bhi.n	80030c4 <HAL_TIM_ConfigClockSource+0x168>
 8002fe4:	2b30      	cmp	r3, #48	; 0x30
 8002fe6:	d064      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0x156>
 8002fe8:	2b30      	cmp	r3, #48	; 0x30
 8002fea:	d86b      	bhi.n	80030c4 <HAL_TIM_ConfigClockSource+0x168>
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d060      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0x156>
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d867      	bhi.n	80030c4 <HAL_TIM_ConfigClockSource+0x168>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d05c      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0x156>
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d05a      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ffc:	e062      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6899      	ldr	r1, [r3, #8]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f000 faee 	bl	80035ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003020:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	609a      	str	r2, [r3, #8]
      break;
 800302a:	e04e      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6899      	ldr	r1, [r3, #8]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f000 fad7 	bl	80035ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800304e:	609a      	str	r2, [r3, #8]
      break;
 8003050:	e03b      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6859      	ldr	r1, [r3, #4]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	461a      	mov	r2, r3
 8003060:	f000 fa4e 	bl	8003500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2150      	movs	r1, #80	; 0x50
 800306a:	4618      	mov	r0, r3
 800306c:	f000 faa5 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 8003070:	e02b      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6859      	ldr	r1, [r3, #4]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	461a      	mov	r2, r3
 8003080:	f000 fa6c 	bl	800355c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2160      	movs	r1, #96	; 0x60
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fa95 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 8003090:	e01b      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	461a      	mov	r2, r3
 80030a0:	f000 fa2e 	bl	8003500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2140      	movs	r1, #64	; 0x40
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fa85 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 80030b0:	e00b      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4619      	mov	r1, r3
 80030bc:	4610      	mov	r0, r2
 80030be:	f000 fa7c 	bl	80035ba <TIM_ITRx_SetConfig>
        break;
 80030c2:	e002      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030c4:	bf00      	nop
 80030c6:	e000      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a29      	ldr	r2, [pc, #164]	; (80031e4 <TIM_Base_SetConfig+0xb8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00b      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314a:	d007      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a26      	ldr	r2, [pc, #152]	; (80031e8 <TIM_Base_SetConfig+0xbc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a25      	ldr	r2, [pc, #148]	; (80031ec <TIM_Base_SetConfig+0xc0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d108      	bne.n	800316e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <TIM_Base_SetConfig+0xb8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d007      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <TIM_Base_SetConfig+0xbc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a18      	ldr	r2, [pc, #96]	; (80031ec <TIM_Base_SetConfig+0xc0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <TIM_Base_SetConfig+0xb8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d103      	bne.n	80031d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	615a      	str	r2, [r3, #20]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800

080031f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	f023 0201 	bic.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0303 	bic.w	r3, r3, #3
 8003226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f023 0302 	bic.w	r3, r3, #2
 8003238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <TIM_OC1_SetConfig+0xc8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d10c      	bne.n	8003266 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0308 	bic.w	r3, r3, #8
 8003252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f023 0304 	bic.w	r3, r3, #4
 8003264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <TIM_OC1_SetConfig+0xc8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d111      	bne.n	8003292 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800327c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	621a      	str	r2, [r3, #32]
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40012c00 	.word	0x40012c00

080032bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0210 	bic.w	r2, r3, #16
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0320 	bic.w	r3, r3, #32
 8003306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a1d      	ldr	r2, [pc, #116]	; (800338c <TIM_OC2_SetConfig+0xd0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d10d      	bne.n	8003338 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003336:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a14      	ldr	r2, [pc, #80]	; (800338c <TIM_OC2_SetConfig+0xd0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d113      	bne.n	8003368 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800334e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	621a      	str	r2, [r3, #32]
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00

08003390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <TIM_OC3_SetConfig+0xd0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10d      	bne.n	800340a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <TIM_OC3_SetConfig+0xd0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d113      	bne.n	800343a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	621a      	str	r2, [r3, #32]
}
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40012c00 	.word	0x40012c00

08003464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	031b      	lsls	r3, r3, #12
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a0f      	ldr	r2, [pc, #60]	; (80034fc <TIM_OC4_SetConfig+0x98>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d109      	bne.n	80034d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40012c00 	.word	0x40012c00

08003500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0201 	bic.w	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800352a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f023 030a 	bic.w	r3, r3, #10
 800353c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f023 0210 	bic.w	r2, r3, #16
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003586:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	031b      	lsls	r3, r3, #12
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003598:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f043 0307 	orr.w	r3, r3, #7
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	609a      	str	r2, [r3, #8]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b087      	sub	sp, #28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003608:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	021a      	lsls	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	431a      	orrs	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4313      	orrs	r3, r2
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	609a      	str	r2, [r3, #8]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2201      	movs	r2, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1a      	ldr	r2, [r3, #32]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	43db      	mvns	r3, r3
 800364e:	401a      	ands	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	fa01 f303 	lsl.w	r3, r1, r3
 8003664:	431a      	orrs	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e046      	b.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a16      	ldr	r2, [pc, #88]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00e      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d8:	d009      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a12      	ldr	r2, [pc, #72]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10c      	bne.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800

08003730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e03f      	b.n	80037e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fe70 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	; 0x24
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fc25 	bl	8003fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b08a      	sub	sp, #40	; 0x28
 80037f2:	af02      	add	r7, sp, #8
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	d17c      	bne.n	8003908 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_UART_Transmit+0x2c>
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e075      	b.n	800390a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_UART_Transmit+0x3e>
 8003828:	2302      	movs	r3, #2
 800382a:	e06e      	b.n	800390a <HAL_UART_Transmit+0x11c>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2221      	movs	r2, #33	; 0x21
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003842:	f7fe f84d 	bl	80018e0 <HAL_GetTick>
 8003846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385c:	d108      	bne.n	8003870 <HAL_UART_Transmit+0x82>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d104      	bne.n	8003870 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	e003      	b.n	8003878 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003874:	2300      	movs	r3, #0
 8003876:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003880:	e02a      	b.n	80038d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2200      	movs	r2, #0
 800388a:	2180      	movs	r1, #128	; 0x80
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 fa11 	bl	8003cb4 <UART_WaitOnFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e036      	b.n	800390a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10b      	bne.n	80038ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	3302      	adds	r3, #2
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	e007      	b.n	80038ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	3301      	adds	r3, #1
 80038c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1cf      	bne.n	8003882 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2140      	movs	r1, #64	; 0x40
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f9e1 	bl	8003cb4 <UART_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e006      	b.n	800390a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003934:	2300      	movs	r3, #0
 8003936:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10d      	bne.n	8003966 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_UART_IRQHandler+0x52>
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa99 	bl	8003e96 <UART_Receive_IT>
      return;
 8003964:	e17b      	b.n	8003c5e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80b1 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x1bc>
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <HAL_UART_IRQHandler+0x70>
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80a6 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_UART_IRQHandler+0x90>
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f043 0201 	orr.w	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_UART_IRQHandler+0xb0>
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f043 0202 	orr.w	r2, r3, #2
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_UART_IRQHandler+0xd0>
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f043 0204 	orr.w	r2, r3, #4
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00f      	beq.n	8003a0e <HAL_UART_IRQHandler+0xfa>
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d104      	bne.n	8003a02 <HAL_UART_IRQHandler+0xee>
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f043 0208 	orr.w	r2, r3, #8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 811e 	beq.w	8003c54 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_UART_IRQHandler+0x11e>
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fa32 	bl	8003e96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <HAL_UART_IRQHandler+0x146>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d031      	beq.n	8003abe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f974 	bl	8003d48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d023      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d013      	beq.n	8003aae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	4a76      	ldr	r2, [pc, #472]	; (8003c64 <HAL_UART_IRQHandler+0x350>)
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe f89a 	bl	8001bcc <HAL_DMA_Abort_IT>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	e00e      	b.n	8003acc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f8ec 	bl	8003c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab4:	e00a      	b.n	8003acc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f8e8 	bl	8003c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003abc:	e006      	b.n	8003acc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f8e4 	bl	8003c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003aca:	e0c3      	b.n	8003c54 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	bf00      	nop
    return;
 8003ace:	e0c1      	b.n	8003c54 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	f040 80a1 	bne.w	8003c1c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 809b 	beq.w	8003c1c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8095 	beq.w	8003c1c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d04e      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b20:	8a3b      	ldrh	r3, [r7, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8098 	beq.w	8003c58 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b2c:	8a3a      	ldrh	r2, [r7, #16]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	f080 8092 	bcs.w	8003c58 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8a3a      	ldrh	r2, [r7, #16]
 8003b38:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d02b      	beq.n	8003b9c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b52:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b72:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0210 	bic.w	r2, r2, #16
 8003b90:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd ffdd 	bl	8001b56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f876 	bl	8003c9e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bb2:	e051      	b.n	8003c58 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d047      	beq.n	8003c5c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003bcc:	8a7b      	ldrh	r3, [r7, #18]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d044      	beq.n	8003c5c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003be0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0210 	bic.w	r2, r2, #16
 8003c0e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c10:	8a7b      	ldrh	r3, [r7, #18]
 8003c12:	4619      	mov	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f842 	bl	8003c9e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c1a:	e01f      	b.n	8003c5c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_UART_IRQHandler+0x324>
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f8c9 	bl	8003dc8 <UART_Transmit_IT>
    return;
 8003c36:	e012      	b.n	8003c5e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <HAL_UART_IRQHandler+0x34a>
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f90a 	bl	8003e66 <UART_EndTransmit_IT>
    return;
 8003c52:	e004      	b.n	8003c5e <HAL_UART_IRQHandler+0x34a>
    return;
 8003c54:	bf00      	nop
 8003c56:	e002      	b.n	8003c5e <HAL_UART_IRQHandler+0x34a>
      return;
 8003c58:	bf00      	nop
 8003c5a:	e000      	b.n	8003c5e <HAL_UART_IRQHandler+0x34a>
      return;
 8003c5c:	bf00      	nop
  }
}
 8003c5e:	3728      	adds	r7, #40	; 0x28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	08003da1 	.word	0x08003da1

08003c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc4:	e02c      	b.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d028      	beq.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cd4:	f7fd fe04 	bl	80018e0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d21d      	bcs.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cf2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e00f      	b.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d0c3      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0201 	bic.w	r2, r2, #1
 8003d6e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d107      	bne.n	8003d88 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0210 	bic.w	r2, r2, #16
 8003d86:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff ff66 	bl	8003c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b21      	cmp	r3, #33	; 0x21
 8003dda:	d13e      	bne.n	8003e5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de4:	d114      	bne.n	8003e10 <UART_Transmit_IT+0x48>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d110      	bne.n	8003e10 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	1c9a      	adds	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	621a      	str	r2, [r3, #32]
 8003e0e:	e008      	b.n	8003e22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	1c59      	adds	r1, r3, #1
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6211      	str	r1, [r2, #32]
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10f      	bne.n	8003e56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e000      	b.n	8003e5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
  }
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff feee 	bl	8003c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b086      	sub	sp, #24
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b22      	cmp	r3, #34	; 0x22
 8003ea8:	f040 8099 	bne.w	8003fde <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb4:	d117      	bne.n	8003ee6 <UART_Receive_IT+0x50>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d113      	bne.n	8003ee6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	1c9a      	adds	r2, r3, #2
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee4:	e026      	b.n	8003f34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef8:	d007      	beq.n	8003f0a <UART_Receive_IT+0x74>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <UART_Receive_IT+0x82>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e008      	b.n	8003f2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4619      	mov	r1, r3
 8003f42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d148      	bne.n	8003fda <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0220 	bic.w	r2, r2, #32
 8003f56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d123      	bne.n	8003fd0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0210 	bic.w	r2, r2, #16
 8003f9c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d10a      	bne.n	8003fc2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff fe68 	bl	8003c9e <HAL_UARTEx_RxEventCallback>
 8003fce:	e002      	b.n	8003fd6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fe52 	bl	8003c7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e002      	b.n	8003fe0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004022:	f023 030c 	bic.w	r3, r3, #12
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	430b      	orrs	r3, r1
 800402e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a2c      	ldr	r2, [pc, #176]	; (80040fc <UART_SetConfig+0x114>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d103      	bne.n	8004058 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004050:	f7fe fbf0 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	e002      	b.n	800405e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004058:	f7fe fbd8 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 800405c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009a      	lsls	r2, r3, #2
 8004068:	441a      	add	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	4a22      	ldr	r2, [pc, #136]	; (8004100 <UART_SetConfig+0x118>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	0119      	lsls	r1, r3, #4
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	009a      	lsls	r2, r3, #2
 8004088:	441a      	add	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	fbb2 f2f3 	udiv	r2, r2, r3
 8004094:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <UART_SetConfig+0x118>)
 8004096:	fba3 0302 	umull	r0, r3, r3, r2
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	2064      	movs	r0, #100	; 0x64
 800409e:	fb00 f303 	mul.w	r3, r0, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	3332      	adds	r3, #50	; 0x32
 80040a8:	4a15      	ldr	r2, [pc, #84]	; (8004100 <UART_SetConfig+0x118>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b4:	4419      	add	r1, r3
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009a      	lsls	r2, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <UART_SetConfig+0x118>)
 80040ce:	fba3 0302 	umull	r0, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2064      	movs	r0, #100	; 0x64
 80040d6:	fb00 f303 	mul.w	r3, r0, r3
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	3332      	adds	r3, #50	; 0x32
 80040e0:	4a07      	ldr	r2, [pc, #28]	; (8004100 <UART_SetConfig+0x118>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	f003 020f 	and.w	r2, r3, #15
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	440a      	add	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40013800 	.word	0x40013800
 8004100:	51eb851f 	.word	0x51eb851f

08004104 <__errno>:
 8004104:	4b01      	ldr	r3, [pc, #4]	; (800410c <__errno+0x8>)
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000074 	.word	0x20000074

08004110 <__libc_init_array>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	2600      	movs	r6, #0
 8004114:	4d0c      	ldr	r5, [pc, #48]	; (8004148 <__libc_init_array+0x38>)
 8004116:	4c0d      	ldr	r4, [pc, #52]	; (800414c <__libc_init_array+0x3c>)
 8004118:	1b64      	subs	r4, r4, r5
 800411a:	10a4      	asrs	r4, r4, #2
 800411c:	42a6      	cmp	r6, r4
 800411e:	d109      	bne.n	8004134 <__libc_init_array+0x24>
 8004120:	f000 fc9c 	bl	8004a5c <_init>
 8004124:	2600      	movs	r6, #0
 8004126:	4d0a      	ldr	r5, [pc, #40]	; (8004150 <__libc_init_array+0x40>)
 8004128:	4c0a      	ldr	r4, [pc, #40]	; (8004154 <__libc_init_array+0x44>)
 800412a:	1b64      	subs	r4, r4, r5
 800412c:	10a4      	asrs	r4, r4, #2
 800412e:	42a6      	cmp	r6, r4
 8004130:	d105      	bne.n	800413e <__libc_init_array+0x2e>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	f855 3b04 	ldr.w	r3, [r5], #4
 8004138:	4798      	blx	r3
 800413a:	3601      	adds	r6, #1
 800413c:	e7ee      	b.n	800411c <__libc_init_array+0xc>
 800413e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004142:	4798      	blx	r3
 8004144:	3601      	adds	r6, #1
 8004146:	e7f2      	b.n	800412e <__libc_init_array+0x1e>
 8004148:	08004b50 	.word	0x08004b50
 800414c:	08004b50 	.word	0x08004b50
 8004150:	08004b50 	.word	0x08004b50
 8004154:	08004b54 	.word	0x08004b54

08004158 <memset>:
 8004158:	4603      	mov	r3, r0
 800415a:	4402      	add	r2, r0
 800415c:	4293      	cmp	r3, r2
 800415e:	d100      	bne.n	8004162 <memset+0xa>
 8004160:	4770      	bx	lr
 8004162:	f803 1b01 	strb.w	r1, [r3], #1
 8004166:	e7f9      	b.n	800415c <memset+0x4>

08004168 <siprintf>:
 8004168:	b40e      	push	{r1, r2, r3}
 800416a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800416e:	b500      	push	{lr}
 8004170:	b09c      	sub	sp, #112	; 0x70
 8004172:	ab1d      	add	r3, sp, #116	; 0x74
 8004174:	9002      	str	r0, [sp, #8]
 8004176:	9006      	str	r0, [sp, #24]
 8004178:	9107      	str	r1, [sp, #28]
 800417a:	9104      	str	r1, [sp, #16]
 800417c:	4808      	ldr	r0, [pc, #32]	; (80041a0 <siprintf+0x38>)
 800417e:	4909      	ldr	r1, [pc, #36]	; (80041a4 <siprintf+0x3c>)
 8004180:	f853 2b04 	ldr.w	r2, [r3], #4
 8004184:	9105      	str	r1, [sp, #20]
 8004186:	6800      	ldr	r0, [r0, #0]
 8004188:	a902      	add	r1, sp, #8
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	f000 f868 	bl	8004260 <_svfiprintf_r>
 8004190:	2200      	movs	r2, #0
 8004192:	9b02      	ldr	r3, [sp, #8]
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	b01c      	add	sp, #112	; 0x70
 8004198:	f85d eb04 	ldr.w	lr, [sp], #4
 800419c:	b003      	add	sp, #12
 800419e:	4770      	bx	lr
 80041a0:	20000074 	.word	0x20000074
 80041a4:	ffff0208 	.word	0xffff0208

080041a8 <__ssputs_r>:
 80041a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ac:	688e      	ldr	r6, [r1, #8]
 80041ae:	4682      	mov	sl, r0
 80041b0:	429e      	cmp	r6, r3
 80041b2:	460c      	mov	r4, r1
 80041b4:	4690      	mov	r8, r2
 80041b6:	461f      	mov	r7, r3
 80041b8:	d838      	bhi.n	800422c <__ssputs_r+0x84>
 80041ba:	898a      	ldrh	r2, [r1, #12]
 80041bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041c0:	d032      	beq.n	8004228 <__ssputs_r+0x80>
 80041c2:	6825      	ldr	r5, [r4, #0]
 80041c4:	6909      	ldr	r1, [r1, #16]
 80041c6:	3301      	adds	r3, #1
 80041c8:	eba5 0901 	sub.w	r9, r5, r1
 80041cc:	6965      	ldr	r5, [r4, #20]
 80041ce:	444b      	add	r3, r9
 80041d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041d8:	106d      	asrs	r5, r5, #1
 80041da:	429d      	cmp	r5, r3
 80041dc:	bf38      	it	cc
 80041de:	461d      	movcc	r5, r3
 80041e0:	0553      	lsls	r3, r2, #21
 80041e2:	d531      	bpl.n	8004248 <__ssputs_r+0xa0>
 80041e4:	4629      	mov	r1, r5
 80041e6:	f000 fb6f 	bl	80048c8 <_malloc_r>
 80041ea:	4606      	mov	r6, r0
 80041ec:	b950      	cbnz	r0, 8004204 <__ssputs_r+0x5c>
 80041ee:	230c      	movs	r3, #12
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	f8ca 3000 	str.w	r3, [sl]
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041fe:	81a3      	strh	r3, [r4, #12]
 8004200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004204:	464a      	mov	r2, r9
 8004206:	6921      	ldr	r1, [r4, #16]
 8004208:	f000 face 	bl	80047a8 <memcpy>
 800420c:	89a3      	ldrh	r3, [r4, #12]
 800420e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004216:	81a3      	strh	r3, [r4, #12]
 8004218:	6126      	str	r6, [r4, #16]
 800421a:	444e      	add	r6, r9
 800421c:	6026      	str	r6, [r4, #0]
 800421e:	463e      	mov	r6, r7
 8004220:	6165      	str	r5, [r4, #20]
 8004222:	eba5 0509 	sub.w	r5, r5, r9
 8004226:	60a5      	str	r5, [r4, #8]
 8004228:	42be      	cmp	r6, r7
 800422a:	d900      	bls.n	800422e <__ssputs_r+0x86>
 800422c:	463e      	mov	r6, r7
 800422e:	4632      	mov	r2, r6
 8004230:	4641      	mov	r1, r8
 8004232:	6820      	ldr	r0, [r4, #0]
 8004234:	f000 fac6 	bl	80047c4 <memmove>
 8004238:	68a3      	ldr	r3, [r4, #8]
 800423a:	2000      	movs	r0, #0
 800423c:	1b9b      	subs	r3, r3, r6
 800423e:	60a3      	str	r3, [r4, #8]
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	4433      	add	r3, r6
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	e7db      	b.n	8004200 <__ssputs_r+0x58>
 8004248:	462a      	mov	r2, r5
 800424a:	f000 fbb1 	bl	80049b0 <_realloc_r>
 800424e:	4606      	mov	r6, r0
 8004250:	2800      	cmp	r0, #0
 8004252:	d1e1      	bne.n	8004218 <__ssputs_r+0x70>
 8004254:	4650      	mov	r0, sl
 8004256:	6921      	ldr	r1, [r4, #16]
 8004258:	f000 face 	bl	80047f8 <_free_r>
 800425c:	e7c7      	b.n	80041ee <__ssputs_r+0x46>
	...

08004260 <_svfiprintf_r>:
 8004260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	4698      	mov	r8, r3
 8004266:	898b      	ldrh	r3, [r1, #12]
 8004268:	4607      	mov	r7, r0
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	460d      	mov	r5, r1
 800426e:	4614      	mov	r4, r2
 8004270:	b09d      	sub	sp, #116	; 0x74
 8004272:	d50e      	bpl.n	8004292 <_svfiprintf_r+0x32>
 8004274:	690b      	ldr	r3, [r1, #16]
 8004276:	b963      	cbnz	r3, 8004292 <_svfiprintf_r+0x32>
 8004278:	2140      	movs	r1, #64	; 0x40
 800427a:	f000 fb25 	bl	80048c8 <_malloc_r>
 800427e:	6028      	str	r0, [r5, #0]
 8004280:	6128      	str	r0, [r5, #16]
 8004282:	b920      	cbnz	r0, 800428e <_svfiprintf_r+0x2e>
 8004284:	230c      	movs	r3, #12
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	e0d1      	b.n	8004432 <_svfiprintf_r+0x1d2>
 800428e:	2340      	movs	r3, #64	; 0x40
 8004290:	616b      	str	r3, [r5, #20]
 8004292:	2300      	movs	r3, #0
 8004294:	9309      	str	r3, [sp, #36]	; 0x24
 8004296:	2320      	movs	r3, #32
 8004298:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800429c:	2330      	movs	r3, #48	; 0x30
 800429e:	f04f 0901 	mov.w	r9, #1
 80042a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80042a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800444c <_svfiprintf_r+0x1ec>
 80042aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042ae:	4623      	mov	r3, r4
 80042b0:	469a      	mov	sl, r3
 80042b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042b6:	b10a      	cbz	r2, 80042bc <_svfiprintf_r+0x5c>
 80042b8:	2a25      	cmp	r2, #37	; 0x25
 80042ba:	d1f9      	bne.n	80042b0 <_svfiprintf_r+0x50>
 80042bc:	ebba 0b04 	subs.w	fp, sl, r4
 80042c0:	d00b      	beq.n	80042da <_svfiprintf_r+0x7a>
 80042c2:	465b      	mov	r3, fp
 80042c4:	4622      	mov	r2, r4
 80042c6:	4629      	mov	r1, r5
 80042c8:	4638      	mov	r0, r7
 80042ca:	f7ff ff6d 	bl	80041a8 <__ssputs_r>
 80042ce:	3001      	adds	r0, #1
 80042d0:	f000 80aa 	beq.w	8004428 <_svfiprintf_r+0x1c8>
 80042d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042d6:	445a      	add	r2, fp
 80042d8:	9209      	str	r2, [sp, #36]	; 0x24
 80042da:	f89a 3000 	ldrb.w	r3, [sl]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80a2 	beq.w	8004428 <_svfiprintf_r+0x1c8>
 80042e4:	2300      	movs	r3, #0
 80042e6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ee:	f10a 0a01 	add.w	sl, sl, #1
 80042f2:	9304      	str	r3, [sp, #16]
 80042f4:	9307      	str	r3, [sp, #28]
 80042f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042fa:	931a      	str	r3, [sp, #104]	; 0x68
 80042fc:	4654      	mov	r4, sl
 80042fe:	2205      	movs	r2, #5
 8004300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004304:	4851      	ldr	r0, [pc, #324]	; (800444c <_svfiprintf_r+0x1ec>)
 8004306:	f000 fa41 	bl	800478c <memchr>
 800430a:	9a04      	ldr	r2, [sp, #16]
 800430c:	b9d8      	cbnz	r0, 8004346 <_svfiprintf_r+0xe6>
 800430e:	06d0      	lsls	r0, r2, #27
 8004310:	bf44      	itt	mi
 8004312:	2320      	movmi	r3, #32
 8004314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004318:	0711      	lsls	r1, r2, #28
 800431a:	bf44      	itt	mi
 800431c:	232b      	movmi	r3, #43	; 0x2b
 800431e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004322:	f89a 3000 	ldrb.w	r3, [sl]
 8004326:	2b2a      	cmp	r3, #42	; 0x2a
 8004328:	d015      	beq.n	8004356 <_svfiprintf_r+0xf6>
 800432a:	4654      	mov	r4, sl
 800432c:	2000      	movs	r0, #0
 800432e:	f04f 0c0a 	mov.w	ip, #10
 8004332:	9a07      	ldr	r2, [sp, #28]
 8004334:	4621      	mov	r1, r4
 8004336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800433a:	3b30      	subs	r3, #48	; 0x30
 800433c:	2b09      	cmp	r3, #9
 800433e:	d94e      	bls.n	80043de <_svfiprintf_r+0x17e>
 8004340:	b1b0      	cbz	r0, 8004370 <_svfiprintf_r+0x110>
 8004342:	9207      	str	r2, [sp, #28]
 8004344:	e014      	b.n	8004370 <_svfiprintf_r+0x110>
 8004346:	eba0 0308 	sub.w	r3, r0, r8
 800434a:	fa09 f303 	lsl.w	r3, r9, r3
 800434e:	4313      	orrs	r3, r2
 8004350:	46a2      	mov	sl, r4
 8004352:	9304      	str	r3, [sp, #16]
 8004354:	e7d2      	b.n	80042fc <_svfiprintf_r+0x9c>
 8004356:	9b03      	ldr	r3, [sp, #12]
 8004358:	1d19      	adds	r1, r3, #4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	9103      	str	r1, [sp, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	bfbb      	ittet	lt
 8004362:	425b      	neglt	r3, r3
 8004364:	f042 0202 	orrlt.w	r2, r2, #2
 8004368:	9307      	strge	r3, [sp, #28]
 800436a:	9307      	strlt	r3, [sp, #28]
 800436c:	bfb8      	it	lt
 800436e:	9204      	strlt	r2, [sp, #16]
 8004370:	7823      	ldrb	r3, [r4, #0]
 8004372:	2b2e      	cmp	r3, #46	; 0x2e
 8004374:	d10c      	bne.n	8004390 <_svfiprintf_r+0x130>
 8004376:	7863      	ldrb	r3, [r4, #1]
 8004378:	2b2a      	cmp	r3, #42	; 0x2a
 800437a:	d135      	bne.n	80043e8 <_svfiprintf_r+0x188>
 800437c:	9b03      	ldr	r3, [sp, #12]
 800437e:	3402      	adds	r4, #2
 8004380:	1d1a      	adds	r2, r3, #4
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	9203      	str	r2, [sp, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	bfb8      	it	lt
 800438a:	f04f 33ff 	movlt.w	r3, #4294967295
 800438e:	9305      	str	r3, [sp, #20]
 8004390:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004450 <_svfiprintf_r+0x1f0>
 8004394:	2203      	movs	r2, #3
 8004396:	4650      	mov	r0, sl
 8004398:	7821      	ldrb	r1, [r4, #0]
 800439a:	f000 f9f7 	bl	800478c <memchr>
 800439e:	b140      	cbz	r0, 80043b2 <_svfiprintf_r+0x152>
 80043a0:	2340      	movs	r3, #64	; 0x40
 80043a2:	eba0 000a 	sub.w	r0, r0, sl
 80043a6:	fa03 f000 	lsl.w	r0, r3, r0
 80043aa:	9b04      	ldr	r3, [sp, #16]
 80043ac:	3401      	adds	r4, #1
 80043ae:	4303      	orrs	r3, r0
 80043b0:	9304      	str	r3, [sp, #16]
 80043b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b6:	2206      	movs	r2, #6
 80043b8:	4826      	ldr	r0, [pc, #152]	; (8004454 <_svfiprintf_r+0x1f4>)
 80043ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043be:	f000 f9e5 	bl	800478c <memchr>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d038      	beq.n	8004438 <_svfiprintf_r+0x1d8>
 80043c6:	4b24      	ldr	r3, [pc, #144]	; (8004458 <_svfiprintf_r+0x1f8>)
 80043c8:	bb1b      	cbnz	r3, 8004412 <_svfiprintf_r+0x1b2>
 80043ca:	9b03      	ldr	r3, [sp, #12]
 80043cc:	3307      	adds	r3, #7
 80043ce:	f023 0307 	bic.w	r3, r3, #7
 80043d2:	3308      	adds	r3, #8
 80043d4:	9303      	str	r3, [sp, #12]
 80043d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d8:	4433      	add	r3, r6
 80043da:	9309      	str	r3, [sp, #36]	; 0x24
 80043dc:	e767      	b.n	80042ae <_svfiprintf_r+0x4e>
 80043de:	460c      	mov	r4, r1
 80043e0:	2001      	movs	r0, #1
 80043e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80043e6:	e7a5      	b.n	8004334 <_svfiprintf_r+0xd4>
 80043e8:	2300      	movs	r3, #0
 80043ea:	f04f 0c0a 	mov.w	ip, #10
 80043ee:	4619      	mov	r1, r3
 80043f0:	3401      	adds	r4, #1
 80043f2:	9305      	str	r3, [sp, #20]
 80043f4:	4620      	mov	r0, r4
 80043f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043fa:	3a30      	subs	r2, #48	; 0x30
 80043fc:	2a09      	cmp	r2, #9
 80043fe:	d903      	bls.n	8004408 <_svfiprintf_r+0x1a8>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0c5      	beq.n	8004390 <_svfiprintf_r+0x130>
 8004404:	9105      	str	r1, [sp, #20]
 8004406:	e7c3      	b.n	8004390 <_svfiprintf_r+0x130>
 8004408:	4604      	mov	r4, r0
 800440a:	2301      	movs	r3, #1
 800440c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004410:	e7f0      	b.n	80043f4 <_svfiprintf_r+0x194>
 8004412:	ab03      	add	r3, sp, #12
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	462a      	mov	r2, r5
 8004418:	4638      	mov	r0, r7
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <_svfiprintf_r+0x1fc>)
 800441c:	a904      	add	r1, sp, #16
 800441e:	f3af 8000 	nop.w
 8004422:	1c42      	adds	r2, r0, #1
 8004424:	4606      	mov	r6, r0
 8004426:	d1d6      	bne.n	80043d6 <_svfiprintf_r+0x176>
 8004428:	89ab      	ldrh	r3, [r5, #12]
 800442a:	065b      	lsls	r3, r3, #25
 800442c:	f53f af2c 	bmi.w	8004288 <_svfiprintf_r+0x28>
 8004430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004432:	b01d      	add	sp, #116	; 0x74
 8004434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004438:	ab03      	add	r3, sp, #12
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	462a      	mov	r2, r5
 800443e:	4638      	mov	r0, r7
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <_svfiprintf_r+0x1fc>)
 8004442:	a904      	add	r1, sp, #16
 8004444:	f000 f87c 	bl	8004540 <_printf_i>
 8004448:	e7eb      	b.n	8004422 <_svfiprintf_r+0x1c2>
 800444a:	bf00      	nop
 800444c:	08004b1c 	.word	0x08004b1c
 8004450:	08004b22 	.word	0x08004b22
 8004454:	08004b26 	.word	0x08004b26
 8004458:	00000000 	.word	0x00000000
 800445c:	080041a9 	.word	0x080041a9

08004460 <_printf_common>:
 8004460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004464:	4616      	mov	r6, r2
 8004466:	4699      	mov	r9, r3
 8004468:	688a      	ldr	r2, [r1, #8]
 800446a:	690b      	ldr	r3, [r1, #16]
 800446c:	4607      	mov	r7, r0
 800446e:	4293      	cmp	r3, r2
 8004470:	bfb8      	it	lt
 8004472:	4613      	movlt	r3, r2
 8004474:	6033      	str	r3, [r6, #0]
 8004476:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800447a:	460c      	mov	r4, r1
 800447c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004480:	b10a      	cbz	r2, 8004486 <_printf_common+0x26>
 8004482:	3301      	adds	r3, #1
 8004484:	6033      	str	r3, [r6, #0]
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	0699      	lsls	r1, r3, #26
 800448a:	bf42      	ittt	mi
 800448c:	6833      	ldrmi	r3, [r6, #0]
 800448e:	3302      	addmi	r3, #2
 8004490:	6033      	strmi	r3, [r6, #0]
 8004492:	6825      	ldr	r5, [r4, #0]
 8004494:	f015 0506 	ands.w	r5, r5, #6
 8004498:	d106      	bne.n	80044a8 <_printf_common+0x48>
 800449a:	f104 0a19 	add.w	sl, r4, #25
 800449e:	68e3      	ldr	r3, [r4, #12]
 80044a0:	6832      	ldr	r2, [r6, #0]
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	42ab      	cmp	r3, r5
 80044a6:	dc28      	bgt.n	80044fa <_printf_common+0x9a>
 80044a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044ac:	1e13      	subs	r3, r2, #0
 80044ae:	6822      	ldr	r2, [r4, #0]
 80044b0:	bf18      	it	ne
 80044b2:	2301      	movne	r3, #1
 80044b4:	0692      	lsls	r2, r2, #26
 80044b6:	d42d      	bmi.n	8004514 <_printf_common+0xb4>
 80044b8:	4649      	mov	r1, r9
 80044ba:	4638      	mov	r0, r7
 80044bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044c0:	47c0      	blx	r8
 80044c2:	3001      	adds	r0, #1
 80044c4:	d020      	beq.n	8004508 <_printf_common+0xa8>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	68e5      	ldr	r5, [r4, #12]
 80044ca:	f003 0306 	and.w	r3, r3, #6
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	bf18      	it	ne
 80044d2:	2500      	movne	r5, #0
 80044d4:	6832      	ldr	r2, [r6, #0]
 80044d6:	f04f 0600 	mov.w	r6, #0
 80044da:	68a3      	ldr	r3, [r4, #8]
 80044dc:	bf08      	it	eq
 80044de:	1aad      	subeq	r5, r5, r2
 80044e0:	6922      	ldr	r2, [r4, #16]
 80044e2:	bf08      	it	eq
 80044e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044e8:	4293      	cmp	r3, r2
 80044ea:	bfc4      	itt	gt
 80044ec:	1a9b      	subgt	r3, r3, r2
 80044ee:	18ed      	addgt	r5, r5, r3
 80044f0:	341a      	adds	r4, #26
 80044f2:	42b5      	cmp	r5, r6
 80044f4:	d11a      	bne.n	800452c <_printf_common+0xcc>
 80044f6:	2000      	movs	r0, #0
 80044f8:	e008      	b.n	800450c <_printf_common+0xac>
 80044fa:	2301      	movs	r3, #1
 80044fc:	4652      	mov	r2, sl
 80044fe:	4649      	mov	r1, r9
 8004500:	4638      	mov	r0, r7
 8004502:	47c0      	blx	r8
 8004504:	3001      	adds	r0, #1
 8004506:	d103      	bne.n	8004510 <_printf_common+0xb0>
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004510:	3501      	adds	r5, #1
 8004512:	e7c4      	b.n	800449e <_printf_common+0x3e>
 8004514:	2030      	movs	r0, #48	; 0x30
 8004516:	18e1      	adds	r1, r4, r3
 8004518:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004522:	4422      	add	r2, r4
 8004524:	3302      	adds	r3, #2
 8004526:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800452a:	e7c5      	b.n	80044b8 <_printf_common+0x58>
 800452c:	2301      	movs	r3, #1
 800452e:	4622      	mov	r2, r4
 8004530:	4649      	mov	r1, r9
 8004532:	4638      	mov	r0, r7
 8004534:	47c0      	blx	r8
 8004536:	3001      	adds	r0, #1
 8004538:	d0e6      	beq.n	8004508 <_printf_common+0xa8>
 800453a:	3601      	adds	r6, #1
 800453c:	e7d9      	b.n	80044f2 <_printf_common+0x92>
	...

08004540 <_printf_i>:
 8004540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004544:	7e0f      	ldrb	r7, [r1, #24]
 8004546:	4691      	mov	r9, r2
 8004548:	2f78      	cmp	r7, #120	; 0x78
 800454a:	4680      	mov	r8, r0
 800454c:	460c      	mov	r4, r1
 800454e:	469a      	mov	sl, r3
 8004550:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004552:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004556:	d807      	bhi.n	8004568 <_printf_i+0x28>
 8004558:	2f62      	cmp	r7, #98	; 0x62
 800455a:	d80a      	bhi.n	8004572 <_printf_i+0x32>
 800455c:	2f00      	cmp	r7, #0
 800455e:	f000 80d9 	beq.w	8004714 <_printf_i+0x1d4>
 8004562:	2f58      	cmp	r7, #88	; 0x58
 8004564:	f000 80a4 	beq.w	80046b0 <_printf_i+0x170>
 8004568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800456c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004570:	e03a      	b.n	80045e8 <_printf_i+0xa8>
 8004572:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004576:	2b15      	cmp	r3, #21
 8004578:	d8f6      	bhi.n	8004568 <_printf_i+0x28>
 800457a:	a101      	add	r1, pc, #4	; (adr r1, 8004580 <_printf_i+0x40>)
 800457c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004580:	080045d9 	.word	0x080045d9
 8004584:	080045ed 	.word	0x080045ed
 8004588:	08004569 	.word	0x08004569
 800458c:	08004569 	.word	0x08004569
 8004590:	08004569 	.word	0x08004569
 8004594:	08004569 	.word	0x08004569
 8004598:	080045ed 	.word	0x080045ed
 800459c:	08004569 	.word	0x08004569
 80045a0:	08004569 	.word	0x08004569
 80045a4:	08004569 	.word	0x08004569
 80045a8:	08004569 	.word	0x08004569
 80045ac:	080046fb 	.word	0x080046fb
 80045b0:	0800461d 	.word	0x0800461d
 80045b4:	080046dd 	.word	0x080046dd
 80045b8:	08004569 	.word	0x08004569
 80045bc:	08004569 	.word	0x08004569
 80045c0:	0800471d 	.word	0x0800471d
 80045c4:	08004569 	.word	0x08004569
 80045c8:	0800461d 	.word	0x0800461d
 80045cc:	08004569 	.word	0x08004569
 80045d0:	08004569 	.word	0x08004569
 80045d4:	080046e5 	.word	0x080046e5
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	1d1a      	adds	r2, r3, #4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	602a      	str	r2, [r5, #0]
 80045e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0a4      	b.n	8004736 <_printf_i+0x1f6>
 80045ec:	6820      	ldr	r0, [r4, #0]
 80045ee:	6829      	ldr	r1, [r5, #0]
 80045f0:	0606      	lsls	r6, r0, #24
 80045f2:	f101 0304 	add.w	r3, r1, #4
 80045f6:	d50a      	bpl.n	800460e <_printf_i+0xce>
 80045f8:	680e      	ldr	r6, [r1, #0]
 80045fa:	602b      	str	r3, [r5, #0]
 80045fc:	2e00      	cmp	r6, #0
 80045fe:	da03      	bge.n	8004608 <_printf_i+0xc8>
 8004600:	232d      	movs	r3, #45	; 0x2d
 8004602:	4276      	negs	r6, r6
 8004604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004608:	230a      	movs	r3, #10
 800460a:	485e      	ldr	r0, [pc, #376]	; (8004784 <_printf_i+0x244>)
 800460c:	e019      	b.n	8004642 <_printf_i+0x102>
 800460e:	680e      	ldr	r6, [r1, #0]
 8004610:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004614:	602b      	str	r3, [r5, #0]
 8004616:	bf18      	it	ne
 8004618:	b236      	sxthne	r6, r6
 800461a:	e7ef      	b.n	80045fc <_printf_i+0xbc>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	6820      	ldr	r0, [r4, #0]
 8004620:	1d19      	adds	r1, r3, #4
 8004622:	6029      	str	r1, [r5, #0]
 8004624:	0601      	lsls	r1, r0, #24
 8004626:	d501      	bpl.n	800462c <_printf_i+0xec>
 8004628:	681e      	ldr	r6, [r3, #0]
 800462a:	e002      	b.n	8004632 <_printf_i+0xf2>
 800462c:	0646      	lsls	r6, r0, #25
 800462e:	d5fb      	bpl.n	8004628 <_printf_i+0xe8>
 8004630:	881e      	ldrh	r6, [r3, #0]
 8004632:	2f6f      	cmp	r7, #111	; 0x6f
 8004634:	bf0c      	ite	eq
 8004636:	2308      	moveq	r3, #8
 8004638:	230a      	movne	r3, #10
 800463a:	4852      	ldr	r0, [pc, #328]	; (8004784 <_printf_i+0x244>)
 800463c:	2100      	movs	r1, #0
 800463e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004642:	6865      	ldr	r5, [r4, #4]
 8004644:	2d00      	cmp	r5, #0
 8004646:	bfa8      	it	ge
 8004648:	6821      	ldrge	r1, [r4, #0]
 800464a:	60a5      	str	r5, [r4, #8]
 800464c:	bfa4      	itt	ge
 800464e:	f021 0104 	bicge.w	r1, r1, #4
 8004652:	6021      	strge	r1, [r4, #0]
 8004654:	b90e      	cbnz	r6, 800465a <_printf_i+0x11a>
 8004656:	2d00      	cmp	r5, #0
 8004658:	d04d      	beq.n	80046f6 <_printf_i+0x1b6>
 800465a:	4615      	mov	r5, r2
 800465c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004660:	fb03 6711 	mls	r7, r3, r1, r6
 8004664:	5dc7      	ldrb	r7, [r0, r7]
 8004666:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800466a:	4637      	mov	r7, r6
 800466c:	42bb      	cmp	r3, r7
 800466e:	460e      	mov	r6, r1
 8004670:	d9f4      	bls.n	800465c <_printf_i+0x11c>
 8004672:	2b08      	cmp	r3, #8
 8004674:	d10b      	bne.n	800468e <_printf_i+0x14e>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	07de      	lsls	r6, r3, #31
 800467a:	d508      	bpl.n	800468e <_printf_i+0x14e>
 800467c:	6923      	ldr	r3, [r4, #16]
 800467e:	6861      	ldr	r1, [r4, #4]
 8004680:	4299      	cmp	r1, r3
 8004682:	bfde      	ittt	le
 8004684:	2330      	movle	r3, #48	; 0x30
 8004686:	f805 3c01 	strble.w	r3, [r5, #-1]
 800468a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800468e:	1b52      	subs	r2, r2, r5
 8004690:	6122      	str	r2, [r4, #16]
 8004692:	464b      	mov	r3, r9
 8004694:	4621      	mov	r1, r4
 8004696:	4640      	mov	r0, r8
 8004698:	f8cd a000 	str.w	sl, [sp]
 800469c:	aa03      	add	r2, sp, #12
 800469e:	f7ff fedf 	bl	8004460 <_printf_common>
 80046a2:	3001      	adds	r0, #1
 80046a4:	d14c      	bne.n	8004740 <_printf_i+0x200>
 80046a6:	f04f 30ff 	mov.w	r0, #4294967295
 80046aa:	b004      	add	sp, #16
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	4834      	ldr	r0, [pc, #208]	; (8004784 <_printf_i+0x244>)
 80046b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046b6:	6829      	ldr	r1, [r5, #0]
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80046be:	6029      	str	r1, [r5, #0]
 80046c0:	061d      	lsls	r5, r3, #24
 80046c2:	d514      	bpl.n	80046ee <_printf_i+0x1ae>
 80046c4:	07df      	lsls	r7, r3, #31
 80046c6:	bf44      	itt	mi
 80046c8:	f043 0320 	orrmi.w	r3, r3, #32
 80046cc:	6023      	strmi	r3, [r4, #0]
 80046ce:	b91e      	cbnz	r6, 80046d8 <_printf_i+0x198>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	f023 0320 	bic.w	r3, r3, #32
 80046d6:	6023      	str	r3, [r4, #0]
 80046d8:	2310      	movs	r3, #16
 80046da:	e7af      	b.n	800463c <_printf_i+0xfc>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	f043 0320 	orr.w	r3, r3, #32
 80046e2:	6023      	str	r3, [r4, #0]
 80046e4:	2378      	movs	r3, #120	; 0x78
 80046e6:	4828      	ldr	r0, [pc, #160]	; (8004788 <_printf_i+0x248>)
 80046e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046ec:	e7e3      	b.n	80046b6 <_printf_i+0x176>
 80046ee:	0659      	lsls	r1, r3, #25
 80046f0:	bf48      	it	mi
 80046f2:	b2b6      	uxthmi	r6, r6
 80046f4:	e7e6      	b.n	80046c4 <_printf_i+0x184>
 80046f6:	4615      	mov	r5, r2
 80046f8:	e7bb      	b.n	8004672 <_printf_i+0x132>
 80046fa:	682b      	ldr	r3, [r5, #0]
 80046fc:	6826      	ldr	r6, [r4, #0]
 80046fe:	1d18      	adds	r0, r3, #4
 8004700:	6961      	ldr	r1, [r4, #20]
 8004702:	6028      	str	r0, [r5, #0]
 8004704:	0635      	lsls	r5, r6, #24
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	d501      	bpl.n	800470e <_printf_i+0x1ce>
 800470a:	6019      	str	r1, [r3, #0]
 800470c:	e002      	b.n	8004714 <_printf_i+0x1d4>
 800470e:	0670      	lsls	r0, r6, #25
 8004710:	d5fb      	bpl.n	800470a <_printf_i+0x1ca>
 8004712:	8019      	strh	r1, [r3, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	4615      	mov	r5, r2
 8004718:	6123      	str	r3, [r4, #16]
 800471a:	e7ba      	b.n	8004692 <_printf_i+0x152>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	2100      	movs	r1, #0
 8004720:	1d1a      	adds	r2, r3, #4
 8004722:	602a      	str	r2, [r5, #0]
 8004724:	681d      	ldr	r5, [r3, #0]
 8004726:	6862      	ldr	r2, [r4, #4]
 8004728:	4628      	mov	r0, r5
 800472a:	f000 f82f 	bl	800478c <memchr>
 800472e:	b108      	cbz	r0, 8004734 <_printf_i+0x1f4>
 8004730:	1b40      	subs	r0, r0, r5
 8004732:	6060      	str	r0, [r4, #4]
 8004734:	6863      	ldr	r3, [r4, #4]
 8004736:	6123      	str	r3, [r4, #16]
 8004738:	2300      	movs	r3, #0
 800473a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473e:	e7a8      	b.n	8004692 <_printf_i+0x152>
 8004740:	462a      	mov	r2, r5
 8004742:	4649      	mov	r1, r9
 8004744:	4640      	mov	r0, r8
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	47d0      	blx	sl
 800474a:	3001      	adds	r0, #1
 800474c:	d0ab      	beq.n	80046a6 <_printf_i+0x166>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	079b      	lsls	r3, r3, #30
 8004752:	d413      	bmi.n	800477c <_printf_i+0x23c>
 8004754:	68e0      	ldr	r0, [r4, #12]
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	4298      	cmp	r0, r3
 800475a:	bfb8      	it	lt
 800475c:	4618      	movlt	r0, r3
 800475e:	e7a4      	b.n	80046aa <_printf_i+0x16a>
 8004760:	2301      	movs	r3, #1
 8004762:	4632      	mov	r2, r6
 8004764:	4649      	mov	r1, r9
 8004766:	4640      	mov	r0, r8
 8004768:	47d0      	blx	sl
 800476a:	3001      	adds	r0, #1
 800476c:	d09b      	beq.n	80046a6 <_printf_i+0x166>
 800476e:	3501      	adds	r5, #1
 8004770:	68e3      	ldr	r3, [r4, #12]
 8004772:	9903      	ldr	r1, [sp, #12]
 8004774:	1a5b      	subs	r3, r3, r1
 8004776:	42ab      	cmp	r3, r5
 8004778:	dcf2      	bgt.n	8004760 <_printf_i+0x220>
 800477a:	e7eb      	b.n	8004754 <_printf_i+0x214>
 800477c:	2500      	movs	r5, #0
 800477e:	f104 0619 	add.w	r6, r4, #25
 8004782:	e7f5      	b.n	8004770 <_printf_i+0x230>
 8004784:	08004b2d 	.word	0x08004b2d
 8004788:	08004b3e 	.word	0x08004b3e

0800478c <memchr>:
 800478c:	4603      	mov	r3, r0
 800478e:	b510      	push	{r4, lr}
 8004790:	b2c9      	uxtb	r1, r1
 8004792:	4402      	add	r2, r0
 8004794:	4293      	cmp	r3, r2
 8004796:	4618      	mov	r0, r3
 8004798:	d101      	bne.n	800479e <memchr+0x12>
 800479a:	2000      	movs	r0, #0
 800479c:	e003      	b.n	80047a6 <memchr+0x1a>
 800479e:	7804      	ldrb	r4, [r0, #0]
 80047a0:	3301      	adds	r3, #1
 80047a2:	428c      	cmp	r4, r1
 80047a4:	d1f6      	bne.n	8004794 <memchr+0x8>
 80047a6:	bd10      	pop	{r4, pc}

080047a8 <memcpy>:
 80047a8:	440a      	add	r2, r1
 80047aa:	4291      	cmp	r1, r2
 80047ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80047b0:	d100      	bne.n	80047b4 <memcpy+0xc>
 80047b2:	4770      	bx	lr
 80047b4:	b510      	push	{r4, lr}
 80047b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ba:	4291      	cmp	r1, r2
 80047bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047c0:	d1f9      	bne.n	80047b6 <memcpy+0xe>
 80047c2:	bd10      	pop	{r4, pc}

080047c4 <memmove>:
 80047c4:	4288      	cmp	r0, r1
 80047c6:	b510      	push	{r4, lr}
 80047c8:	eb01 0402 	add.w	r4, r1, r2
 80047cc:	d902      	bls.n	80047d4 <memmove+0x10>
 80047ce:	4284      	cmp	r4, r0
 80047d0:	4623      	mov	r3, r4
 80047d2:	d807      	bhi.n	80047e4 <memmove+0x20>
 80047d4:	1e43      	subs	r3, r0, #1
 80047d6:	42a1      	cmp	r1, r4
 80047d8:	d008      	beq.n	80047ec <memmove+0x28>
 80047da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047e2:	e7f8      	b.n	80047d6 <memmove+0x12>
 80047e4:	4601      	mov	r1, r0
 80047e6:	4402      	add	r2, r0
 80047e8:	428a      	cmp	r2, r1
 80047ea:	d100      	bne.n	80047ee <memmove+0x2a>
 80047ec:	bd10      	pop	{r4, pc}
 80047ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047f6:	e7f7      	b.n	80047e8 <memmove+0x24>

080047f8 <_free_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	4605      	mov	r5, r0
 80047fc:	2900      	cmp	r1, #0
 80047fe:	d040      	beq.n	8004882 <_free_r+0x8a>
 8004800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004804:	1f0c      	subs	r4, r1, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	bfb8      	it	lt
 800480a:	18e4      	addlt	r4, r4, r3
 800480c:	f000 f910 	bl	8004a30 <__malloc_lock>
 8004810:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <_free_r+0x8c>)
 8004812:	6813      	ldr	r3, [r2, #0]
 8004814:	b933      	cbnz	r3, 8004824 <_free_r+0x2c>
 8004816:	6063      	str	r3, [r4, #4]
 8004818:	6014      	str	r4, [r2, #0]
 800481a:	4628      	mov	r0, r5
 800481c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004820:	f000 b90c 	b.w	8004a3c <__malloc_unlock>
 8004824:	42a3      	cmp	r3, r4
 8004826:	d908      	bls.n	800483a <_free_r+0x42>
 8004828:	6820      	ldr	r0, [r4, #0]
 800482a:	1821      	adds	r1, r4, r0
 800482c:	428b      	cmp	r3, r1
 800482e:	bf01      	itttt	eq
 8004830:	6819      	ldreq	r1, [r3, #0]
 8004832:	685b      	ldreq	r3, [r3, #4]
 8004834:	1809      	addeq	r1, r1, r0
 8004836:	6021      	streq	r1, [r4, #0]
 8004838:	e7ed      	b.n	8004816 <_free_r+0x1e>
 800483a:	461a      	mov	r2, r3
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	b10b      	cbz	r3, 8004844 <_free_r+0x4c>
 8004840:	42a3      	cmp	r3, r4
 8004842:	d9fa      	bls.n	800483a <_free_r+0x42>
 8004844:	6811      	ldr	r1, [r2, #0]
 8004846:	1850      	adds	r0, r2, r1
 8004848:	42a0      	cmp	r0, r4
 800484a:	d10b      	bne.n	8004864 <_free_r+0x6c>
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	4401      	add	r1, r0
 8004850:	1850      	adds	r0, r2, r1
 8004852:	4283      	cmp	r3, r0
 8004854:	6011      	str	r1, [r2, #0]
 8004856:	d1e0      	bne.n	800481a <_free_r+0x22>
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	4401      	add	r1, r0
 800485e:	6011      	str	r1, [r2, #0]
 8004860:	6053      	str	r3, [r2, #4]
 8004862:	e7da      	b.n	800481a <_free_r+0x22>
 8004864:	d902      	bls.n	800486c <_free_r+0x74>
 8004866:	230c      	movs	r3, #12
 8004868:	602b      	str	r3, [r5, #0]
 800486a:	e7d6      	b.n	800481a <_free_r+0x22>
 800486c:	6820      	ldr	r0, [r4, #0]
 800486e:	1821      	adds	r1, r4, r0
 8004870:	428b      	cmp	r3, r1
 8004872:	bf01      	itttt	eq
 8004874:	6819      	ldreq	r1, [r3, #0]
 8004876:	685b      	ldreq	r3, [r3, #4]
 8004878:	1809      	addeq	r1, r1, r0
 800487a:	6021      	streq	r1, [r4, #0]
 800487c:	6063      	str	r3, [r4, #4]
 800487e:	6054      	str	r4, [r2, #4]
 8004880:	e7cb      	b.n	800481a <_free_r+0x22>
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	2000027c 	.word	0x2000027c

08004888 <sbrk_aligned>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	4e0e      	ldr	r6, [pc, #56]	; (80048c4 <sbrk_aligned+0x3c>)
 800488c:	460c      	mov	r4, r1
 800488e:	6831      	ldr	r1, [r6, #0]
 8004890:	4605      	mov	r5, r0
 8004892:	b911      	cbnz	r1, 800489a <sbrk_aligned+0x12>
 8004894:	f000 f8bc 	bl	8004a10 <_sbrk_r>
 8004898:	6030      	str	r0, [r6, #0]
 800489a:	4621      	mov	r1, r4
 800489c:	4628      	mov	r0, r5
 800489e:	f000 f8b7 	bl	8004a10 <_sbrk_r>
 80048a2:	1c43      	adds	r3, r0, #1
 80048a4:	d00a      	beq.n	80048bc <sbrk_aligned+0x34>
 80048a6:	1cc4      	adds	r4, r0, #3
 80048a8:	f024 0403 	bic.w	r4, r4, #3
 80048ac:	42a0      	cmp	r0, r4
 80048ae:	d007      	beq.n	80048c0 <sbrk_aligned+0x38>
 80048b0:	1a21      	subs	r1, r4, r0
 80048b2:	4628      	mov	r0, r5
 80048b4:	f000 f8ac 	bl	8004a10 <_sbrk_r>
 80048b8:	3001      	adds	r0, #1
 80048ba:	d101      	bne.n	80048c0 <sbrk_aligned+0x38>
 80048bc:	f04f 34ff 	mov.w	r4, #4294967295
 80048c0:	4620      	mov	r0, r4
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	20000280 	.word	0x20000280

080048c8 <_malloc_r>:
 80048c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048cc:	1ccd      	adds	r5, r1, #3
 80048ce:	f025 0503 	bic.w	r5, r5, #3
 80048d2:	3508      	adds	r5, #8
 80048d4:	2d0c      	cmp	r5, #12
 80048d6:	bf38      	it	cc
 80048d8:	250c      	movcc	r5, #12
 80048da:	2d00      	cmp	r5, #0
 80048dc:	4607      	mov	r7, r0
 80048de:	db01      	blt.n	80048e4 <_malloc_r+0x1c>
 80048e0:	42a9      	cmp	r1, r5
 80048e2:	d905      	bls.n	80048f0 <_malloc_r+0x28>
 80048e4:	230c      	movs	r3, #12
 80048e6:	2600      	movs	r6, #0
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	4630      	mov	r0, r6
 80048ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f0:	4e2e      	ldr	r6, [pc, #184]	; (80049ac <_malloc_r+0xe4>)
 80048f2:	f000 f89d 	bl	8004a30 <__malloc_lock>
 80048f6:	6833      	ldr	r3, [r6, #0]
 80048f8:	461c      	mov	r4, r3
 80048fa:	bb34      	cbnz	r4, 800494a <_malloc_r+0x82>
 80048fc:	4629      	mov	r1, r5
 80048fe:	4638      	mov	r0, r7
 8004900:	f7ff ffc2 	bl	8004888 <sbrk_aligned>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	4604      	mov	r4, r0
 8004908:	d14d      	bne.n	80049a6 <_malloc_r+0xde>
 800490a:	6834      	ldr	r4, [r6, #0]
 800490c:	4626      	mov	r6, r4
 800490e:	2e00      	cmp	r6, #0
 8004910:	d140      	bne.n	8004994 <_malloc_r+0xcc>
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	4631      	mov	r1, r6
 8004916:	4638      	mov	r0, r7
 8004918:	eb04 0803 	add.w	r8, r4, r3
 800491c:	f000 f878 	bl	8004a10 <_sbrk_r>
 8004920:	4580      	cmp	r8, r0
 8004922:	d13a      	bne.n	800499a <_malloc_r+0xd2>
 8004924:	6821      	ldr	r1, [r4, #0]
 8004926:	3503      	adds	r5, #3
 8004928:	1a6d      	subs	r5, r5, r1
 800492a:	f025 0503 	bic.w	r5, r5, #3
 800492e:	3508      	adds	r5, #8
 8004930:	2d0c      	cmp	r5, #12
 8004932:	bf38      	it	cc
 8004934:	250c      	movcc	r5, #12
 8004936:	4638      	mov	r0, r7
 8004938:	4629      	mov	r1, r5
 800493a:	f7ff ffa5 	bl	8004888 <sbrk_aligned>
 800493e:	3001      	adds	r0, #1
 8004940:	d02b      	beq.n	800499a <_malloc_r+0xd2>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	442b      	add	r3, r5
 8004946:	6023      	str	r3, [r4, #0]
 8004948:	e00e      	b.n	8004968 <_malloc_r+0xa0>
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	1b52      	subs	r2, r2, r5
 800494e:	d41e      	bmi.n	800498e <_malloc_r+0xc6>
 8004950:	2a0b      	cmp	r2, #11
 8004952:	d916      	bls.n	8004982 <_malloc_r+0xba>
 8004954:	1961      	adds	r1, r4, r5
 8004956:	42a3      	cmp	r3, r4
 8004958:	6025      	str	r5, [r4, #0]
 800495a:	bf18      	it	ne
 800495c:	6059      	strne	r1, [r3, #4]
 800495e:	6863      	ldr	r3, [r4, #4]
 8004960:	bf08      	it	eq
 8004962:	6031      	streq	r1, [r6, #0]
 8004964:	5162      	str	r2, [r4, r5]
 8004966:	604b      	str	r3, [r1, #4]
 8004968:	4638      	mov	r0, r7
 800496a:	f104 060b 	add.w	r6, r4, #11
 800496e:	f000 f865 	bl	8004a3c <__malloc_unlock>
 8004972:	f026 0607 	bic.w	r6, r6, #7
 8004976:	1d23      	adds	r3, r4, #4
 8004978:	1af2      	subs	r2, r6, r3
 800497a:	d0b6      	beq.n	80048ea <_malloc_r+0x22>
 800497c:	1b9b      	subs	r3, r3, r6
 800497e:	50a3      	str	r3, [r4, r2]
 8004980:	e7b3      	b.n	80048ea <_malloc_r+0x22>
 8004982:	6862      	ldr	r2, [r4, #4]
 8004984:	42a3      	cmp	r3, r4
 8004986:	bf0c      	ite	eq
 8004988:	6032      	streq	r2, [r6, #0]
 800498a:	605a      	strne	r2, [r3, #4]
 800498c:	e7ec      	b.n	8004968 <_malloc_r+0xa0>
 800498e:	4623      	mov	r3, r4
 8004990:	6864      	ldr	r4, [r4, #4]
 8004992:	e7b2      	b.n	80048fa <_malloc_r+0x32>
 8004994:	4634      	mov	r4, r6
 8004996:	6876      	ldr	r6, [r6, #4]
 8004998:	e7b9      	b.n	800490e <_malloc_r+0x46>
 800499a:	230c      	movs	r3, #12
 800499c:	4638      	mov	r0, r7
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	f000 f84c 	bl	8004a3c <__malloc_unlock>
 80049a4:	e7a1      	b.n	80048ea <_malloc_r+0x22>
 80049a6:	6025      	str	r5, [r4, #0]
 80049a8:	e7de      	b.n	8004968 <_malloc_r+0xa0>
 80049aa:	bf00      	nop
 80049ac:	2000027c 	.word	0x2000027c

080049b0 <_realloc_r>:
 80049b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b4:	4680      	mov	r8, r0
 80049b6:	4614      	mov	r4, r2
 80049b8:	460e      	mov	r6, r1
 80049ba:	b921      	cbnz	r1, 80049c6 <_realloc_r+0x16>
 80049bc:	4611      	mov	r1, r2
 80049be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049c2:	f7ff bf81 	b.w	80048c8 <_malloc_r>
 80049c6:	b92a      	cbnz	r2, 80049d4 <_realloc_r+0x24>
 80049c8:	f7ff ff16 	bl	80047f8 <_free_r>
 80049cc:	4625      	mov	r5, r4
 80049ce:	4628      	mov	r0, r5
 80049d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d4:	f000 f838 	bl	8004a48 <_malloc_usable_size_r>
 80049d8:	4284      	cmp	r4, r0
 80049da:	4607      	mov	r7, r0
 80049dc:	d802      	bhi.n	80049e4 <_realloc_r+0x34>
 80049de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049e2:	d812      	bhi.n	8004a0a <_realloc_r+0x5a>
 80049e4:	4621      	mov	r1, r4
 80049e6:	4640      	mov	r0, r8
 80049e8:	f7ff ff6e 	bl	80048c8 <_malloc_r>
 80049ec:	4605      	mov	r5, r0
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d0ed      	beq.n	80049ce <_realloc_r+0x1e>
 80049f2:	42bc      	cmp	r4, r7
 80049f4:	4622      	mov	r2, r4
 80049f6:	4631      	mov	r1, r6
 80049f8:	bf28      	it	cs
 80049fa:	463a      	movcs	r2, r7
 80049fc:	f7ff fed4 	bl	80047a8 <memcpy>
 8004a00:	4631      	mov	r1, r6
 8004a02:	4640      	mov	r0, r8
 8004a04:	f7ff fef8 	bl	80047f8 <_free_r>
 8004a08:	e7e1      	b.n	80049ce <_realloc_r+0x1e>
 8004a0a:	4635      	mov	r5, r6
 8004a0c:	e7df      	b.n	80049ce <_realloc_r+0x1e>
	...

08004a10 <_sbrk_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	2300      	movs	r3, #0
 8004a14:	4d05      	ldr	r5, [pc, #20]	; (8004a2c <_sbrk_r+0x1c>)
 8004a16:	4604      	mov	r4, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	f7fc fdb4 	bl	8001588 <_sbrk>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_sbrk_r+0x1a>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_sbrk_r+0x1a>
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	20000284 	.word	0x20000284

08004a30 <__malloc_lock>:
 8004a30:	4801      	ldr	r0, [pc, #4]	; (8004a38 <__malloc_lock+0x8>)
 8004a32:	f000 b811 	b.w	8004a58 <__retarget_lock_acquire_recursive>
 8004a36:	bf00      	nop
 8004a38:	20000288 	.word	0x20000288

08004a3c <__malloc_unlock>:
 8004a3c:	4801      	ldr	r0, [pc, #4]	; (8004a44 <__malloc_unlock+0x8>)
 8004a3e:	f000 b80c 	b.w	8004a5a <__retarget_lock_release_recursive>
 8004a42:	bf00      	nop
 8004a44:	20000288 	.word	0x20000288

08004a48 <_malloc_usable_size_r>:
 8004a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a4c:	1f18      	subs	r0, r3, #4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bfbc      	itt	lt
 8004a52:	580b      	ldrlt	r3, [r1, r0]
 8004a54:	18c0      	addlt	r0, r0, r3
 8004a56:	4770      	bx	lr

08004a58 <__retarget_lock_acquire_recursive>:
 8004a58:	4770      	bx	lr

08004a5a <__retarget_lock_release_recursive>:
 8004a5a:	4770      	bx	lr

08004a5c <_init>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr

08004a68 <_fini>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	bf00      	nop
 8004a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	469e      	mov	lr, r3
 8004a72:	4770      	bx	lr
